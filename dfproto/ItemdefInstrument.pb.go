// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ItemdefInstrument.proto

package dfproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PitchChoiceType int32

const (
	PitchChoiceType_MEMBRANE_POSITION     PitchChoiceType = 0
	PitchChoiceType_SUBPART_CHOICE        PitchChoiceType = 1
	PitchChoiceType_KEYBOARD              PitchChoiceType = 2
	PitchChoiceType_STOPPING_FRET         PitchChoiceType = 3
	PitchChoiceType_STOPPING_AGAINST_BODY PitchChoiceType = 4
	PitchChoiceType_STOPPING_HOLE         PitchChoiceType = 5
	PitchChoiceType_STOPPING_HOLE_KEY     PitchChoiceType = 6
	PitchChoiceType_SLIDE                 PitchChoiceType = 7
	PitchChoiceType_HARMONIC_SERIES       PitchChoiceType = 8
	PitchChoiceType_VALVE_ROUTES_AIR      PitchChoiceType = 9
	PitchChoiceType_BP_IN_BELL            PitchChoiceType = 10
	PitchChoiceType_FOOT_PEDALS           PitchChoiceType = 11
)

var PitchChoiceType_name = map[int32]string{
	0:  "MEMBRANE_POSITION",
	1:  "SUBPART_CHOICE",
	2:  "KEYBOARD",
	3:  "STOPPING_FRET",
	4:  "STOPPING_AGAINST_BODY",
	5:  "STOPPING_HOLE",
	6:  "STOPPING_HOLE_KEY",
	7:  "SLIDE",
	8:  "HARMONIC_SERIES",
	9:  "VALVE_ROUTES_AIR",
	10: "BP_IN_BELL",
	11: "FOOT_PEDALS",
}
var PitchChoiceType_value = map[string]int32{
	"MEMBRANE_POSITION":     0,
	"SUBPART_CHOICE":        1,
	"KEYBOARD":              2,
	"STOPPING_FRET":         3,
	"STOPPING_AGAINST_BODY": 4,
	"STOPPING_HOLE":         5,
	"STOPPING_HOLE_KEY":     6,
	"SLIDE":                 7,
	"HARMONIC_SERIES":       8,
	"VALVE_ROUTES_AIR":      9,
	"BP_IN_BELL":            10,
	"FOOT_PEDALS":           11,
}

func (x PitchChoiceType) Enum() *PitchChoiceType {
	p := new(PitchChoiceType)
	*p = x
	return p
}
func (x PitchChoiceType) String() string {
	return proto.EnumName(PitchChoiceType_name, int32(x))
}
func (x *PitchChoiceType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PitchChoiceType_value, data, "PitchChoiceType")
	if err != nil {
		return err
	}
	*x = PitchChoiceType(value)
	return nil
}
func (PitchChoiceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ItemdefInstrument_37235864453b6280, []int{0}
}

type SoundProductionType int32

const (
	SoundProductionType_PLUCKED_BY_BP              SoundProductionType = 0
	SoundProductionType_PLUCKED                    SoundProductionType = 1
	SoundProductionType_BOWED                      SoundProductionType = 2
	SoundProductionType_STRUCK_BY_BP               SoundProductionType = 3
	SoundProductionType_STRUCK                     SoundProductionType = 4
	SoundProductionType_VIBRATE_BP_AGAINST_OPENING SoundProductionType = 5
	SoundProductionType_BLOW_AGAINST_FIPPLE        SoundProductionType = 6
	SoundProductionType_BLOW_OVER_OPENING_SIDE     SoundProductionType = 7
	SoundProductionType_BLOW_OVER_OPENING_END      SoundProductionType = 8
	SoundProductionType_BLOW_OVER_SINGLE_REED      SoundProductionType = 9
	SoundProductionType_BLOW_OVER_DOUBLE_REED      SoundProductionType = 10
	SoundProductionType_BLOW_OVER_FREE_REED        SoundProductionType = 11
	SoundProductionType_STRUCK_TOGETHER            SoundProductionType = 12
	SoundProductionType_SHAKEN                     SoundProductionType = 13
	SoundProductionType_SCRAPED                    SoundProductionType = 14
	SoundProductionType_FRICTION                   SoundProductionType = 15
	SoundProductionType_RESONATOR                  SoundProductionType = 16
	SoundProductionType_BAG_OVER_REED              SoundProductionType = 17
	SoundProductionType_AIR_OVER_REED              SoundProductionType = 18
	SoundProductionType_AIR_OVER_FREE_REED         SoundProductionType = 19
	SoundProductionType_AIR_AGAINST_FIPPLE         SoundProductionType = 20
)

var SoundProductionType_name = map[int32]string{
	0:  "PLUCKED_BY_BP",
	1:  "PLUCKED",
	2:  "BOWED",
	3:  "STRUCK_BY_BP",
	4:  "STRUCK",
	5:  "VIBRATE_BP_AGAINST_OPENING",
	6:  "BLOW_AGAINST_FIPPLE",
	7:  "BLOW_OVER_OPENING_SIDE",
	8:  "BLOW_OVER_OPENING_END",
	9:  "BLOW_OVER_SINGLE_REED",
	10: "BLOW_OVER_DOUBLE_REED",
	11: "BLOW_OVER_FREE_REED",
	12: "STRUCK_TOGETHER",
	13: "SHAKEN",
	14: "SCRAPED",
	15: "FRICTION",
	16: "RESONATOR",
	17: "BAG_OVER_REED",
	18: "AIR_OVER_REED",
	19: "AIR_OVER_FREE_REED",
	20: "AIR_AGAINST_FIPPLE",
}
var SoundProductionType_value = map[string]int32{
	"PLUCKED_BY_BP":              0,
	"PLUCKED":                    1,
	"BOWED":                      2,
	"STRUCK_BY_BP":               3,
	"STRUCK":                     4,
	"VIBRATE_BP_AGAINST_OPENING": 5,
	"BLOW_AGAINST_FIPPLE":        6,
	"BLOW_OVER_OPENING_SIDE":     7,
	"BLOW_OVER_OPENING_END":      8,
	"BLOW_OVER_SINGLE_REED":      9,
	"BLOW_OVER_DOUBLE_REED":      10,
	"BLOW_OVER_FREE_REED":        11,
	"STRUCK_TOGETHER":            12,
	"SHAKEN":                     13,
	"SCRAPED":                    14,
	"FRICTION":                   15,
	"RESONATOR":                  16,
	"BAG_OVER_REED":              17,
	"AIR_OVER_REED":              18,
	"AIR_OVER_FREE_REED":         19,
	"AIR_AGAINST_FIPPLE":         20,
}

func (x SoundProductionType) Enum() *SoundProductionType {
	p := new(SoundProductionType)
	*p = x
	return p
}
func (x SoundProductionType) String() string {
	return proto.EnumName(SoundProductionType_name, int32(x))
}
func (x *SoundProductionType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SoundProductionType_value, data, "SoundProductionType")
	if err != nil {
		return err
	}
	*x = SoundProductionType(value)
	return nil
}
func (SoundProductionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ItemdefInstrument_37235864453b6280, []int{1}
}

type TuningType int32

const (
	TuningType_PEGS               TuningType = 0
	TuningType_ADJUSTABLE_BRIDGES TuningType = 1
	TuningType_CROOKS             TuningType = 2
	TuningType_TIGHTENING         TuningType = 3
	TuningType_LEVERS             TuningType = 4
)

var TuningType_name = map[int32]string{
	0: "PEGS",
	1: "ADJUSTABLE_BRIDGES",
	2: "CROOKS",
	3: "TIGHTENING",
	4: "LEVERS",
}
var TuningType_value = map[string]int32{
	"PEGS":               0,
	"ADJUSTABLE_BRIDGES": 1,
	"CROOKS":             2,
	"TIGHTENING":         3,
	"LEVERS":             4,
}

func (x TuningType) Enum() *TuningType {
	p := new(TuningType)
	*p = x
	return p
}
func (x TuningType) String() string {
	return proto.EnumName(TuningType_name, int32(x))
}
func (x *TuningType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TuningType_value, data, "TuningType")
	if err != nil {
		return err
	}
	*x = TuningType(value)
	return nil
}
func (TuningType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ItemdefInstrument_37235864453b6280, []int{2}
}

type InstrumentFlags struct {
	IndefinitePitch      *bool    `protobuf:"varint,1,opt,name=indefinite_pitch,json=indefinitePitch" json:"indefinite_pitch,omitempty"`
	PlacedAsBuilding     *bool    `protobuf:"varint,2,opt,name=placed_as_building,json=placedAsBuilding" json:"placed_as_building,omitempty"`
	MetalMat             *bool    `protobuf:"varint,3,opt,name=metal_mat,json=metalMat" json:"metal_mat,omitempty"`
	StoneMat             *bool    `protobuf:"varint,4,opt,name=stone_mat,json=stoneMat" json:"stone_mat,omitempty"`
	WoodMat              *bool    `protobuf:"varint,5,opt,name=wood_mat,json=woodMat" json:"wood_mat,omitempty"`
	GlassMat             *bool    `protobuf:"varint,6,opt,name=glass_mat,json=glassMat" json:"glass_mat,omitempty"`
	CeramicMat           *bool    `protobuf:"varint,7,opt,name=ceramic_mat,json=ceramicMat" json:"ceramic_mat,omitempty"`
	ShellMat             *bool    `protobuf:"varint,8,opt,name=shell_mat,json=shellMat" json:"shell_mat,omitempty"`
	BoneMat              *bool    `protobuf:"varint,9,opt,name=bone_mat,json=boneMat" json:"bone_mat,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InstrumentFlags) Reset()         { *m = InstrumentFlags{} }
func (m *InstrumentFlags) String() string { return proto.CompactTextString(m) }
func (*InstrumentFlags) ProtoMessage()    {}
func (*InstrumentFlags) Descriptor() ([]byte, []int) {
	return fileDescriptor_ItemdefInstrument_37235864453b6280, []int{0}
}
func (m *InstrumentFlags) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstrumentFlags.Unmarshal(m, b)
}
func (m *InstrumentFlags) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstrumentFlags.Marshal(b, m, deterministic)
}
func (dst *InstrumentFlags) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstrumentFlags.Merge(dst, src)
}
func (m *InstrumentFlags) XXX_Size() int {
	return xxx_messageInfo_InstrumentFlags.Size(m)
}
func (m *InstrumentFlags) XXX_DiscardUnknown() {
	xxx_messageInfo_InstrumentFlags.DiscardUnknown(m)
}

var xxx_messageInfo_InstrumentFlags proto.InternalMessageInfo

func (m *InstrumentFlags) GetIndefinitePitch() bool {
	if m != nil && m.IndefinitePitch != nil {
		return *m.IndefinitePitch
	}
	return false
}

func (m *InstrumentFlags) GetPlacedAsBuilding() bool {
	if m != nil && m.PlacedAsBuilding != nil {
		return *m.PlacedAsBuilding
	}
	return false
}

func (m *InstrumentFlags) GetMetalMat() bool {
	if m != nil && m.MetalMat != nil {
		return *m.MetalMat
	}
	return false
}

func (m *InstrumentFlags) GetStoneMat() bool {
	if m != nil && m.StoneMat != nil {
		return *m.StoneMat
	}
	return false
}

func (m *InstrumentFlags) GetWoodMat() bool {
	if m != nil && m.WoodMat != nil {
		return *m.WoodMat
	}
	return false
}

func (m *InstrumentFlags) GetGlassMat() bool {
	if m != nil && m.GlassMat != nil {
		return *m.GlassMat
	}
	return false
}

func (m *InstrumentFlags) GetCeramicMat() bool {
	if m != nil && m.CeramicMat != nil {
		return *m.CeramicMat
	}
	return false
}

func (m *InstrumentFlags) GetShellMat() bool {
	if m != nil && m.ShellMat != nil {
		return *m.ShellMat
	}
	return false
}

func (m *InstrumentFlags) GetBoneMat() bool {
	if m != nil && m.BoneMat != nil {
		return *m.BoneMat
	}
	return false
}

type InstrumentPiece struct {
	Type                 *string  `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Id                   *string  `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Name                 *string  `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	NamePlural           *string  `protobuf:"bytes,4,opt,name=name_plural,json=namePlural" json:"name_plural,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InstrumentPiece) Reset()         { *m = InstrumentPiece{} }
func (m *InstrumentPiece) String() string { return proto.CompactTextString(m) }
func (*InstrumentPiece) ProtoMessage()    {}
func (*InstrumentPiece) Descriptor() ([]byte, []int) {
	return fileDescriptor_ItemdefInstrument_37235864453b6280, []int{1}
}
func (m *InstrumentPiece) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstrumentPiece.Unmarshal(m, b)
}
func (m *InstrumentPiece) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstrumentPiece.Marshal(b, m, deterministic)
}
func (dst *InstrumentPiece) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstrumentPiece.Merge(dst, src)
}
func (m *InstrumentPiece) XXX_Size() int {
	return xxx_messageInfo_InstrumentPiece.Size(m)
}
func (m *InstrumentPiece) XXX_DiscardUnknown() {
	xxx_messageInfo_InstrumentPiece.DiscardUnknown(m)
}

var xxx_messageInfo_InstrumentPiece proto.InternalMessageInfo

func (m *InstrumentPiece) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *InstrumentPiece) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *InstrumentPiece) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *InstrumentPiece) GetNamePlural() string {
	if m != nil && m.NamePlural != nil {
		return *m.NamePlural
	}
	return ""
}

type InstrumentRegister struct {
	PitchRangeMin        *int32   `protobuf:"varint,1,opt,name=pitch_range_min,json=pitchRangeMin" json:"pitch_range_min,omitempty"`
	PitchRangeMax        *int32   `protobuf:"varint,2,opt,name=pitch_range_max,json=pitchRangeMax" json:"pitch_range_max,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InstrumentRegister) Reset()         { *m = InstrumentRegister{} }
func (m *InstrumentRegister) String() string { return proto.CompactTextString(m) }
func (*InstrumentRegister) ProtoMessage()    {}
func (*InstrumentRegister) Descriptor() ([]byte, []int) {
	return fileDescriptor_ItemdefInstrument_37235864453b6280, []int{2}
}
func (m *InstrumentRegister) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstrumentRegister.Unmarshal(m, b)
}
func (m *InstrumentRegister) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstrumentRegister.Marshal(b, m, deterministic)
}
func (dst *InstrumentRegister) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstrumentRegister.Merge(dst, src)
}
func (m *InstrumentRegister) XXX_Size() int {
	return xxx_messageInfo_InstrumentRegister.Size(m)
}
func (m *InstrumentRegister) XXX_DiscardUnknown() {
	xxx_messageInfo_InstrumentRegister.DiscardUnknown(m)
}

var xxx_messageInfo_InstrumentRegister proto.InternalMessageInfo

func (m *InstrumentRegister) GetPitchRangeMin() int32 {
	if m != nil && m.PitchRangeMin != nil {
		return *m.PitchRangeMin
	}
	return 0
}

func (m *InstrumentRegister) GetPitchRangeMax() int32 {
	if m != nil && m.PitchRangeMax != nil {
		return *m.PitchRangeMax
	}
	return 0
}

type InstrumentDef struct {
	Flags                *InstrumentFlags      `protobuf:"bytes,1,opt,name=flags" json:"flags,omitempty"`
	Size                 *int32                `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
	Value                *int32                `protobuf:"varint,3,opt,name=value" json:"value,omitempty"`
	MaterialSize         *int32                `protobuf:"varint,4,opt,name=material_size,json=materialSize" json:"material_size,omitempty"`
	Pieces               []*InstrumentPiece    `protobuf:"bytes,5,rep,name=pieces" json:"pieces,omitempty"`
	PitchRangeMin        *int32                `protobuf:"varint,6,opt,name=pitch_range_min,json=pitchRangeMin" json:"pitch_range_min,omitempty"`
	PitchRangeMax        *int32                `protobuf:"varint,7,opt,name=pitch_range_max,json=pitchRangeMax" json:"pitch_range_max,omitempty"`
	VolumeMbMin          *int32                `protobuf:"varint,8,opt,name=volume_mb_min,json=volumeMbMin" json:"volume_mb_min,omitempty"`
	VolumeMbMax          *int32                `protobuf:"varint,9,opt,name=volume_mb_max,json=volumeMbMax" json:"volume_mb_max,omitempty"`
	SoundProduction      []SoundProductionType `protobuf:"varint,10,rep,name=sound_production,json=soundProduction,enum=ItemdefInstrument.SoundProductionType" json:"sound_production,omitempty"`
	SoundProductionParm1 []string              `protobuf:"bytes,11,rep,name=sound_production_parm1,json=soundProductionParm1" json:"sound_production_parm1,omitempty"`
	SoundProductionParm2 []string              `protobuf:"bytes,12,rep,name=sound_production_parm2,json=soundProductionParm2" json:"sound_production_parm2,omitempty"`
	PitchChoice          []PitchChoiceType     `protobuf:"varint,13,rep,name=pitch_choice,json=pitchChoice,enum=ItemdefInstrument.PitchChoiceType" json:"pitch_choice,omitempty"`
	PitchChoiceParm1     []string              `protobuf:"bytes,14,rep,name=pitch_choice_parm1,json=pitchChoiceParm1" json:"pitch_choice_parm1,omitempty"`
	PitchChoiceParm2     []string              `protobuf:"bytes,15,rep,name=pitch_choice_parm2,json=pitchChoiceParm2" json:"pitch_choice_parm2,omitempty"`
	Tuning               []TuningType          `protobuf:"varint,16,rep,name=tuning,enum=ItemdefInstrument.TuningType" json:"tuning,omitempty"`
	TuningParm           []string              `protobuf:"bytes,17,rep,name=tuning_parm,json=tuningParm" json:"tuning_parm,omitempty"`
	Registers            []*InstrumentRegister `protobuf:"bytes,18,rep,name=registers" json:"registers,omitempty"`
	Description          *string               `protobuf:"bytes,19,opt,name=description" json:"description,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *InstrumentDef) Reset()         { *m = InstrumentDef{} }
func (m *InstrumentDef) String() string { return proto.CompactTextString(m) }
func (*InstrumentDef) ProtoMessage()    {}
func (*InstrumentDef) Descriptor() ([]byte, []int) {
	return fileDescriptor_ItemdefInstrument_37235864453b6280, []int{3}
}
func (m *InstrumentDef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstrumentDef.Unmarshal(m, b)
}
func (m *InstrumentDef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstrumentDef.Marshal(b, m, deterministic)
}
func (dst *InstrumentDef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstrumentDef.Merge(dst, src)
}
func (m *InstrumentDef) XXX_Size() int {
	return xxx_messageInfo_InstrumentDef.Size(m)
}
func (m *InstrumentDef) XXX_DiscardUnknown() {
	xxx_messageInfo_InstrumentDef.DiscardUnknown(m)
}

var xxx_messageInfo_InstrumentDef proto.InternalMessageInfo

func (m *InstrumentDef) GetFlags() *InstrumentFlags {
	if m != nil {
		return m.Flags
	}
	return nil
}

func (m *InstrumentDef) GetSize() int32 {
	if m != nil && m.Size != nil {
		return *m.Size
	}
	return 0
}

func (m *InstrumentDef) GetValue() int32 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

func (m *InstrumentDef) GetMaterialSize() int32 {
	if m != nil && m.MaterialSize != nil {
		return *m.MaterialSize
	}
	return 0
}

func (m *InstrumentDef) GetPieces() []*InstrumentPiece {
	if m != nil {
		return m.Pieces
	}
	return nil
}

func (m *InstrumentDef) GetPitchRangeMin() int32 {
	if m != nil && m.PitchRangeMin != nil {
		return *m.PitchRangeMin
	}
	return 0
}

func (m *InstrumentDef) GetPitchRangeMax() int32 {
	if m != nil && m.PitchRangeMax != nil {
		return *m.PitchRangeMax
	}
	return 0
}

func (m *InstrumentDef) GetVolumeMbMin() int32 {
	if m != nil && m.VolumeMbMin != nil {
		return *m.VolumeMbMin
	}
	return 0
}

func (m *InstrumentDef) GetVolumeMbMax() int32 {
	if m != nil && m.VolumeMbMax != nil {
		return *m.VolumeMbMax
	}
	return 0
}

func (m *InstrumentDef) GetSoundProduction() []SoundProductionType {
	if m != nil {
		return m.SoundProduction
	}
	return nil
}

func (m *InstrumentDef) GetSoundProductionParm1() []string {
	if m != nil {
		return m.SoundProductionParm1
	}
	return nil
}

func (m *InstrumentDef) GetSoundProductionParm2() []string {
	if m != nil {
		return m.SoundProductionParm2
	}
	return nil
}

func (m *InstrumentDef) GetPitchChoice() []PitchChoiceType {
	if m != nil {
		return m.PitchChoice
	}
	return nil
}

func (m *InstrumentDef) GetPitchChoiceParm1() []string {
	if m != nil {
		return m.PitchChoiceParm1
	}
	return nil
}

func (m *InstrumentDef) GetPitchChoiceParm2() []string {
	if m != nil {
		return m.PitchChoiceParm2
	}
	return nil
}

func (m *InstrumentDef) GetTuning() []TuningType {
	if m != nil {
		return m.Tuning
	}
	return nil
}

func (m *InstrumentDef) GetTuningParm() []string {
	if m != nil {
		return m.TuningParm
	}
	return nil
}

func (m *InstrumentDef) GetRegisters() []*InstrumentRegister {
	if m != nil {
		return m.Registers
	}
	return nil
}

func (m *InstrumentDef) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func init() {
	proto.RegisterType((*InstrumentFlags)(nil), "ItemdefInstrument.InstrumentFlags")
	proto.RegisterType((*InstrumentPiece)(nil), "ItemdefInstrument.InstrumentPiece")
	proto.RegisterType((*InstrumentRegister)(nil), "ItemdefInstrument.InstrumentRegister")
	proto.RegisterType((*InstrumentDef)(nil), "ItemdefInstrument.InstrumentDef")
	proto.RegisterEnum("ItemdefInstrument.PitchChoiceType", PitchChoiceType_name, PitchChoiceType_value)
	proto.RegisterEnum("ItemdefInstrument.SoundProductionType", SoundProductionType_name, SoundProductionType_value)
	proto.RegisterEnum("ItemdefInstrument.TuningType", TuningType_name, TuningType_value)
}

func init() {
	proto.RegisterFile("ItemdefInstrument.proto", fileDescriptor_ItemdefInstrument_37235864453b6280)
}

var fileDescriptor_ItemdefInstrument_37235864453b6280 = []byte{
	// 1094 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0x5d, 0x8f, 0xda, 0x46,
	0x14, 0xcd, 0xf2, 0xb5, 0xf8, 0xb2, 0xc0, 0xec, 0xec, 0x26, 0x21, 0xa9, 0xda, 0xae, 0xa8, 0x1a,
	0xa5, 0x51, 0x15, 0xa9, 0xa8, 0x95, 0xaa, 0xbe, 0xd9, 0x78, 0x00, 0x17, 0xb0, 0xdd, 0xb1, 0x21,
	0xda, 0xa7, 0x91, 0x17, 0x66, 0x37, 0xae, 0xc0, 0x20, 0x6c, 0xd2, 0x4d, 0xff, 0x43, 0x7f, 0x4e,
	0x5f, 0xfb, 0xbf, 0xfa, 0x56, 0xcd, 0xb5, 0xf9, 0xda, 0x25, 0x6d, 0x9f, 0x18, 0xce, 0x39, 0xf7,
	0xde, 0x73, 0xef, 0xdc, 0x31, 0x3c, 0xb7, 0x12, 0x39, 0x9f, 0xca, 0x5b, 0x2b, 0x8a, 0x93, 0xd5,
	0x7a, 0x2e, 0xa3, 0xe4, 0xed, 0x72, 0xb5, 0x48, 0x16, 0xf4, 0xfc, 0x11, 0xd1, 0xfc, 0x33, 0x07,
	0xf5, 0xdd, 0xdf, 0xce, 0x2c, 0xb8, 0x8b, 0xe9, 0x37, 0x40, 0xc2, 0x68, 0x2a, 0x6f, 0xc3, 0x28,
	0x4c, 0xa4, 0x58, 0x86, 0xc9, 0xe4, 0x7d, 0xe3, 0xe4, 0xea, 0xe4, 0x75, 0x99, 0xd7, 0x77, 0xb8,
	0xab, 0x60, 0xfa, 0x2d, 0xd0, 0xe5, 0x2c, 0x98, 0xc8, 0xa9, 0x08, 0x62, 0x71, 0xb3, 0x0e, 0x67,
	0xd3, 0x30, 0xba, 0x6b, 0xe4, 0x50, 0x4c, 0x52, 0x46, 0x8f, 0x8d, 0x0c, 0xa7, 0x9f, 0x81, 0x36,
	0x97, 0x49, 0x30, 0x13, 0xf3, 0x20, 0x69, 0xe4, 0x51, 0x54, 0x46, 0x60, 0x18, 0x24, 0x8a, 0x8c,
	0x93, 0x45, 0x24, 0x91, 0x2c, 0xa4, 0x24, 0x02, 0x8a, 0x7c, 0x01, 0xe5, 0xdf, 0x16, 0x8b, 0x29,
	0x72, 0x45, 0xe4, 0x4e, 0xd5, 0xff, 0x2c, 0xee, 0x6e, 0x16, 0xc4, 0x31, 0x72, 0xa5, 0x34, 0x0e,
	0x01, 0x45, 0x7e, 0x09, 0x95, 0x89, 0x5c, 0x05, 0xf3, 0x70, 0x82, 0xf4, 0x29, 0xd2, 0x90, 0x41,
	0x9b, 0xaa, 0xef, 0xe5, 0x2c, 0xb5, 0x54, 0xce, 0xaa, 0x2a, 0x20, 0xab, 0x7a, 0xb3, 0x71, 0xa4,
	0xa5, 0x55, 0x6f, 0x52, 0x43, 0xcd, 0x5f, 0xf7, 0xc7, 0xe6, 0x86, 0x72, 0x22, 0x29, 0x85, 0x42,
	0xf2, 0x71, 0x29, 0x71, 0x54, 0x1a, 0xc7, 0x33, 0xad, 0x41, 0x2e, 0x9c, 0xe2, 0x3c, 0x34, 0x9e,
	0x0b, 0xa7, 0x4a, 0x13, 0x05, 0x73, 0x89, 0xcd, 0x6b, 0x1c, 0xcf, 0xca, 0xa3, 0xfa, 0x15, 0xcb,
	0xd9, 0x7a, 0x15, 0xcc, 0xb0, 0x75, 0x8d, 0x83, 0x82, 0x5c, 0x44, 0x9a, 0x53, 0xa0, 0xbb, 0x5a,
	0x5c, 0xde, 0x85, 0x71, 0x22, 0x57, 0xf4, 0x15, 0xd4, 0xf1, 0x6a, 0xc4, 0x2a, 0x88, 0xee, 0xa4,
	0x98, 0x87, 0x11, 0x56, 0x2e, 0xf2, 0x2a, 0xc2, 0x5c, 0xa1, 0xc3, 0x30, 0x7a, 0xa4, 0x0b, 0xee,
	0xd1, 0xcf, 0xa1, 0x2e, 0xb8, 0x6f, 0xfe, 0x71, 0x0a, 0xd5, 0x5d, 0x19, 0x53, 0xde, 0xd2, 0x1f,
	0xa1, 0x78, 0xab, 0x16, 0x02, 0xf3, 0x56, 0x5a, 0xcd, 0xb7, 0x8f, 0xf7, 0xea, 0xc1, 0xea, 0xf0,
	0x34, 0x40, 0xb5, 0x19, 0x87, 0xbf, 0xcb, 0xac, 0x10, 0x9e, 0xe9, 0x25, 0x14, 0x3f, 0x04, 0xb3,
	0x75, 0xda, 0x7b, 0x91, 0xa7, 0x7f, 0xe8, 0x57, 0x50, 0x9d, 0x07, 0x89, 0x5c, 0x85, 0xc1, 0x4c,
	0x60, 0x48, 0x01, 0xd9, 0xb3, 0x0d, 0xe8, 0xa9, 0xd0, 0x9f, 0xa0, 0xb4, 0x54, 0x23, 0x8e, 0x1b,
	0xc5, 0xab, 0xfc, 0x7f, 0x3a, 0xc1, 0xdb, 0xe0, 0x59, 0xc4, 0xb1, 0x31, 0x95, 0xfe, 0xe7, 0x98,
	0x4e, 0x8f, 0x8c, 0x89, 0x36, 0xa1, 0xfa, 0x61, 0x31, 0x5b, 0xcf, 0xa5, 0x98, 0xdf, 0x60, 0xb6,
	0x32, 0xaa, 0x2a, 0x29, 0x38, 0xbc, 0x51, 0xb9, 0x0e, 0x35, 0xc1, 0x3d, 0x2e, 0xcf, 0xbe, 0x26,
	0xb8, 0xa7, 0xbf, 0x00, 0x89, 0x17, 0xeb, 0x68, 0x2a, 0x96, 0xab, 0xc5, 0x74, 0x3d, 0x49, 0xc2,
	0x45, 0xd4, 0x80, 0xab, 0xfc, 0xeb, 0x5a, 0xeb, 0xd5, 0x91, 0xee, 0x3c, 0x25, 0x75, 0xb7, 0x4a,
	0xff, 0xe3, 0x52, 0xf2, 0x7a, 0x7c, 0x08, 0xd2, 0xef, 0xe1, 0xd9, 0xc3, 0x94, 0x62, 0x19, 0xac,
	0xe6, 0xdf, 0x35, 0x2a, 0x57, 0xf9, 0xd7, 0x1a, 0xbf, 0x7c, 0x10, 0xe0, 0x2a, 0xee, 0x93, 0x51,
	0xad, 0xc6, 0xd9, 0x27, 0xa3, 0x5a, 0x94, 0xc1, 0x59, 0x3a, 0xae, 0xc9, 0xfb, 0x45, 0x38, 0x91,
	0x8d, 0x2a, 0x5a, 0x3f, 0x76, 0x31, 0xf8, 0xa1, 0x68, 0xa3, 0x0a, 0x6d, 0x57, 0x96, 0x3b, 0x00,
	0xbf, 0x1f, 0x7b, 0x69, 0x32, 0xbb, 0x35, 0x2c, 0x4c, 0xf6, 0x84, 0xa9, 0xd5, 0x63, 0xea, 0x56,
	0xa3, 0x7e, 0x54, 0xdd, 0xa2, 0x3f, 0x40, 0x29, 0x59, 0x47, 0xea, 0x7b, 0x44, 0xd0, 0xdc, 0xe7,
	0x47, 0xcc, 0xf9, 0x28, 0x40, 0x5f, 0x99, 0x58, 0x3d, 0xc7, 0xf4, 0x84, 0xe9, 0x1b, 0xe7, 0x98,
	0x1d, 0x52, 0x48, 0x25, 0xa6, 0x6d, 0xd0, 0x56, 0xd9, 0x23, 0x8c, 0x1b, 0x14, 0x17, 0xf2, 0xeb,
	0x7f, 0x5d, 0xc8, 0xcd, 0x93, 0xe5, 0xbb, 0x38, 0x7a, 0x05, 0x95, 0xa9, 0x8c, 0x27, 0xab, 0x70,
	0x89, 0x37, 0x7f, 0x81, 0x8f, 0x7e, 0x1f, 0x7a, 0xf3, 0xf7, 0x09, 0xd4, 0x1f, 0xcc, 0x8e, 0x3e,
	0x85, 0xf3, 0x21, 0x1b, 0x1a, 0x5c, 0xb7, 0x99, 0x70, 0x1d, 0xcf, 0xf2, 0x2d, 0xc7, 0x26, 0x4f,
	0x28, 0x85, 0x9a, 0x37, 0x32, 0x5c, 0x9d, 0xfb, 0xa2, 0xdd, 0x73, 0xac, 0x36, 0x23, 0x27, 0xf4,
	0x0c, 0xca, 0x7d, 0x76, 0x6d, 0x38, 0x3a, 0x37, 0x49, 0x8e, 0x9e, 0x43, 0xd5, 0xf3, 0x1d, 0xd7,
	0xb5, 0xec, 0xae, 0xe8, 0x70, 0xe6, 0x93, 0x3c, 0x7d, 0x01, 0x4f, 0xb7, 0x90, 0xde, 0xd5, 0x2d,
	0xdb, 0xf3, 0x85, 0xe1, 0x98, 0xd7, 0xa4, 0x70, 0xa0, 0xee, 0x39, 0x03, 0x46, 0x8a, 0xaa, 0xf2,
	0x01, 0x24, 0xfa, 0xec, 0x9a, 0x94, 0xa8, 0x06, 0x45, 0x6f, 0x60, 0x99, 0x8c, 0x9c, 0xd2, 0x0b,
	0xa8, 0xf7, 0x74, 0x3e, 0x74, 0x6c, 0xab, 0x2d, 0x3c, 0xc6, 0x2d, 0xe6, 0x91, 0x32, 0xbd, 0x04,
	0x32, 0xd6, 0x07, 0x63, 0x26, 0xb8, 0x33, 0xf2, 0x99, 0x27, 0x74, 0x8b, 0x13, 0x8d, 0xd6, 0x00,
	0x0c, 0x57, 0x58, 0xb6, 0x30, 0xd8, 0x60, 0x40, 0x80, 0xd6, 0xa1, 0xd2, 0x71, 0x1c, 0x5f, 0xb8,
	0xcc, 0xd4, 0x07, 0x1e, 0xa9, 0xbc, 0xf9, 0x2b, 0x0f, 0x17, 0x47, 0x56, 0x5e, 0x19, 0x73, 0x07,
	0xa3, 0x76, 0x9f, 0x99, 0xc2, 0xb8, 0x16, 0x86, 0x4b, 0x9e, 0xd0, 0x0a, 0x9c, 0x66, 0x10, 0x39,
	0x51, 0x76, 0x0c, 0xe7, 0x1d, 0x53, 0x1d, 0x13, 0x38, 0xf3, 0x7c, 0x3e, 0x6a, 0xf7, 0x33, 0x65,
	0x9e, 0x02, 0x94, 0x52, 0x84, 0x14, 0xe8, 0x17, 0xf0, 0x72, 0x6c, 0x19, 0x5c, 0xf7, 0x99, 0x30,
	0xdc, 0x6d, 0xfb, 0x8e, 0xcb, 0x6c, 0xcb, 0xee, 0x92, 0x22, 0x7d, 0x0e, 0x17, 0xc6, 0xc0, 0x79,
	0xb7, 0x65, 0x3a, 0x96, 0xeb, 0x0e, 0x18, 0x29, 0xd1, 0x97, 0xf0, 0x0c, 0x09, 0x67, 0xcc, 0xf8,
	0x46, 0x2f, 0xbc, 0x74, 0x02, 0x2f, 0xe0, 0xe9, 0x63, 0x8e, 0xd9, 0x26, 0x29, 0x1f, 0x52, 0x9e,
	0x65, 0x77, 0x07, 0x4c, 0x70, 0xc6, 0x4c, 0xa2, 0x1d, 0x52, 0xa6, 0x33, 0x32, 0x36, 0x14, 0x6c,
	0x5d, 0x20, 0xd5, 0xe1, 0x2c, 0x23, 0x2a, 0x6a, 0xd6, 0x59, 0x73, 0xbe, 0xd3, 0x65, 0x7e, 0x8f,
	0x71, 0x72, 0x86, 0xfd, 0xf5, 0xf4, 0x3e, 0xb3, 0x49, 0x55, 0x4d, 0xc5, 0x6b, 0x73, 0xdd, 0x65,
	0x26, 0xa9, 0xa9, 0x55, 0xe8, 0x70, 0xab, 0x8d, 0xcb, 0x52, 0xa7, 0x55, 0xd0, 0x38, 0xf3, 0x1c,
	0x5b, 0xf7, 0x1d, 0x4e, 0x88, 0x1a, 0xa9, 0xa1, 0x77, 0xd3, 0x12, 0x98, 0xfd, 0x5c, 0x41, 0xba,
	0xc5, 0xf7, 0x20, 0x4a, 0x9f, 0x01, 0xdd, 0x42, 0x3b, 0x23, 0x17, 0x1b, 0xfc, 0xc1, 0x98, 0x2e,
	0xdf, 0x8c, 0x01, 0x76, 0x4f, 0x8b, 0x96, 0xa1, 0xe0, 0xb2, 0xae, 0x47, 0x9e, 0xa0, 0xde, 0xfc,
	0x79, 0xe4, 0xf9, 0xba, 0x6a, 0xd3, 0xe0, 0x96, 0xd9, 0x65, 0x1e, 0x39, 0x51, 0xde, 0xdb, 0xdc,
	0x71, 0xfa, 0x1e, 0xc9, 0xa9, 0xed, 0xf0, 0xad, 0x6e, 0xcf, 0x4f, 0xef, 0x02, 0xef, 0x6d, 0xc0,
	0xc6, 0x8c, 0x7b, 0xa4, 0x60, 0xe4, 0x7a, 0xf9, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x2f, 0x4c,
	0xb6, 0x50, 0xdf, 0x08, 0x00, 0x00,
}
