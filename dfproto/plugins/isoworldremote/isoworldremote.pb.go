// Code generated by protoc-gen-go. DO NOT EDIT.
// source: isoworldremote.proto

package isoworldremote

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BasicMaterial int32

const (
	BasicMaterial_AIR       BasicMaterial = 0
	BasicMaterial_OTHER     BasicMaterial = 1
	BasicMaterial_INORGANIC BasicMaterial = 2
	BasicMaterial_LIQUID    BasicMaterial = 3
	BasicMaterial_PLANT     BasicMaterial = 4
	BasicMaterial_WOOD      BasicMaterial = 5
)

var BasicMaterial_name = map[int32]string{
	0: "AIR",
	1: "OTHER",
	2: "INORGANIC",
	3: "LIQUID",
	4: "PLANT",
	5: "WOOD",
}
var BasicMaterial_value = map[string]int32{
	"AIR":       0,
	"OTHER":     1,
	"INORGANIC": 2,
	"LIQUID":    3,
	"PLANT":     4,
	"WOOD":      5,
}

func (x BasicMaterial) Enum() *BasicMaterial {
	p := new(BasicMaterial)
	*p = x
	return p
}
func (x BasicMaterial) String() string {
	return proto.EnumName(BasicMaterial_name, int32(x))
}
func (x *BasicMaterial) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BasicMaterial_value, data, "BasicMaterial")
	if err != nil {
		return err
	}
	*x = BasicMaterial(value)
	return nil
}
func (BasicMaterial) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_isoworldremote_e2cb50d09294e39c, []int{0}
}

type LiquidType int32

const (
	LiquidType_ICE   LiquidType = 0
	LiquidType_WATER LiquidType = 1
	LiquidType_MAGMA LiquidType = 2
)

var LiquidType_name = map[int32]string{
	0: "ICE",
	1: "WATER",
	2: "MAGMA",
}
var LiquidType_value = map[string]int32{
	"ICE":   0,
	"WATER": 1,
	"MAGMA": 2,
}

func (x LiquidType) Enum() *LiquidType {
	p := new(LiquidType)
	*p = x
	return p
}
func (x LiquidType) String() string {
	return proto.EnumName(LiquidType_name, int32(x))
}
func (x *LiquidType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(LiquidType_value, data, "LiquidType")
	if err != nil {
		return err
	}
	*x = LiquidType(value)
	return nil
}
func (LiquidType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_isoworldremote_e2cb50d09294e39c, []int{1}
}

type BasicShape int32

const (
	BasicShape_NONE      BasicShape = 0
	BasicShape_OPEN      BasicShape = 1
	BasicShape_WALL      BasicShape = 3
	BasicShape_FLOOR     BasicShape = 4
	BasicShape_RAMP_UP   BasicShape = 5
	BasicShape_RAMP_DOWN BasicShape = 6
)

var BasicShape_name = map[int32]string{
	0: "NONE",
	1: "OPEN",
	3: "WALL",
	4: "FLOOR",
	5: "RAMP_UP",
	6: "RAMP_DOWN",
}
var BasicShape_value = map[string]int32{
	"NONE":      0,
	"OPEN":      1,
	"WALL":      3,
	"FLOOR":     4,
	"RAMP_UP":   5,
	"RAMP_DOWN": 6,
}

func (x BasicShape) Enum() *BasicShape {
	p := new(BasicShape)
	*p = x
	return p
}
func (x BasicShape) String() string {
	return proto.EnumName(BasicShape_name, int32(x))
}
func (x *BasicShape) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BasicShape_value, data, "BasicShape")
	if err != nil {
		return err
	}
	*x = BasicShape(value)
	return nil
}
func (BasicShape) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_isoworldremote_e2cb50d09294e39c, []int{2}
}

type ColorDefinition struct {
	Red                  *int32   `protobuf:"varint,1,req,name=red" json:"red,omitempty"`
	Green                *int32   `protobuf:"varint,2,req,name=green" json:"green,omitempty"`
	Blue                 *int32   `protobuf:"varint,3,req,name=blue" json:"blue,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ColorDefinition) Reset()         { *m = ColorDefinition{} }
func (m *ColorDefinition) String() string { return proto.CompactTextString(m) }
func (*ColorDefinition) ProtoMessage()    {}
func (*ColorDefinition) Descriptor() ([]byte, []int) {
	return fileDescriptor_isoworldremote_e2cb50d09294e39c, []int{0}
}
func (m *ColorDefinition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ColorDefinition.Unmarshal(m, b)
}
func (m *ColorDefinition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ColorDefinition.Marshal(b, m, deterministic)
}
func (dst *ColorDefinition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ColorDefinition.Merge(dst, src)
}
func (m *ColorDefinition) XXX_Size() int {
	return xxx_messageInfo_ColorDefinition.Size(m)
}
func (m *ColorDefinition) XXX_DiscardUnknown() {
	xxx_messageInfo_ColorDefinition.DiscardUnknown(m)
}

var xxx_messageInfo_ColorDefinition proto.InternalMessageInfo

func (m *ColorDefinition) GetRed() int32 {
	if m != nil && m.Red != nil {
		return *m.Red
	}
	return 0
}

func (m *ColorDefinition) GetGreen() int32 {
	if m != nil && m.Green != nil {
		return *m.Green
	}
	return 0
}

func (m *ColorDefinition) GetBlue() int32 {
	if m != nil && m.Blue != nil {
		return *m.Blue
	}
	return 0
}

type EmbarkTileLayer struct {
	MatTypeTable         []BasicMaterial    `protobuf:"varint,4,rep,packed,name=mat_type_table,json=matTypeTable,enum=isoworldremote.BasicMaterial" json:"mat_type_table,omitempty"`
	MatSubtypeTable      []int32            `protobuf:"varint,5,rep,packed,name=mat_subtype_table,json=matSubtypeTable" json:"mat_subtype_table,omitempty"`
	TileShapeTable       []BasicShape       `protobuf:"varint,6,rep,packed,name=tile_shape_table,json=tileShapeTable,enum=isoworldremote.BasicShape" json:"tile_shape_table,omitempty"`
	TileColorTable       []*ColorDefinition `protobuf:"bytes,7,rep,name=tile_color_table,json=tileColorTable" json:"tile_color_table,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *EmbarkTileLayer) Reset()         { *m = EmbarkTileLayer{} }
func (m *EmbarkTileLayer) String() string { return proto.CompactTextString(m) }
func (*EmbarkTileLayer) ProtoMessage()    {}
func (*EmbarkTileLayer) Descriptor() ([]byte, []int) {
	return fileDescriptor_isoworldremote_e2cb50d09294e39c, []int{1}
}
func (m *EmbarkTileLayer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EmbarkTileLayer.Unmarshal(m, b)
}
func (m *EmbarkTileLayer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EmbarkTileLayer.Marshal(b, m, deterministic)
}
func (dst *EmbarkTileLayer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmbarkTileLayer.Merge(dst, src)
}
func (m *EmbarkTileLayer) XXX_Size() int {
	return xxx_messageInfo_EmbarkTileLayer.Size(m)
}
func (m *EmbarkTileLayer) XXX_DiscardUnknown() {
	xxx_messageInfo_EmbarkTileLayer.DiscardUnknown(m)
}

var xxx_messageInfo_EmbarkTileLayer proto.InternalMessageInfo

func (m *EmbarkTileLayer) GetMatTypeTable() []BasicMaterial {
	if m != nil {
		return m.MatTypeTable
	}
	return nil
}

func (m *EmbarkTileLayer) GetMatSubtypeTable() []int32 {
	if m != nil {
		return m.MatSubtypeTable
	}
	return nil
}

func (m *EmbarkTileLayer) GetTileShapeTable() []BasicShape {
	if m != nil {
		return m.TileShapeTable
	}
	return nil
}

func (m *EmbarkTileLayer) GetTileColorTable() []*ColorDefinition {
	if m != nil {
		return m.TileColorTable
	}
	return nil
}

type EmbarkTile struct {
	WorldX               *int32             `protobuf:"varint,1,req,name=world_x,json=worldX" json:"world_x,omitempty"`
	WorldY               *int32             `protobuf:"varint,2,req,name=world_y,json=worldY" json:"world_y,omitempty"`
	WorldZ               *int32             `protobuf:"zigzag32,3,req,name=world_z,json=worldZ" json:"world_z,omitempty"`
	TileLayer            []*EmbarkTileLayer `protobuf:"bytes,4,rep,name=tile_layer,json=tileLayer" json:"tile_layer,omitempty"`
	CurrentYear          *int32             `protobuf:"varint,5,opt,name=current_year,json=currentYear" json:"current_year,omitempty"`
	CurrentSeason        *int32             `protobuf:"varint,6,opt,name=current_season,json=currentSeason" json:"current_season,omitempty"`
	IsValid              *bool              `protobuf:"varint,7,opt,name=is_valid,json=isValid" json:"is_valid,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *EmbarkTile) Reset()         { *m = EmbarkTile{} }
func (m *EmbarkTile) String() string { return proto.CompactTextString(m) }
func (*EmbarkTile) ProtoMessage()    {}
func (*EmbarkTile) Descriptor() ([]byte, []int) {
	return fileDescriptor_isoworldremote_e2cb50d09294e39c, []int{2}
}
func (m *EmbarkTile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EmbarkTile.Unmarshal(m, b)
}
func (m *EmbarkTile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EmbarkTile.Marshal(b, m, deterministic)
}
func (dst *EmbarkTile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmbarkTile.Merge(dst, src)
}
func (m *EmbarkTile) XXX_Size() int {
	return xxx_messageInfo_EmbarkTile.Size(m)
}
func (m *EmbarkTile) XXX_DiscardUnknown() {
	xxx_messageInfo_EmbarkTile.DiscardUnknown(m)
}

var xxx_messageInfo_EmbarkTile proto.InternalMessageInfo

func (m *EmbarkTile) GetWorldX() int32 {
	if m != nil && m.WorldX != nil {
		return *m.WorldX
	}
	return 0
}

func (m *EmbarkTile) GetWorldY() int32 {
	if m != nil && m.WorldY != nil {
		return *m.WorldY
	}
	return 0
}

func (m *EmbarkTile) GetWorldZ() int32 {
	if m != nil && m.WorldZ != nil {
		return *m.WorldZ
	}
	return 0
}

func (m *EmbarkTile) GetTileLayer() []*EmbarkTileLayer {
	if m != nil {
		return m.TileLayer
	}
	return nil
}

func (m *EmbarkTile) GetCurrentYear() int32 {
	if m != nil && m.CurrentYear != nil {
		return *m.CurrentYear
	}
	return 0
}

func (m *EmbarkTile) GetCurrentSeason() int32 {
	if m != nil && m.CurrentSeason != nil {
		return *m.CurrentSeason
	}
	return 0
}

func (m *EmbarkTile) GetIsValid() bool {
	if m != nil && m.IsValid != nil {
		return *m.IsValid
	}
	return false
}

// RPC GetEmbarkTile : TileRequest -> EmbarkTile
type TileRequest struct {
	WantX                *int32   `protobuf:"varint,1,opt,name=want_x,json=wantX" json:"want_x,omitempty"`
	WantY                *int32   `protobuf:"varint,2,opt,name=want_y,json=wantY" json:"want_y,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TileRequest) Reset()         { *m = TileRequest{} }
func (m *TileRequest) String() string { return proto.CompactTextString(m) }
func (*TileRequest) ProtoMessage()    {}
func (*TileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_isoworldremote_e2cb50d09294e39c, []int{3}
}
func (m *TileRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TileRequest.Unmarshal(m, b)
}
func (m *TileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TileRequest.Marshal(b, m, deterministic)
}
func (dst *TileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TileRequest.Merge(dst, src)
}
func (m *TileRequest) XXX_Size() int {
	return xxx_messageInfo_TileRequest.Size(m)
}
func (m *TileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TileRequest proto.InternalMessageInfo

func (m *TileRequest) GetWantX() int32 {
	if m != nil && m.WantX != nil {
		return *m.WantX
	}
	return 0
}

func (m *TileRequest) GetWantY() int32 {
	if m != nil && m.WantY != nil {
		return *m.WantY
	}
	return 0
}

type MapRequest struct {
	SaveFolder           *string  `protobuf:"bytes,1,opt,name=save_folder,json=saveFolder" json:"save_folder,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MapRequest) Reset()         { *m = MapRequest{} }
func (m *MapRequest) String() string { return proto.CompactTextString(m) }
func (*MapRequest) ProtoMessage()    {}
func (*MapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_isoworldremote_e2cb50d09294e39c, []int{4}
}
func (m *MapRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MapRequest.Unmarshal(m, b)
}
func (m *MapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MapRequest.Marshal(b, m, deterministic)
}
func (dst *MapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapRequest.Merge(dst, src)
}
func (m *MapRequest) XXX_Size() int {
	return xxx_messageInfo_MapRequest.Size(m)
}
func (m *MapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MapRequest proto.InternalMessageInfo

func (m *MapRequest) GetSaveFolder() string {
	if m != nil && m.SaveFolder != nil {
		return *m.SaveFolder
	}
	return ""
}

// RPC GetEmbarkInfo : MapRequest -> MapReply
type MapReply struct {
	Available            *bool    `protobuf:"varint,1,req,name=available" json:"available,omitempty"`
	RegionX              *int32   `protobuf:"varint,2,opt,name=region_x,json=regionX" json:"region_x,omitempty"`
	RegionY              *int32   `protobuf:"varint,3,opt,name=region_y,json=regionY" json:"region_y,omitempty"`
	RegionSizeX          *int32   `protobuf:"varint,4,opt,name=region_size_x,json=regionSizeX" json:"region_size_x,omitempty"`
	RegionSizeY          *int32   `protobuf:"varint,5,opt,name=region_size_y,json=regionSizeY" json:"region_size_y,omitempty"`
	CurrentYear          *int32   `protobuf:"varint,6,opt,name=current_year,json=currentYear" json:"current_year,omitempty"`
	CurrentSeason        *int32   `protobuf:"varint,7,opt,name=current_season,json=currentSeason" json:"current_season,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MapReply) Reset()         { *m = MapReply{} }
func (m *MapReply) String() string { return proto.CompactTextString(m) }
func (*MapReply) ProtoMessage()    {}
func (*MapReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_isoworldremote_e2cb50d09294e39c, []int{5}
}
func (m *MapReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MapReply.Unmarshal(m, b)
}
func (m *MapReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MapReply.Marshal(b, m, deterministic)
}
func (dst *MapReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapReply.Merge(dst, src)
}
func (m *MapReply) XXX_Size() int {
	return xxx_messageInfo_MapReply.Size(m)
}
func (m *MapReply) XXX_DiscardUnknown() {
	xxx_messageInfo_MapReply.DiscardUnknown(m)
}

var xxx_messageInfo_MapReply proto.InternalMessageInfo

func (m *MapReply) GetAvailable() bool {
	if m != nil && m.Available != nil {
		return *m.Available
	}
	return false
}

func (m *MapReply) GetRegionX() int32 {
	if m != nil && m.RegionX != nil {
		return *m.RegionX
	}
	return 0
}

func (m *MapReply) GetRegionY() int32 {
	if m != nil && m.RegionY != nil {
		return *m.RegionY
	}
	return 0
}

func (m *MapReply) GetRegionSizeX() int32 {
	if m != nil && m.RegionSizeX != nil {
		return *m.RegionSizeX
	}
	return 0
}

func (m *MapReply) GetRegionSizeY() int32 {
	if m != nil && m.RegionSizeY != nil {
		return *m.RegionSizeY
	}
	return 0
}

func (m *MapReply) GetCurrentYear() int32 {
	if m != nil && m.CurrentYear != nil {
		return *m.CurrentYear
	}
	return 0
}

func (m *MapReply) GetCurrentSeason() int32 {
	if m != nil && m.CurrentSeason != nil {
		return *m.CurrentSeason
	}
	return 0
}

// RPC GetRawNames : MapRequest -> RawNames
type RawNames struct {
	Available            *bool    `protobuf:"varint,1,req,name=available" json:"available,omitempty"`
	Inorganic            []string `protobuf:"bytes,2,rep,name=inorganic" json:"inorganic,omitempty"`
	Organic              []string `protobuf:"bytes,3,rep,name=organic" json:"organic,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RawNames) Reset()         { *m = RawNames{} }
func (m *RawNames) String() string { return proto.CompactTextString(m) }
func (*RawNames) ProtoMessage()    {}
func (*RawNames) Descriptor() ([]byte, []int) {
	return fileDescriptor_isoworldremote_e2cb50d09294e39c, []int{6}
}
func (m *RawNames) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RawNames.Unmarshal(m, b)
}
func (m *RawNames) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RawNames.Marshal(b, m, deterministic)
}
func (dst *RawNames) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RawNames.Merge(dst, src)
}
func (m *RawNames) XXX_Size() int {
	return xxx_messageInfo_RawNames.Size(m)
}
func (m *RawNames) XXX_DiscardUnknown() {
	xxx_messageInfo_RawNames.DiscardUnknown(m)
}

var xxx_messageInfo_RawNames proto.InternalMessageInfo

func (m *RawNames) GetAvailable() bool {
	if m != nil && m.Available != nil {
		return *m.Available
	}
	return false
}

func (m *RawNames) GetInorganic() []string {
	if m != nil {
		return m.Inorganic
	}
	return nil
}

func (m *RawNames) GetOrganic() []string {
	if m != nil {
		return m.Organic
	}
	return nil
}

func init() {
	proto.RegisterType((*ColorDefinition)(nil), "isoworldremote.ColorDefinition")
	proto.RegisterType((*EmbarkTileLayer)(nil), "isoworldremote.EmbarkTileLayer")
	proto.RegisterType((*EmbarkTile)(nil), "isoworldremote.EmbarkTile")
	proto.RegisterType((*TileRequest)(nil), "isoworldremote.TileRequest")
	proto.RegisterType((*MapRequest)(nil), "isoworldremote.MapRequest")
	proto.RegisterType((*MapReply)(nil), "isoworldremote.MapReply")
	proto.RegisterType((*RawNames)(nil), "isoworldremote.RawNames")
	proto.RegisterEnum("isoworldremote.BasicMaterial", BasicMaterial_name, BasicMaterial_value)
	proto.RegisterEnum("isoworldremote.LiquidType", LiquidType_name, LiquidType_value)
	proto.RegisterEnum("isoworldremote.BasicShape", BasicShape_name, BasicShape_value)
}

func init() {
	proto.RegisterFile("isoworldremote.proto", fileDescriptor_isoworldremote_e2cb50d09294e39c)
}

var fileDescriptor_isoworldremote_e2cb50d09294e39c = []byte{
	// 708 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xd1, 0x6e, 0xe2, 0x46,
	0x14, 0xad, 0x6d, 0x8c, 0xf1, 0x25, 0x10, 0x67, 0x94, 0xaa, 0x6e, 0x95, 0x2a, 0xd4, 0x52, 0x25,
	0x94, 0xaa, 0x79, 0xc8, 0x6b, 0xa5, 0x4a, 0x4e, 0x20, 0x09, 0x12, 0xd8, 0x64, 0x20, 0x1b, 0xd8,
	0x17, 0xef, 0x00, 0x93, 0xec, 0x68, 0x8d, 0x4d, 0xc6, 0x26, 0x89, 0xf3, 0x33, 0xfb, 0x8b, 0xfb,
	0x01, 0xfb, 0xb0, 0x9a, 0xb1, 0x81, 0x84, 0x8d, 0xb4, 0xfb, 0x36, 0xf7, 0x9c, 0x73, 0xcf, 0xbd,
	0x73, 0x46, 0x03, 0xfb, 0x2c, 0x89, 0x1f, 0x63, 0x1e, 0xce, 0x38, 0x9d, 0xc7, 0x29, 0x3d, 0x5e,
	0xf0, 0x38, 0x8d, 0x51, 0xfd, 0x35, 0xea, 0xf4, 0x60, 0xf7, 0x2c, 0x0e, 0x63, 0xde, 0xa2, 0xb7,
	0x2c, 0x62, 0x29, 0x8b, 0x23, 0x64, 0x81, 0xc6, 0xe9, 0xcc, 0x56, 0x1a, 0x6a, 0x53, 0xc7, 0xe2,
	0x88, 0xf6, 0x41, 0xbf, 0xe3, 0x94, 0x46, 0xb6, 0x2a, 0xb1, 0xbc, 0x40, 0x08, 0x4a, 0x93, 0x70,
	0x49, 0x6d, 0x4d, 0x82, 0xf2, 0xec, 0x7c, 0x56, 0x61, 0xb7, 0x3d, 0x9f, 0x10, 0xfe, 0x69, 0xc8,
	0x42, 0xda, 0x25, 0x19, 0xe5, 0xe8, 0x02, 0xea, 0x73, 0x92, 0x06, 0x69, 0xb6, 0xa0, 0x41, 0x4a,
	0x26, 0x21, 0xb5, 0x4b, 0x0d, 0xad, 0x59, 0x3f, 0xf9, 0xf3, 0x78, 0x6b, 0xc3, 0x53, 0x92, 0xb0,
	0x69, 0x8f, 0xa4, 0x94, 0x33, 0x12, 0x9e, 0xaa, 0x96, 0x82, 0x77, 0xe6, 0x24, 0x1d, 0x66, 0x0b,
	0x3a, 0x14, 0x6d, 0xe8, 0x18, 0xf6, 0x84, 0x51, 0xb2, 0x9c, 0xbc, 0xf0, 0xd2, 0x1b, 0x5a, 0x53,
	0x97, 0xe2, 0xdd, 0x39, 0x49, 0x07, 0x39, 0x97, 0xeb, 0x2f, 0xc1, 0x4a, 0x59, 0x48, 0x83, 0xe4,
	0x23, 0x59, 0xcb, 0xcb, 0x72, 0xf4, 0x1f, 0x6f, 0x8e, 0x1e, 0x08, 0x9d, 0xb4, 0xaa, 0x8b, 0x3e,
	0x59, 0xe6, 0x4e, 0x9d, 0xc2, 0x69, 0x2a, 0xa2, 0x2a, 0x9c, 0x8c, 0x86, 0xd6, 0xac, 0x9e, 0x1c,
	0x6e, 0x3b, 0x6d, 0xa5, 0x99, 0x5b, 0x49, 0x50, 0x5a, 0x39, 0x5f, 0x15, 0x80, 0x4d, 0x42, 0xe8,
	0x37, 0x30, 0x64, 0x77, 0xf0, 0x54, 0x04, 0x5e, 0x96, 0xe5, 0x68, 0x43, 0x64, 0x45, 0xea, 0x39,
	0x31, 0xde, 0x10, 0xcf, 0x32, 0xf9, 0xbd, 0x82, 0x78, 0x8f, 0xfe, 0x07, 0x90, 0x4b, 0x86, 0x22,
	0x75, 0x99, 0xf1, 0x1b, 0xeb, 0x6d, 0x3d, 0x0e, 0x36, 0xd3, 0xf5, 0x3b, 0xfd, 0x05, 0x3b, 0xd3,
	0x25, 0xe7, 0x34, 0x4a, 0x83, 0x8c, 0x12, 0x6e, 0xeb, 0x0d, 0xa5, 0xa9, 0xe3, 0x6a, 0x81, 0x8d,
	0x29, 0xe1, 0xe8, 0x6f, 0xa8, 0xaf, 0x24, 0x09, 0x25, 0x49, 0x1c, 0xd9, 0x65, 0x29, 0xaa, 0x15,
	0xe8, 0x40, 0x82, 0xe8, 0x77, 0xa8, 0xb0, 0x24, 0x78, 0x20, 0x21, 0x9b, 0xd9, 0x46, 0x43, 0x69,
	0x56, 0xb0, 0xc1, 0x92, 0x77, 0xa2, 0x74, 0xfe, 0x83, 0xaa, 0x18, 0x8e, 0xe9, 0xfd, 0x92, 0x26,
	0x29, 0xfa, 0x15, 0xca, 0x8f, 0x24, 0x4a, 0xe5, 0xed, 0x85, 0x91, 0x2e, 0xaa, 0xd1, 0x1a, 0x16,
	0x77, 0x5f, 0xc3, 0x63, 0xe7, 0x5f, 0x80, 0x1e, 0x59, 0xac, 0x7a, 0x0f, 0xa1, 0x9a, 0x90, 0x07,
	0x1a, 0xdc, 0xc6, 0xe1, 0x8c, 0x72, 0x69, 0x60, 0x62, 0x10, 0xd0, 0xb9, 0x44, 0x9c, 0x2f, 0x0a,
	0x54, 0xa4, 0x7e, 0x11, 0x66, 0xe8, 0x00, 0x4c, 0xf2, 0x40, 0x58, 0x28, 0xdf, 0x4e, 0x44, 0x5d,
	0xc1, 0x1b, 0x40, 0x6c, 0xcc, 0xe9, 0x1d, 0x8b, 0xa3, 0xe0, 0xa9, 0x18, 0x69, 0xe4, 0xf5, 0xe8,
	0x05, 0x95, 0xd9, 0xda, 0x4b, 0x6a, 0x8c, 0x1c, 0xa8, 0x15, 0x54, 0xc2, 0x9e, 0x69, 0xf0, 0x64,
	0x97, 0xf2, 0xc8, 0x72, 0x70, 0xc0, 0x9e, 0xe9, 0x68, 0x5b, 0x93, 0xad, 0x62, 0xdd, 0x68, 0xc6,
	0xdf, 0x25, 0x5f, 0xfe, 0x99, 0xe4, 0x8d, 0x37, 0x92, 0x77, 0x3e, 0x40, 0x05, 0x93, 0x47, 0x8f,
	0xcc, 0x69, 0xf2, 0x83, 0x1b, 0x1f, 0x80, 0xc9, 0xa2, 0x98, 0xdf, 0x91, 0x88, 0x4d, 0x6d, 0xb5,
	0xa1, 0x35, 0x4d, 0xbc, 0x01, 0x90, 0x0d, 0xc6, 0x8a, 0xd3, 0x24, 0xb7, 0x2a, 0x8f, 0x06, 0x50,
	0x7b, 0xf5, 0x4f, 0x91, 0x01, 0x9a, 0xdb, 0xc1, 0xd6, 0x2f, 0xc8, 0x04, 0xdd, 0x1f, 0x5e, 0xb6,
	0xb1, 0xa5, 0xa0, 0x1a, 0x98, 0x1d, 0xcf, 0xc7, 0x17, 0xae, 0xd7, 0x39, 0xb3, 0x54, 0x04, 0x50,
	0xee, 0x76, 0xae, 0xae, 0x3b, 0x2d, 0x4b, 0x13, 0xaa, 0x7e, 0xd7, 0xf5, 0x86, 0x56, 0x09, 0x55,
	0xa0, 0x74, 0xe3, 0xfb, 0x2d, 0x4b, 0x3f, 0xfa, 0x07, 0xa0, 0xcb, 0xee, 0x97, 0x6c, 0x26, 0x3e,
	0xbb, 0x70, 0xec, 0x9c, 0xb5, 0x73, 0xc7, 0x1b, 0x77, 0x28, 0x1d, 0x4d, 0xd0, 0x7b, 0xee, 0x45,
	0xcf, 0xb5, 0xd4, 0xa3, 0x2b, 0x80, 0xcd, 0x77, 0x15, 0x26, 0x9e, 0xef, 0x09, 0x75, 0x05, 0x4a,
	0x7e, 0xbf, 0xed, 0x59, 0x8a, 0x34, 0x76, 0xbb, 0xdd, 0x7c, 0xda, 0x79, 0xd7, 0xf7, 0xb1, 0x55,
	0x42, 0x55, 0x30, 0xb0, 0xdb, 0xeb, 0x07, 0xd7, 0x7d, 0x4b, 0x17, 0x0b, 0xca, 0xa2, 0xe5, 0xdf,
	0x78, 0x56, 0xf9, 0x54, 0xbd, 0xd4, 0xbe, 0x05, 0x00, 0x00, 0xff, 0xff, 0xa3, 0x48, 0xf5, 0x63,
	0x30, 0x05, 0x00, 0x00,
}
