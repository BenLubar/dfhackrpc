// Code generated by protoc-gen-go. DO NOT EDIT.
// source: RemoteFortressReader.proto

package remotefortressreader

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// We use shapes, etc, because the actual tiletypes may differ between DF versions.
type TiletypeShape int32

const (
	TiletypeShape_NO_SHAPE      TiletypeShape = -1
	TiletypeShape_EMPTY         TiletypeShape = 0
	TiletypeShape_FLOOR         TiletypeShape = 1
	TiletypeShape_BOULDER       TiletypeShape = 2
	TiletypeShape_PEBBLES       TiletypeShape = 3
	TiletypeShape_WALL          TiletypeShape = 4
	TiletypeShape_FORTIFICATION TiletypeShape = 5
	TiletypeShape_STAIR_UP      TiletypeShape = 6
	TiletypeShape_STAIR_DOWN    TiletypeShape = 7
	TiletypeShape_STAIR_UPDOWN  TiletypeShape = 8
	TiletypeShape_RAMP          TiletypeShape = 9
	TiletypeShape_RAMP_TOP      TiletypeShape = 10
	TiletypeShape_BROOK_BED     TiletypeShape = 11
	TiletypeShape_BROOK_TOP     TiletypeShape = 12
	TiletypeShape_TREE_SHAPE    TiletypeShape = 13
	TiletypeShape_SAPLING       TiletypeShape = 14
	TiletypeShape_SHRUB         TiletypeShape = 15
	TiletypeShape_ENDLESS_PIT   TiletypeShape = 16
	TiletypeShape_BRANCH        TiletypeShape = 17
	TiletypeShape_TRUNK_BRANCH  TiletypeShape = 18
	TiletypeShape_TWIG          TiletypeShape = 19
)

var TiletypeShape_name = map[int32]string{
	-1: "NO_SHAPE",
	0:  "EMPTY",
	1:  "FLOOR",
	2:  "BOULDER",
	3:  "PEBBLES",
	4:  "WALL",
	5:  "FORTIFICATION",
	6:  "STAIR_UP",
	7:  "STAIR_DOWN",
	8:  "STAIR_UPDOWN",
	9:  "RAMP",
	10: "RAMP_TOP",
	11: "BROOK_BED",
	12: "BROOK_TOP",
	13: "TREE_SHAPE",
	14: "SAPLING",
	15: "SHRUB",
	16: "ENDLESS_PIT",
	17: "BRANCH",
	18: "TRUNK_BRANCH",
	19: "TWIG",
}
var TiletypeShape_value = map[string]int32{
	"NO_SHAPE":      -1,
	"EMPTY":         0,
	"FLOOR":         1,
	"BOULDER":       2,
	"PEBBLES":       3,
	"WALL":          4,
	"FORTIFICATION": 5,
	"STAIR_UP":      6,
	"STAIR_DOWN":    7,
	"STAIR_UPDOWN":  8,
	"RAMP":          9,
	"RAMP_TOP":      10,
	"BROOK_BED":     11,
	"BROOK_TOP":     12,
	"TREE_SHAPE":    13,
	"SAPLING":       14,
	"SHRUB":         15,
	"ENDLESS_PIT":   16,
	"BRANCH":        17,
	"TRUNK_BRANCH":  18,
	"TWIG":          19,
}

func (x TiletypeShape) Enum() *TiletypeShape {
	p := new(TiletypeShape)
	*p = x
	return p
}
func (x TiletypeShape) String() string {
	return proto.EnumName(TiletypeShape_name, int32(x))
}
func (x *TiletypeShape) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TiletypeShape_value, data, "TiletypeShape")
	if err != nil {
		return err
	}
	*x = TiletypeShape(value)
	return nil
}
func (TiletypeShape) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{0}
}

type TiletypeSpecial int32

const (
	TiletypeSpecial_NO_SPECIAL   TiletypeSpecial = -1
	TiletypeSpecial_NORMAL       TiletypeSpecial = 0
	TiletypeSpecial_RIVER_SOURCE TiletypeSpecial = 1
	TiletypeSpecial_WATERFALL    TiletypeSpecial = 2
	TiletypeSpecial_SMOOTH       TiletypeSpecial = 3
	TiletypeSpecial_FURROWED     TiletypeSpecial = 4
	TiletypeSpecial_WET          TiletypeSpecial = 5
	TiletypeSpecial_DEAD         TiletypeSpecial = 6
	TiletypeSpecial_WORN_1       TiletypeSpecial = 7
	TiletypeSpecial_WORN_2       TiletypeSpecial = 8
	TiletypeSpecial_WORN_3       TiletypeSpecial = 9
	TiletypeSpecial_TRACK        TiletypeSpecial = 10
	TiletypeSpecial_SMOOTH_DEAD  TiletypeSpecial = 11
)

var TiletypeSpecial_name = map[int32]string{
	-1: "NO_SPECIAL",
	0:  "NORMAL",
	1:  "RIVER_SOURCE",
	2:  "WATERFALL",
	3:  "SMOOTH",
	4:  "FURROWED",
	5:  "WET",
	6:  "DEAD",
	7:  "WORN_1",
	8:  "WORN_2",
	9:  "WORN_3",
	10: "TRACK",
	11: "SMOOTH_DEAD",
}
var TiletypeSpecial_value = map[string]int32{
	"NO_SPECIAL":   -1,
	"NORMAL":       0,
	"RIVER_SOURCE": 1,
	"WATERFALL":    2,
	"SMOOTH":       3,
	"FURROWED":     4,
	"WET":          5,
	"DEAD":         6,
	"WORN_1":       7,
	"WORN_2":       8,
	"WORN_3":       9,
	"TRACK":        10,
	"SMOOTH_DEAD":  11,
}

func (x TiletypeSpecial) Enum() *TiletypeSpecial {
	p := new(TiletypeSpecial)
	*p = x
	return p
}
func (x TiletypeSpecial) String() string {
	return proto.EnumName(TiletypeSpecial_name, int32(x))
}
func (x *TiletypeSpecial) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TiletypeSpecial_value, data, "TiletypeSpecial")
	if err != nil {
		return err
	}
	*x = TiletypeSpecial(value)
	return nil
}
func (TiletypeSpecial) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{1}
}

type TiletypeMaterial int32

const (
	TiletypeMaterial_NO_MATERIAL     TiletypeMaterial = -1
	TiletypeMaterial_AIR             TiletypeMaterial = 0
	TiletypeMaterial_SOIL            TiletypeMaterial = 1
	TiletypeMaterial_STONE           TiletypeMaterial = 2
	TiletypeMaterial_FEATURE         TiletypeMaterial = 3
	TiletypeMaterial_LAVA_STONE      TiletypeMaterial = 4
	TiletypeMaterial_MINERAL         TiletypeMaterial = 5
	TiletypeMaterial_FROZEN_LIQUID   TiletypeMaterial = 6
	TiletypeMaterial_CONSTRUCTION    TiletypeMaterial = 7
	TiletypeMaterial_GRASS_LIGHT     TiletypeMaterial = 8
	TiletypeMaterial_GRASS_DARK      TiletypeMaterial = 9
	TiletypeMaterial_GRASS_DRY       TiletypeMaterial = 10
	TiletypeMaterial_GRASS_DEAD      TiletypeMaterial = 11
	TiletypeMaterial_PLANT           TiletypeMaterial = 12
	TiletypeMaterial_HFS             TiletypeMaterial = 13
	TiletypeMaterial_CAMPFIRE        TiletypeMaterial = 14
	TiletypeMaterial_FIRE            TiletypeMaterial = 15
	TiletypeMaterial_ASHES           TiletypeMaterial = 16
	TiletypeMaterial_MAGMA           TiletypeMaterial = 17
	TiletypeMaterial_DRIFTWOOD       TiletypeMaterial = 18
	TiletypeMaterial_POOL            TiletypeMaterial = 19
	TiletypeMaterial_BROOK           TiletypeMaterial = 20
	TiletypeMaterial_RIVER           TiletypeMaterial = 21
	TiletypeMaterial_ROOT            TiletypeMaterial = 22
	TiletypeMaterial_TREE_MATERIAL   TiletypeMaterial = 23
	TiletypeMaterial_MUSHROOM        TiletypeMaterial = 24
	TiletypeMaterial_UNDERWORLD_GATE TiletypeMaterial = 25
)

var TiletypeMaterial_name = map[int32]string{
	-1: "NO_MATERIAL",
	0:  "AIR",
	1:  "SOIL",
	2:  "STONE",
	3:  "FEATURE",
	4:  "LAVA_STONE",
	5:  "MINERAL",
	6:  "FROZEN_LIQUID",
	7:  "CONSTRUCTION",
	8:  "GRASS_LIGHT",
	9:  "GRASS_DARK",
	10: "GRASS_DRY",
	11: "GRASS_DEAD",
	12: "PLANT",
	13: "HFS",
	14: "CAMPFIRE",
	15: "FIRE",
	16: "ASHES",
	17: "MAGMA",
	18: "DRIFTWOOD",
	19: "POOL",
	20: "BROOK",
	21: "RIVER",
	22: "ROOT",
	23: "TREE_MATERIAL",
	24: "MUSHROOM",
	25: "UNDERWORLD_GATE",
}
var TiletypeMaterial_value = map[string]int32{
	"NO_MATERIAL":     -1,
	"AIR":             0,
	"SOIL":            1,
	"STONE":           2,
	"FEATURE":         3,
	"LAVA_STONE":      4,
	"MINERAL":         5,
	"FROZEN_LIQUID":   6,
	"CONSTRUCTION":    7,
	"GRASS_LIGHT":     8,
	"GRASS_DARK":      9,
	"GRASS_DRY":       10,
	"GRASS_DEAD":      11,
	"PLANT":           12,
	"HFS":             13,
	"CAMPFIRE":        14,
	"FIRE":            15,
	"ASHES":           16,
	"MAGMA":           17,
	"DRIFTWOOD":       18,
	"POOL":            19,
	"BROOK":           20,
	"RIVER":           21,
	"ROOT":            22,
	"TREE_MATERIAL":   23,
	"MUSHROOM":        24,
	"UNDERWORLD_GATE": 25,
}

func (x TiletypeMaterial) Enum() *TiletypeMaterial {
	p := new(TiletypeMaterial)
	*p = x
	return p
}
func (x TiletypeMaterial) String() string {
	return proto.EnumName(TiletypeMaterial_name, int32(x))
}
func (x *TiletypeMaterial) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TiletypeMaterial_value, data, "TiletypeMaterial")
	if err != nil {
		return err
	}
	*x = TiletypeMaterial(value)
	return nil
}
func (TiletypeMaterial) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{2}
}

type TiletypeVariant int32

const (
	TiletypeVariant_NO_VARIANT TiletypeVariant = -1
	TiletypeVariant_VAR_1      TiletypeVariant = 0
	TiletypeVariant_VAR_2      TiletypeVariant = 1
	TiletypeVariant_VAR_3      TiletypeVariant = 2
	TiletypeVariant_VAR_4      TiletypeVariant = 3
)

var TiletypeVariant_name = map[int32]string{
	-1: "NO_VARIANT",
	0:  "VAR_1",
	1:  "VAR_2",
	2:  "VAR_3",
	3:  "VAR_4",
}
var TiletypeVariant_value = map[string]int32{
	"NO_VARIANT": -1,
	"VAR_1":      0,
	"VAR_2":      1,
	"VAR_3":      2,
	"VAR_4":      3,
}

func (x TiletypeVariant) Enum() *TiletypeVariant {
	p := new(TiletypeVariant)
	*p = x
	return p
}
func (x TiletypeVariant) String() string {
	return proto.EnumName(TiletypeVariant_name, int32(x))
}
func (x *TiletypeVariant) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TiletypeVariant_value, data, "TiletypeVariant")
	if err != nil {
		return err
	}
	*x = TiletypeVariant(value)
	return nil
}
func (TiletypeVariant) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{3}
}

type WorldPoles int32

const (
	WorldPoles_NO_POLES   WorldPoles = 0
	WorldPoles_NORTH_POLE WorldPoles = 1
	WorldPoles_SOUTH_POLE WorldPoles = 2
	WorldPoles_BOTH_POLES WorldPoles = 3
)

var WorldPoles_name = map[int32]string{
	0: "NO_POLES",
	1: "NORTH_POLE",
	2: "SOUTH_POLE",
	3: "BOTH_POLES",
}
var WorldPoles_value = map[string]int32{
	"NO_POLES":   0,
	"NORTH_POLE": 1,
	"SOUTH_POLE": 2,
	"BOTH_POLES": 3,
}

func (x WorldPoles) Enum() *WorldPoles {
	p := new(WorldPoles)
	*p = x
	return p
}
func (x WorldPoles) String() string {
	return proto.EnumName(WorldPoles_name, int32(x))
}
func (x *WorldPoles) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(WorldPoles_value, data, "WorldPoles")
	if err != nil {
		return err
	}
	*x = WorldPoles(value)
	return nil
}
func (WorldPoles) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{4}
}

type BuildingDirection int32

const (
	BuildingDirection_NORTH BuildingDirection = 0
	BuildingDirection_EAST  BuildingDirection = 1
	BuildingDirection_SOUTH BuildingDirection = 2
	BuildingDirection_WEST  BuildingDirection = 3
	BuildingDirection_NONE  BuildingDirection = 4
)

var BuildingDirection_name = map[int32]string{
	0: "NORTH",
	1: "EAST",
	2: "SOUTH",
	3: "WEST",
	4: "NONE",
}
var BuildingDirection_value = map[string]int32{
	"NORTH": 0,
	"EAST":  1,
	"SOUTH": 2,
	"WEST":  3,
	"NONE":  4,
}

func (x BuildingDirection) Enum() *BuildingDirection {
	p := new(BuildingDirection)
	*p = x
	return p
}
func (x BuildingDirection) String() string {
	return proto.EnumName(BuildingDirection_name, int32(x))
}
func (x *BuildingDirection) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BuildingDirection_value, data, "BuildingDirection")
	if err != nil {
		return err
	}
	*x = BuildingDirection(value)
	return nil
}
func (BuildingDirection) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{5}
}

type TileDigDesignation int32

const (
	// *
	// no designation
	TileDigDesignation_NO_DIG TileDigDesignation = 0
	// *
	// dig walls, remove stairs and ramps, gather plants, fell trees
	TileDigDesignation_DEFAULT_DIG       TileDigDesignation = 1
	TileDigDesignation_UP_DOWN_STAIR_DIG TileDigDesignation = 2
	TileDigDesignation_CHANNEL_DIG       TileDigDesignation = 3
	TileDigDesignation_RAMP_DIG          TileDigDesignation = 4
	TileDigDesignation_DOWN_STAIR_DIG    TileDigDesignation = 5
	TileDigDesignation_UP_STAIR_DIG      TileDigDesignation = 6
)

var TileDigDesignation_name = map[int32]string{
	0: "NO_DIG",
	1: "DEFAULT_DIG",
	2: "UP_DOWN_STAIR_DIG",
	3: "CHANNEL_DIG",
	4: "RAMP_DIG",
	5: "DOWN_STAIR_DIG",
	6: "UP_STAIR_DIG",
}
var TileDigDesignation_value = map[string]int32{
	"NO_DIG":            0,
	"DEFAULT_DIG":       1,
	"UP_DOWN_STAIR_DIG": 2,
	"CHANNEL_DIG":       3,
	"RAMP_DIG":          4,
	"DOWN_STAIR_DIG":    5,
	"UP_STAIR_DIG":      6,
}

func (x TileDigDesignation) Enum() *TileDigDesignation {
	p := new(TileDigDesignation)
	*p = x
	return p
}
func (x TileDigDesignation) String() string {
	return proto.EnumName(TileDigDesignation_name, int32(x))
}
func (x *TileDigDesignation) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TileDigDesignation_value, data, "TileDigDesignation")
	if err != nil {
		return err
	}
	*x = TileDigDesignation(value)
	return nil
}
func (TileDigDesignation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{6}
}

type HairStyle int32

const (
	HairStyle_UNKEMPT       HairStyle = -1
	HairStyle_NEATLY_COMBED HairStyle = 0
	HairStyle_BRAIDED       HairStyle = 1
	HairStyle_DOUBLE_BRAID  HairStyle = 2
	HairStyle_PONY_TAILS    HairStyle = 3
	HairStyle_CLEAN_SHAVEN  HairStyle = 4
)

var HairStyle_name = map[int32]string{
	-1: "UNKEMPT",
	0:  "NEATLY_COMBED",
	1:  "BRAIDED",
	2:  "DOUBLE_BRAID",
	3:  "PONY_TAILS",
	4:  "CLEAN_SHAVEN",
}
var HairStyle_value = map[string]int32{
	"UNKEMPT":       -1,
	"NEATLY_COMBED": 0,
	"BRAIDED":       1,
	"DOUBLE_BRAID":  2,
	"PONY_TAILS":    3,
	"CLEAN_SHAVEN":  4,
}

func (x HairStyle) Enum() *HairStyle {
	p := new(HairStyle)
	*p = x
	return p
}
func (x HairStyle) String() string {
	return proto.EnumName(HairStyle_name, int32(x))
}
func (x *HairStyle) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(HairStyle_value, data, "HairStyle")
	if err != nil {
		return err
	}
	*x = HairStyle(value)
	return nil
}
func (HairStyle) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{7}
}

type InventoryMode int32

const (
	InventoryMode_Hauled InventoryMode = 0
	// *
	// also shield, crutch
	InventoryMode_Weapon InventoryMode = 1
	// *
	// quiver
	InventoryMode_Worn     InventoryMode = 2
	InventoryMode_Piercing InventoryMode = 3
	// *
	// attached to clothing
	InventoryMode_Flask InventoryMode = 4
	// *
	// e.g. bandage
	InventoryMode_WrappedAround InventoryMode = 5
	InventoryMode_StuckIn       InventoryMode = 6
	// *
	// string descr like Worn
	InventoryMode_InMouth InventoryMode = 7
	// *
	// Left shoulder, right shoulder, or head, selected randomly using pet_seed
	InventoryMode_Pet      InventoryMode = 8
	InventoryMode_SewnInto InventoryMode = 9
	InventoryMode_Strapped InventoryMode = 10
)

var InventoryMode_name = map[int32]string{
	0:  "Hauled",
	1:  "Weapon",
	2:  "Worn",
	3:  "Piercing",
	4:  "Flask",
	5:  "WrappedAround",
	6:  "StuckIn",
	7:  "InMouth",
	8:  "Pet",
	9:  "SewnInto",
	10: "Strapped",
}
var InventoryMode_value = map[string]int32{
	"Hauled":        0,
	"Weapon":        1,
	"Worn":          2,
	"Piercing":      3,
	"Flask":         4,
	"WrappedAround": 5,
	"StuckIn":       6,
	"InMouth":       7,
	"Pet":           8,
	"SewnInto":      9,
	"Strapped":      10,
}

func (x InventoryMode) Enum() *InventoryMode {
	p := new(InventoryMode)
	*p = x
	return p
}
func (x InventoryMode) String() string {
	return proto.EnumName(InventoryMode_name, int32(x))
}
func (x *InventoryMode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(InventoryMode_value, data, "InventoryMode")
	if err != nil {
		return err
	}
	*x = InventoryMode(value)
	return nil
}
func (InventoryMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{8}
}

type MatterState int32

const (
	MatterState_Solid   MatterState = 0
	MatterState_Liquid  MatterState = 1
	MatterState_Gas     MatterState = 2
	MatterState_Powder  MatterState = 3
	MatterState_Paste   MatterState = 4
	MatterState_Pressed MatterState = 5
)

var MatterState_name = map[int32]string{
	0: "Solid",
	1: "Liquid",
	2: "Gas",
	3: "Powder",
	4: "Paste",
	5: "Pressed",
}
var MatterState_value = map[string]int32{
	"Solid":   0,
	"Liquid":  1,
	"Gas":     2,
	"Powder":  3,
	"Paste":   4,
	"Pressed": 5,
}

func (x MatterState) Enum() *MatterState {
	p := new(MatterState)
	*p = x
	return p
}
func (x MatterState) String() string {
	return proto.EnumName(MatterState_name, int32(x))
}
func (x *MatterState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MatterState_value, data, "MatterState")
	if err != nil {
		return err
	}
	*x = MatterState(value)
	return nil
}
func (MatterState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{9}
}

type FrontType int32

const (
	FrontType_FRONT_NONE     FrontType = 0
	FrontType_FRONT_WARM     FrontType = 1
	FrontType_FRONT_COLD     FrontType = 2
	FrontType_FRONT_OCCLUDED FrontType = 3
)

var FrontType_name = map[int32]string{
	0: "FRONT_NONE",
	1: "FRONT_WARM",
	2: "FRONT_COLD",
	3: "FRONT_OCCLUDED",
}
var FrontType_value = map[string]int32{
	"FRONT_NONE":     0,
	"FRONT_WARM":     1,
	"FRONT_COLD":     2,
	"FRONT_OCCLUDED": 3,
}

func (x FrontType) Enum() *FrontType {
	p := new(FrontType)
	*p = x
	return p
}
func (x FrontType) String() string {
	return proto.EnumName(FrontType_name, int32(x))
}
func (x *FrontType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FrontType_value, data, "FrontType")
	if err != nil {
		return err
	}
	*x = FrontType(value)
	return nil
}
func (FrontType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{10}
}

type CumulusType int32

const (
	CumulusType_CUMULUS_NONE   CumulusType = 0
	CumulusType_CUMULUS_MEDIUM CumulusType = 1
	CumulusType_CUMULUS_MULTI  CumulusType = 2
	CumulusType_CUMULUS_NIMBUS CumulusType = 3
)

var CumulusType_name = map[int32]string{
	0: "CUMULUS_NONE",
	1: "CUMULUS_MEDIUM",
	2: "CUMULUS_MULTI",
	3: "CUMULUS_NIMBUS",
}
var CumulusType_value = map[string]int32{
	"CUMULUS_NONE":   0,
	"CUMULUS_MEDIUM": 1,
	"CUMULUS_MULTI":  2,
	"CUMULUS_NIMBUS": 3,
}

func (x CumulusType) Enum() *CumulusType {
	p := new(CumulusType)
	*p = x
	return p
}
func (x CumulusType) String() string {
	return proto.EnumName(CumulusType_name, int32(x))
}
func (x *CumulusType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CumulusType_value, data, "CumulusType")
	if err != nil {
		return err
	}
	*x = CumulusType(value)
	return nil
}
func (CumulusType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{11}
}

type StratusType int32

const (
	StratusType_STRATUS_NONE   StratusType = 0
	StratusType_STRATUS_ALTO   StratusType = 1
	StratusType_STRATUS_PROPER StratusType = 2
	StratusType_STRATUS_NIMBUS StratusType = 3
)

var StratusType_name = map[int32]string{
	0: "STRATUS_NONE",
	1: "STRATUS_ALTO",
	2: "STRATUS_PROPER",
	3: "STRATUS_NIMBUS",
}
var StratusType_value = map[string]int32{
	"STRATUS_NONE":   0,
	"STRATUS_ALTO":   1,
	"STRATUS_PROPER": 2,
	"STRATUS_NIMBUS": 3,
}

func (x StratusType) Enum() *StratusType {
	p := new(StratusType)
	*p = x
	return p
}
func (x StratusType) String() string {
	return proto.EnumName(StratusType_name, int32(x))
}
func (x *StratusType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(StratusType_value, data, "StratusType")
	if err != nil {
		return err
	}
	*x = StratusType(value)
	return nil
}
func (StratusType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{12}
}

type FogType int32

const (
	FogType_FOG_NONE   FogType = 0
	FogType_FOG_MIST   FogType = 1
	FogType_FOG_NORMAL FogType = 2
	FogType_F0G_THICK  FogType = 3
)

var FogType_name = map[int32]string{
	0: "FOG_NONE",
	1: "FOG_MIST",
	2: "FOG_NORMAL",
	3: "F0G_THICK",
}
var FogType_value = map[string]int32{
	"FOG_NONE":   0,
	"FOG_MIST":   1,
	"FOG_NORMAL": 2,
	"F0G_THICK":  3,
}

func (x FogType) Enum() *FogType {
	p := new(FogType)
	*p = x
	return p
}
func (x FogType) String() string {
	return proto.EnumName(FogType_name, int32(x))
}
func (x *FogType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FogType_value, data, "FogType")
	if err != nil {
		return err
	}
	*x = FogType(value)
	return nil
}
func (FogType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{13}
}

type SiteRealizationBuildingType int32

const (
	SiteRealizationBuildingType_cottage_plot      SiteRealizationBuildingType = 0
	SiteRealizationBuildingType_castle_wall       SiteRealizationBuildingType = 1
	SiteRealizationBuildingType_castle_tower      SiteRealizationBuildingType = 2
	SiteRealizationBuildingType_castle_courtyard  SiteRealizationBuildingType = 3
	SiteRealizationBuildingType_house             SiteRealizationBuildingType = 4
	SiteRealizationBuildingType_temple            SiteRealizationBuildingType = 5
	SiteRealizationBuildingType_tomb              SiteRealizationBuildingType = 6
	SiteRealizationBuildingType_shop_house        SiteRealizationBuildingType = 7
	SiteRealizationBuildingType_warehouse         SiteRealizationBuildingType = 8
	SiteRealizationBuildingType_market_square     SiteRealizationBuildingType = 9
	SiteRealizationBuildingType_pasture           SiteRealizationBuildingType = 10
	SiteRealizationBuildingType_waste             SiteRealizationBuildingType = 11
	SiteRealizationBuildingType_courtyard         SiteRealizationBuildingType = 12
	SiteRealizationBuildingType_well              SiteRealizationBuildingType = 13
	SiteRealizationBuildingType_vault             SiteRealizationBuildingType = 14
	SiteRealizationBuildingType_great_tower       SiteRealizationBuildingType = 15
	SiteRealizationBuildingType_trenches          SiteRealizationBuildingType = 16
	SiteRealizationBuildingType_tree_house        SiteRealizationBuildingType = 17
	SiteRealizationBuildingType_hillock_house     SiteRealizationBuildingType = 18
	SiteRealizationBuildingType_mead_hall         SiteRealizationBuildingType = 19
	SiteRealizationBuildingType_fortress_entrance SiteRealizationBuildingType = 20
	SiteRealizationBuildingType_library           SiteRealizationBuildingType = 21
	SiteRealizationBuildingType_tavern            SiteRealizationBuildingType = 22
)

var SiteRealizationBuildingType_name = map[int32]string{
	0:  "cottage_plot",
	1:  "castle_wall",
	2:  "castle_tower",
	3:  "castle_courtyard",
	4:  "house",
	5:  "temple",
	6:  "tomb",
	7:  "shop_house",
	8:  "warehouse",
	9:  "market_square",
	10: "pasture",
	11: "waste",
	12: "courtyard",
	13: "well",
	14: "vault",
	15: "great_tower",
	16: "trenches",
	17: "tree_house",
	18: "hillock_house",
	19: "mead_hall",
	20: "fortress_entrance",
	21: "library",
	22: "tavern",
}
var SiteRealizationBuildingType_value = map[string]int32{
	"cottage_plot":      0,
	"castle_wall":       1,
	"castle_tower":      2,
	"castle_courtyard":  3,
	"house":             4,
	"temple":            5,
	"tomb":              6,
	"shop_house":        7,
	"warehouse":         8,
	"market_square":     9,
	"pasture":           10,
	"waste":             11,
	"courtyard":         12,
	"well":              13,
	"vault":             14,
	"great_tower":       15,
	"trenches":          16,
	"tree_house":        17,
	"hillock_house":     18,
	"mead_hall":         19,
	"fortress_entrance": 20,
	"library":           21,
	"tavern":            22,
}

func (x SiteRealizationBuildingType) Enum() *SiteRealizationBuildingType {
	p := new(SiteRealizationBuildingType)
	*p = x
	return p
}
func (x SiteRealizationBuildingType) String() string {
	return proto.EnumName(SiteRealizationBuildingType_name, int32(x))
}
func (x *SiteRealizationBuildingType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SiteRealizationBuildingType_value, data, "SiteRealizationBuildingType")
	if err != nil {
		return err
	}
	*x = SiteRealizationBuildingType(value)
	return nil
}
func (SiteRealizationBuildingType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{14}
}

type PatternType int32

const (
	PatternType_MONOTONE  PatternType = 0
	PatternType_STRIPES   PatternType = 1
	PatternType_IRIS_EYE  PatternType = 2
	PatternType_SPOTS     PatternType = 3
	PatternType_PUPIL_EYE PatternType = 4
	PatternType_MOTTLED   PatternType = 5
)

var PatternType_name = map[int32]string{
	0: "MONOTONE",
	1: "STRIPES",
	2: "IRIS_EYE",
	3: "SPOTS",
	4: "PUPIL_EYE",
	5: "MOTTLED",
}
var PatternType_value = map[string]int32{
	"MONOTONE":  0,
	"STRIPES":   1,
	"IRIS_EYE":  2,
	"SPOTS":     3,
	"PUPIL_EYE": 4,
	"MOTTLED":   5,
}

func (x PatternType) Enum() *PatternType {
	p := new(PatternType)
	*p = x
	return p
}
func (x PatternType) String() string {
	return proto.EnumName(PatternType_name, int32(x))
}
func (x *PatternType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PatternType_value, data, "PatternType")
	if err != nil {
		return err
	}
	*x = PatternType(value)
	return nil
}
func (PatternType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{15}
}

type ImprovementType int32

const (
	ImprovementType_ART_IMAGE        ImprovementType = 0
	ImprovementType_COVERED          ImprovementType = 1
	ImprovementType_RINGS_HANGING    ImprovementType = 2
	ImprovementType_BANDS            ImprovementType = 3
	ImprovementType_SPIKES           ImprovementType = 4
	ImprovementType_ITEMSPECIFIC     ImprovementType = 5
	ImprovementType_THREAD           ImprovementType = 6
	ImprovementType_CLOTH            ImprovementType = 7
	ImprovementType_SEWN_IMAGE       ImprovementType = 8
	ImprovementType_PAGES            ImprovementType = 9
	ImprovementType_ILLUSTRATION     ImprovementType = 10
	ImprovementType_INSTRUMENT_PIECE ImprovementType = 11
	ImprovementType_WRITING          ImprovementType = 12
)

var ImprovementType_name = map[int32]string{
	0:  "ART_IMAGE",
	1:  "COVERED",
	2:  "RINGS_HANGING",
	3:  "BANDS",
	4:  "SPIKES",
	5:  "ITEMSPECIFIC",
	6:  "THREAD",
	7:  "CLOTH",
	8:  "SEWN_IMAGE",
	9:  "PAGES",
	10: "ILLUSTRATION",
	11: "INSTRUMENT_PIECE",
	12: "WRITING",
}
var ImprovementType_value = map[string]int32{
	"ART_IMAGE":        0,
	"COVERED":          1,
	"RINGS_HANGING":    2,
	"BANDS":            3,
	"SPIKES":           4,
	"ITEMSPECIFIC":     5,
	"THREAD":           6,
	"CLOTH":            7,
	"SEWN_IMAGE":       8,
	"PAGES":            9,
	"ILLUSTRATION":     10,
	"INSTRUMENT_PIECE": 11,
	"WRITING":          12,
}

func (x ImprovementType) Enum() *ImprovementType {
	p := new(ImprovementType)
	*p = x
	return p
}
func (x ImprovementType) String() string {
	return proto.EnumName(ImprovementType_name, int32(x))
}
func (x *ImprovementType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ImprovementType_value, data, "ImprovementType")
	if err != nil {
		return err
	}
	*x = ImprovementType(value)
	return nil
}
func (ImprovementType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{16}
}

type ArtImageElementType int32

const (
	ArtImageElementType_IMAGE_CREATURE ArtImageElementType = 0
	ArtImageElementType_IMAGE_PLANT    ArtImageElementType = 1
	ArtImageElementType_IMAGE_TREE     ArtImageElementType = 2
	ArtImageElementType_IMAGE_SHAPE    ArtImageElementType = 3
	ArtImageElementType_IMAGE_ITEM     ArtImageElementType = 4
)

var ArtImageElementType_name = map[int32]string{
	0: "IMAGE_CREATURE",
	1: "IMAGE_PLANT",
	2: "IMAGE_TREE",
	3: "IMAGE_SHAPE",
	4: "IMAGE_ITEM",
}
var ArtImageElementType_value = map[string]int32{
	"IMAGE_CREATURE": 0,
	"IMAGE_PLANT":    1,
	"IMAGE_TREE":     2,
	"IMAGE_SHAPE":    3,
	"IMAGE_ITEM":     4,
}

func (x ArtImageElementType) Enum() *ArtImageElementType {
	p := new(ArtImageElementType)
	*p = x
	return p
}
func (x ArtImageElementType) String() string {
	return proto.EnumName(ArtImageElementType_name, int32(x))
}
func (x *ArtImageElementType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ArtImageElementType_value, data, "ArtImageElementType")
	if err != nil {
		return err
	}
	*x = ArtImageElementType(value)
	return nil
}
func (ArtImageElementType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{17}
}

type ArtImagePropertyType int32

const (
	ArtImagePropertyType_TRANSITIVE_VERB   ArtImagePropertyType = 0
	ArtImagePropertyType_INTRANSITIVE_VERB ArtImagePropertyType = 1
)

var ArtImagePropertyType_name = map[int32]string{
	0: "TRANSITIVE_VERB",
	1: "INTRANSITIVE_VERB",
}
var ArtImagePropertyType_value = map[string]int32{
	"TRANSITIVE_VERB":   0,
	"INTRANSITIVE_VERB": 1,
}

func (x ArtImagePropertyType) Enum() *ArtImagePropertyType {
	p := new(ArtImagePropertyType)
	*p = x
	return p
}
func (x ArtImagePropertyType) String() string {
	return proto.EnumName(ArtImagePropertyType_name, int32(x))
}
func (x *ArtImagePropertyType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ArtImagePropertyType_value, data, "ArtImagePropertyType")
	if err != nil {
		return err
	}
	*x = ArtImagePropertyType(value)
	return nil
}
func (ArtImagePropertyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{18}
}

type ArtImageVerb int32

const (
	ArtImageVerb_VERB_WITHERING             ArtImageVerb = 0
	ArtImageVerb_VERB_SURROUNDEDBY          ArtImageVerb = 1
	ArtImageVerb_VERB_MASSACRING            ArtImageVerb = 2
	ArtImageVerb_VERB_FIGHTING              ArtImageVerb = 3
	ArtImageVerb_VERB_LABORING              ArtImageVerb = 4
	ArtImageVerb_VERB_GREETING              ArtImageVerb = 5
	ArtImageVerb_VERB_REFUSING              ArtImageVerb = 6
	ArtImageVerb_VERB_SPEAKING              ArtImageVerb = 7
	ArtImageVerb_VERB_EMBRACING             ArtImageVerb = 8
	ArtImageVerb_VERB_STRIKINGDOWN          ArtImageVerb = 9
	ArtImageVerb_VERB_MENACINGPOSE          ArtImageVerb = 10
	ArtImageVerb_VERB_TRAVELING             ArtImageVerb = 11
	ArtImageVerb_VERB_RAISING               ArtImageVerb = 12
	ArtImageVerb_VERB_HIDING                ArtImageVerb = 13
	ArtImageVerb_VERB_LOOKINGCONFUSED       ArtImageVerb = 14
	ArtImageVerb_VERB_LOOKINGTERRIFIED      ArtImageVerb = 15
	ArtImageVerb_VERB_DEVOURING             ArtImageVerb = 16
	ArtImageVerb_VERB_ADMIRING              ArtImageVerb = 17
	ArtImageVerb_VERB_BURNING               ArtImageVerb = 18
	ArtImageVerb_VERB_WEEPING               ArtImageVerb = 19
	ArtImageVerb_VERB_LOOKINGDEJECTED       ArtImageVerb = 20
	ArtImageVerb_VERB_CRINGING              ArtImageVerb = 21
	ArtImageVerb_VERB_SCREAMING             ArtImageVerb = 22
	ArtImageVerb_VERB_SUBMISSIVEGESTURE     ArtImageVerb = 23
	ArtImageVerb_VERB_FETALPOSITION         ArtImageVerb = 24
	ArtImageVerb_VERB_SMEAREDINTOSPIRAL     ArtImageVerb = 25
	ArtImageVerb_VERB_FALLING               ArtImageVerb = 26
	ArtImageVerb_VERB_DEAD                  ArtImageVerb = 27
	ArtImageVerb_VERB_LAUGHING              ArtImageVerb = 28
	ArtImageVerb_VERB_LOOKINGOFFENDED       ArtImageVerb = 29
	ArtImageVerb_VERB_BEINGSHOT             ArtImageVerb = 30
	ArtImageVerb_VERB_PLAINTIVEGESTURE      ArtImageVerb = 31
	ArtImageVerb_VERB_MELTING               ArtImageVerb = 32
	ArtImageVerb_VERB_SHOOTING              ArtImageVerb = 33
	ArtImageVerb_VERB_TORTURING             ArtImageVerb = 34
	ArtImageVerb_VERB_COMMITTINGDEPRAVEDACT ArtImageVerb = 35
	ArtImageVerb_VERB_PRAYING               ArtImageVerb = 36
	ArtImageVerb_VERB_CONTEMPLATING         ArtImageVerb = 37
	ArtImageVerb_VERB_COOKING               ArtImageVerb = 38
	ArtImageVerb_VERB_ENGRAVING             ArtImageVerb = 39
	ArtImageVerb_VERB_PROSTRATING           ArtImageVerb = 40
	ArtImageVerb_VERB_SUFFERING             ArtImageVerb = 41
	ArtImageVerb_VERB_BEINGIMPALED          ArtImageVerb = 42
	ArtImageVerb_VERB_BEINGCONTORTED        ArtImageVerb = 43
	ArtImageVerb_VERB_BEINGFLAYED           ArtImageVerb = 44
	ArtImageVerb_VERB_HANGINGFROM           ArtImageVerb = 45
	ArtImageVerb_VERB_BEINGMUTILATED        ArtImageVerb = 46
	ArtImageVerb_VERB_TRIUMPHANTPOSE        ArtImageVerb = 47
)

var ArtImageVerb_name = map[int32]string{
	0:  "VERB_WITHERING",
	1:  "VERB_SURROUNDEDBY",
	2:  "VERB_MASSACRING",
	3:  "VERB_FIGHTING",
	4:  "VERB_LABORING",
	5:  "VERB_GREETING",
	6:  "VERB_REFUSING",
	7:  "VERB_SPEAKING",
	8:  "VERB_EMBRACING",
	9:  "VERB_STRIKINGDOWN",
	10: "VERB_MENACINGPOSE",
	11: "VERB_TRAVELING",
	12: "VERB_RAISING",
	13: "VERB_HIDING",
	14: "VERB_LOOKINGCONFUSED",
	15: "VERB_LOOKINGTERRIFIED",
	16: "VERB_DEVOURING",
	17: "VERB_ADMIRING",
	18: "VERB_BURNING",
	19: "VERB_WEEPING",
	20: "VERB_LOOKINGDEJECTED",
	21: "VERB_CRINGING",
	22: "VERB_SCREAMING",
	23: "VERB_SUBMISSIVEGESTURE",
	24: "VERB_FETALPOSITION",
	25: "VERB_SMEAREDINTOSPIRAL",
	26: "VERB_FALLING",
	27: "VERB_DEAD",
	28: "VERB_LAUGHING",
	29: "VERB_LOOKINGOFFENDED",
	30: "VERB_BEINGSHOT",
	31: "VERB_PLAINTIVEGESTURE",
	32: "VERB_MELTING",
	33: "VERB_SHOOTING",
	34: "VERB_TORTURING",
	35: "VERB_COMMITTINGDEPRAVEDACT",
	36: "VERB_PRAYING",
	37: "VERB_CONTEMPLATING",
	38: "VERB_COOKING",
	39: "VERB_ENGRAVING",
	40: "VERB_PROSTRATING",
	41: "VERB_SUFFERING",
	42: "VERB_BEINGIMPALED",
	43: "VERB_BEINGCONTORTED",
	44: "VERB_BEINGFLAYED",
	45: "VERB_HANGINGFROM",
	46: "VERB_BEINGMUTILATED",
	47: "VERB_TRIUMPHANTPOSE",
}
var ArtImageVerb_value = map[string]int32{
	"VERB_WITHERING":             0,
	"VERB_SURROUNDEDBY":          1,
	"VERB_MASSACRING":            2,
	"VERB_FIGHTING":              3,
	"VERB_LABORING":              4,
	"VERB_GREETING":              5,
	"VERB_REFUSING":              6,
	"VERB_SPEAKING":              7,
	"VERB_EMBRACING":             8,
	"VERB_STRIKINGDOWN":          9,
	"VERB_MENACINGPOSE":          10,
	"VERB_TRAVELING":             11,
	"VERB_RAISING":               12,
	"VERB_HIDING":                13,
	"VERB_LOOKINGCONFUSED":       14,
	"VERB_LOOKINGTERRIFIED":      15,
	"VERB_DEVOURING":             16,
	"VERB_ADMIRING":              17,
	"VERB_BURNING":               18,
	"VERB_WEEPING":               19,
	"VERB_LOOKINGDEJECTED":       20,
	"VERB_CRINGING":              21,
	"VERB_SCREAMING":             22,
	"VERB_SUBMISSIVEGESTURE":     23,
	"VERB_FETALPOSITION":         24,
	"VERB_SMEAREDINTOSPIRAL":     25,
	"VERB_FALLING":               26,
	"VERB_DEAD":                  27,
	"VERB_LAUGHING":              28,
	"VERB_LOOKINGOFFENDED":       29,
	"VERB_BEINGSHOT":             30,
	"VERB_PLAINTIVEGESTURE":      31,
	"VERB_MELTING":               32,
	"VERB_SHOOTING":              33,
	"VERB_TORTURING":             34,
	"VERB_COMMITTINGDEPRAVEDACT": 35,
	"VERB_PRAYING":               36,
	"VERB_CONTEMPLATING":         37,
	"VERB_COOKING":               38,
	"VERB_ENGRAVING":             39,
	"VERB_PROSTRATING":           40,
	"VERB_SUFFERING":             41,
	"VERB_BEINGIMPALED":          42,
	"VERB_BEINGCONTORTED":        43,
	"VERB_BEINGFLAYED":           44,
	"VERB_HANGINGFROM":           45,
	"VERB_BEINGMUTILATED":        46,
	"VERB_TRIUMPHANTPOSE":        47,
}

func (x ArtImageVerb) Enum() *ArtImageVerb {
	p := new(ArtImageVerb)
	*p = x
	return p
}
func (x ArtImageVerb) String() string {
	return proto.EnumName(ArtImageVerb_name, int32(x))
}
func (x *ArtImageVerb) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ArtImageVerb_value, data, "ArtImageVerb")
	if err != nil {
		return err
	}
	*x = ArtImageVerb(value)
	return nil
}
func (ArtImageVerb) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{19}
}

type FlowType int32

const (
	FlowType_Miasma        FlowType = 0
	FlowType_Steam         FlowType = 1
	FlowType_Mist          FlowType = 2
	FlowType_MaterialDust  FlowType = 3
	FlowType_MagmaMist     FlowType = 4
	FlowType_Smoke         FlowType = 5
	FlowType_Dragonfire    FlowType = 6
	FlowType_Fire          FlowType = 7
	FlowType_Web           FlowType = 8
	FlowType_MaterialGas   FlowType = 9
	FlowType_MaterialVapor FlowType = 10
	FlowType_OceanWave     FlowType = 11
	FlowType_SeaFoam       FlowType = 12
	FlowType_ItemCloud     FlowType = 13
	FlowType_CampFire      FlowType = -1
)

var FlowType_name = map[int32]string{
	0:  "Miasma",
	1:  "Steam",
	2:  "Mist",
	3:  "MaterialDust",
	4:  "MagmaMist",
	5:  "Smoke",
	6:  "Dragonfire",
	7:  "Fire",
	8:  "Web",
	9:  "MaterialGas",
	10: "MaterialVapor",
	11: "OceanWave",
	12: "SeaFoam",
	13: "ItemCloud",
	-1: "CampFire",
}
var FlowType_value = map[string]int32{
	"Miasma":        0,
	"Steam":         1,
	"Mist":          2,
	"MaterialDust":  3,
	"MagmaMist":     4,
	"Smoke":         5,
	"Dragonfire":    6,
	"Fire":          7,
	"Web":           8,
	"MaterialGas":   9,
	"MaterialVapor": 10,
	"OceanWave":     11,
	"SeaFoam":       12,
	"ItemCloud":     13,
	"CampFire":      -1,
}

func (x FlowType) Enum() *FlowType {
	p := new(FlowType)
	*p = x
	return p
}
func (x FlowType) String() string {
	return proto.EnumName(FlowType_name, int32(x))
}
func (x *FlowType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FlowType_value, data, "FlowType")
	if err != nil {
		return err
	}
	*x = FlowType(value)
	return nil
}
func (FlowType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{20}
}

type Coord struct {
	X                    *int32   `protobuf:"varint,1,opt,name=x" json:"x,omitempty"`
	Y                    *int32   `protobuf:"varint,2,opt,name=y" json:"y,omitempty"`
	Z                    *int32   `protobuf:"varint,3,opt,name=z" json:"z,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Coord) Reset()         { *m = Coord{} }
func (m *Coord) String() string { return proto.CompactTextString(m) }
func (*Coord) ProtoMessage()    {}
func (*Coord) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{0}
}
func (m *Coord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Coord.Unmarshal(m, b)
}
func (m *Coord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Coord.Marshal(b, m, deterministic)
}
func (dst *Coord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Coord.Merge(dst, src)
}
func (m *Coord) XXX_Size() int {
	return xxx_messageInfo_Coord.Size(m)
}
func (m *Coord) XXX_DiscardUnknown() {
	xxx_messageInfo_Coord.DiscardUnknown(m)
}

var xxx_messageInfo_Coord proto.InternalMessageInfo

func (m *Coord) GetX() int32 {
	if m != nil && m.X != nil {
		return *m.X
	}
	return 0
}

func (m *Coord) GetY() int32 {
	if m != nil && m.Y != nil {
		return *m.Y
	}
	return 0
}

func (m *Coord) GetZ() int32 {
	if m != nil && m.Z != nil {
		return *m.Z
	}
	return 0
}

type Tiletype struct {
	Id                   *int32            `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	Name                 *string           `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Caption              *string           `protobuf:"bytes,3,opt,name=caption" json:"caption,omitempty"`
	Shape                *TiletypeShape    `protobuf:"varint,4,opt,name=shape,enum=RemoteFortressReader.TiletypeShape" json:"shape,omitempty"`
	Special              *TiletypeSpecial  `protobuf:"varint,5,opt,name=special,enum=RemoteFortressReader.TiletypeSpecial" json:"special,omitempty"`
	Material             *TiletypeMaterial `protobuf:"varint,6,opt,name=material,enum=RemoteFortressReader.TiletypeMaterial" json:"material,omitempty"`
	Variant              *TiletypeVariant  `protobuf:"varint,7,opt,name=variant,enum=RemoteFortressReader.TiletypeVariant" json:"variant,omitempty"`
	Direction            *string           `protobuf:"bytes,8,opt,name=direction" json:"direction,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Tiletype) Reset()         { *m = Tiletype{} }
func (m *Tiletype) String() string { return proto.CompactTextString(m) }
func (*Tiletype) ProtoMessage()    {}
func (*Tiletype) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{1}
}
func (m *Tiletype) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Tiletype.Unmarshal(m, b)
}
func (m *Tiletype) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Tiletype.Marshal(b, m, deterministic)
}
func (dst *Tiletype) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tiletype.Merge(dst, src)
}
func (m *Tiletype) XXX_Size() int {
	return xxx_messageInfo_Tiletype.Size(m)
}
func (m *Tiletype) XXX_DiscardUnknown() {
	xxx_messageInfo_Tiletype.DiscardUnknown(m)
}

var xxx_messageInfo_Tiletype proto.InternalMessageInfo

func (m *Tiletype) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Tiletype) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Tiletype) GetCaption() string {
	if m != nil && m.Caption != nil {
		return *m.Caption
	}
	return ""
}

func (m *Tiletype) GetShape() TiletypeShape {
	if m != nil && m.Shape != nil {
		return *m.Shape
	}
	return TiletypeShape_NO_SHAPE
}

func (m *Tiletype) GetSpecial() TiletypeSpecial {
	if m != nil && m.Special != nil {
		return *m.Special
	}
	return TiletypeSpecial_NO_SPECIAL
}

func (m *Tiletype) GetMaterial() TiletypeMaterial {
	if m != nil && m.Material != nil {
		return *m.Material
	}
	return TiletypeMaterial_NO_MATERIAL
}

func (m *Tiletype) GetVariant() TiletypeVariant {
	if m != nil && m.Variant != nil {
		return *m.Variant
	}
	return TiletypeVariant_NO_VARIANT
}

func (m *Tiletype) GetDirection() string {
	if m != nil && m.Direction != nil {
		return *m.Direction
	}
	return ""
}

type TiletypeList struct {
	TiletypeList         []*Tiletype `protobuf:"bytes,1,rep,name=tiletype_list,json=tiletypeList" json:"tiletype_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *TiletypeList) Reset()         { *m = TiletypeList{} }
func (m *TiletypeList) String() string { return proto.CompactTextString(m) }
func (*TiletypeList) ProtoMessage()    {}
func (*TiletypeList) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{2}
}
func (m *TiletypeList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TiletypeList.Unmarshal(m, b)
}
func (m *TiletypeList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TiletypeList.Marshal(b, m, deterministic)
}
func (dst *TiletypeList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TiletypeList.Merge(dst, src)
}
func (m *TiletypeList) XXX_Size() int {
	return xxx_messageInfo_TiletypeList.Size(m)
}
func (m *TiletypeList) XXX_DiscardUnknown() {
	xxx_messageInfo_TiletypeList.DiscardUnknown(m)
}

var xxx_messageInfo_TiletypeList proto.InternalMessageInfo

func (m *TiletypeList) GetTiletypeList() []*Tiletype {
	if m != nil {
		return m.TiletypeList
	}
	return nil
}

type BuildingExtents struct {
	PosX                 *int32   `protobuf:"varint,1,req,name=pos_x,json=posX" json:"pos_x,omitempty"`
	PosY                 *int32   `protobuf:"varint,2,req,name=pos_y,json=posY" json:"pos_y,omitempty"`
	Width                *int32   `protobuf:"varint,3,req,name=width" json:"width,omitempty"`
	Height               *int32   `protobuf:"varint,4,req,name=height" json:"height,omitempty"`
	Extents              []int32  `protobuf:"varint,5,rep,name=extents" json:"extents,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BuildingExtents) Reset()         { *m = BuildingExtents{} }
func (m *BuildingExtents) String() string { return proto.CompactTextString(m) }
func (*BuildingExtents) ProtoMessage()    {}
func (*BuildingExtents) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{3}
}
func (m *BuildingExtents) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BuildingExtents.Unmarshal(m, b)
}
func (m *BuildingExtents) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BuildingExtents.Marshal(b, m, deterministic)
}
func (dst *BuildingExtents) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildingExtents.Merge(dst, src)
}
func (m *BuildingExtents) XXX_Size() int {
	return xxx_messageInfo_BuildingExtents.Size(m)
}
func (m *BuildingExtents) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildingExtents.DiscardUnknown(m)
}

var xxx_messageInfo_BuildingExtents proto.InternalMessageInfo

func (m *BuildingExtents) GetPosX() int32 {
	if m != nil && m.PosX != nil {
		return *m.PosX
	}
	return 0
}

func (m *BuildingExtents) GetPosY() int32 {
	if m != nil && m.PosY != nil {
		return *m.PosY
	}
	return 0
}

func (m *BuildingExtents) GetWidth() int32 {
	if m != nil && m.Width != nil {
		return *m.Width
	}
	return 0
}

func (m *BuildingExtents) GetHeight() int32 {
	if m != nil && m.Height != nil {
		return *m.Height
	}
	return 0
}

func (m *BuildingExtents) GetExtents() []int32 {
	if m != nil {
		return m.Extents
	}
	return nil
}

type BuildingItem struct {
	Item                 *Item    `protobuf:"bytes,1,opt,name=item" json:"item,omitempty"`
	Mode                 *int32   `protobuf:"varint,2,opt,name=mode" json:"mode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BuildingItem) Reset()         { *m = BuildingItem{} }
func (m *BuildingItem) String() string { return proto.CompactTextString(m) }
func (*BuildingItem) ProtoMessage()    {}
func (*BuildingItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{4}
}
func (m *BuildingItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BuildingItem.Unmarshal(m, b)
}
func (m *BuildingItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BuildingItem.Marshal(b, m, deterministic)
}
func (dst *BuildingItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildingItem.Merge(dst, src)
}
func (m *BuildingItem) XXX_Size() int {
	return xxx_messageInfo_BuildingItem.Size(m)
}
func (m *BuildingItem) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildingItem.DiscardUnknown(m)
}

var xxx_messageInfo_BuildingItem proto.InternalMessageInfo

func (m *BuildingItem) GetItem() *Item {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *BuildingItem) GetMode() int32 {
	if m != nil && m.Mode != nil {
		return *m.Mode
	}
	return 0
}

type BuildingInstance struct {
	Index                *int32             `protobuf:"varint,1,req,name=index" json:"index,omitempty"`
	PosXMin              *int32             `protobuf:"varint,2,opt,name=pos_x_min,json=posXMin" json:"pos_x_min,omitempty"`
	PosYMin              *int32             `protobuf:"varint,3,opt,name=pos_y_min,json=posYMin" json:"pos_y_min,omitempty"`
	PosZMin              *int32             `protobuf:"varint,4,opt,name=pos_z_min,json=posZMin" json:"pos_z_min,omitempty"`
	PosXMax              *int32             `protobuf:"varint,5,opt,name=pos_x_max,json=posXMax" json:"pos_x_max,omitempty"`
	PosYMax              *int32             `protobuf:"varint,6,opt,name=pos_y_max,json=posYMax" json:"pos_y_max,omitempty"`
	PosZMax              *int32             `protobuf:"varint,7,opt,name=pos_z_max,json=posZMax" json:"pos_z_max,omitempty"`
	BuildingType         *BuildingType      `protobuf:"bytes,8,opt,name=building_type,json=buildingType" json:"building_type,omitempty"`
	Material             *MatPair           `protobuf:"bytes,9,opt,name=material" json:"material,omitempty"`
	BuildingFlags        *uint32            `protobuf:"varint,10,opt,name=building_flags,json=buildingFlags" json:"building_flags,omitempty"`
	IsRoom               *bool              `protobuf:"varint,11,opt,name=is_room,json=isRoom" json:"is_room,omitempty"`
	Room                 *BuildingExtents   `protobuf:"bytes,12,opt,name=room" json:"room,omitempty"`
	Direction            *BuildingDirection `protobuf:"varint,13,opt,name=direction,enum=RemoteFortressReader.BuildingDirection" json:"direction,omitempty"`
	Items                []*BuildingItem    `protobuf:"bytes,14,rep,name=items" json:"items,omitempty"`
	Active               *int32             `protobuf:"varint,15,opt,name=active" json:"active,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *BuildingInstance) Reset()         { *m = BuildingInstance{} }
func (m *BuildingInstance) String() string { return proto.CompactTextString(m) }
func (*BuildingInstance) ProtoMessage()    {}
func (*BuildingInstance) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{5}
}
func (m *BuildingInstance) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BuildingInstance.Unmarshal(m, b)
}
func (m *BuildingInstance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BuildingInstance.Marshal(b, m, deterministic)
}
func (dst *BuildingInstance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildingInstance.Merge(dst, src)
}
func (m *BuildingInstance) XXX_Size() int {
	return xxx_messageInfo_BuildingInstance.Size(m)
}
func (m *BuildingInstance) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildingInstance.DiscardUnknown(m)
}

var xxx_messageInfo_BuildingInstance proto.InternalMessageInfo

func (m *BuildingInstance) GetIndex() int32 {
	if m != nil && m.Index != nil {
		return *m.Index
	}
	return 0
}

func (m *BuildingInstance) GetPosXMin() int32 {
	if m != nil && m.PosXMin != nil {
		return *m.PosXMin
	}
	return 0
}

func (m *BuildingInstance) GetPosYMin() int32 {
	if m != nil && m.PosYMin != nil {
		return *m.PosYMin
	}
	return 0
}

func (m *BuildingInstance) GetPosZMin() int32 {
	if m != nil && m.PosZMin != nil {
		return *m.PosZMin
	}
	return 0
}

func (m *BuildingInstance) GetPosXMax() int32 {
	if m != nil && m.PosXMax != nil {
		return *m.PosXMax
	}
	return 0
}

func (m *BuildingInstance) GetPosYMax() int32 {
	if m != nil && m.PosYMax != nil {
		return *m.PosYMax
	}
	return 0
}

func (m *BuildingInstance) GetPosZMax() int32 {
	if m != nil && m.PosZMax != nil {
		return *m.PosZMax
	}
	return 0
}

func (m *BuildingInstance) GetBuildingType() *BuildingType {
	if m != nil {
		return m.BuildingType
	}
	return nil
}

func (m *BuildingInstance) GetMaterial() *MatPair {
	if m != nil {
		return m.Material
	}
	return nil
}

func (m *BuildingInstance) GetBuildingFlags() uint32 {
	if m != nil && m.BuildingFlags != nil {
		return *m.BuildingFlags
	}
	return 0
}

func (m *BuildingInstance) GetIsRoom() bool {
	if m != nil && m.IsRoom != nil {
		return *m.IsRoom
	}
	return false
}

func (m *BuildingInstance) GetRoom() *BuildingExtents {
	if m != nil {
		return m.Room
	}
	return nil
}

func (m *BuildingInstance) GetDirection() BuildingDirection {
	if m != nil && m.Direction != nil {
		return *m.Direction
	}
	return BuildingDirection_NORTH
}

func (m *BuildingInstance) GetItems() []*BuildingItem {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *BuildingInstance) GetActive() int32 {
	if m != nil && m.Active != nil {
		return *m.Active
	}
	return 0
}

type RiverEdge struct {
	MinPos               *int32   `protobuf:"varint,1,opt,name=min_pos,json=minPos" json:"min_pos,omitempty"`
	MaxPos               *int32   `protobuf:"varint,2,opt,name=max_pos,json=maxPos" json:"max_pos,omitempty"`
	Active               *int32   `protobuf:"varint,3,opt,name=active" json:"active,omitempty"`
	Elevation            *int32   `protobuf:"varint,4,opt,name=elevation" json:"elevation,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RiverEdge) Reset()         { *m = RiverEdge{} }
func (m *RiverEdge) String() string { return proto.CompactTextString(m) }
func (*RiverEdge) ProtoMessage()    {}
func (*RiverEdge) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{6}
}
func (m *RiverEdge) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RiverEdge.Unmarshal(m, b)
}
func (m *RiverEdge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RiverEdge.Marshal(b, m, deterministic)
}
func (dst *RiverEdge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RiverEdge.Merge(dst, src)
}
func (m *RiverEdge) XXX_Size() int {
	return xxx_messageInfo_RiverEdge.Size(m)
}
func (m *RiverEdge) XXX_DiscardUnknown() {
	xxx_messageInfo_RiverEdge.DiscardUnknown(m)
}

var xxx_messageInfo_RiverEdge proto.InternalMessageInfo

func (m *RiverEdge) GetMinPos() int32 {
	if m != nil && m.MinPos != nil {
		return *m.MinPos
	}
	return 0
}

func (m *RiverEdge) GetMaxPos() int32 {
	if m != nil && m.MaxPos != nil {
		return *m.MaxPos
	}
	return 0
}

func (m *RiverEdge) GetActive() int32 {
	if m != nil && m.Active != nil {
		return *m.Active
	}
	return 0
}

func (m *RiverEdge) GetElevation() int32 {
	if m != nil && m.Elevation != nil {
		return *m.Elevation
	}
	return 0
}

type RiverTile struct {
	North                *RiverEdge `protobuf:"bytes,1,opt,name=north" json:"north,omitempty"`
	South                *RiverEdge `protobuf:"bytes,2,opt,name=south" json:"south,omitempty"`
	East                 *RiverEdge `protobuf:"bytes,3,opt,name=east" json:"east,omitempty"`
	West                 *RiverEdge `protobuf:"bytes,4,opt,name=west" json:"west,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *RiverTile) Reset()         { *m = RiverTile{} }
func (m *RiverTile) String() string { return proto.CompactTextString(m) }
func (*RiverTile) ProtoMessage()    {}
func (*RiverTile) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{7}
}
func (m *RiverTile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RiverTile.Unmarshal(m, b)
}
func (m *RiverTile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RiverTile.Marshal(b, m, deterministic)
}
func (dst *RiverTile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RiverTile.Merge(dst, src)
}
func (m *RiverTile) XXX_Size() int {
	return xxx_messageInfo_RiverTile.Size(m)
}
func (m *RiverTile) XXX_DiscardUnknown() {
	xxx_messageInfo_RiverTile.DiscardUnknown(m)
}

var xxx_messageInfo_RiverTile proto.InternalMessageInfo

func (m *RiverTile) GetNorth() *RiverEdge {
	if m != nil {
		return m.North
	}
	return nil
}

func (m *RiverTile) GetSouth() *RiverEdge {
	if m != nil {
		return m.South
	}
	return nil
}

func (m *RiverTile) GetEast() *RiverEdge {
	if m != nil {
		return m.East
	}
	return nil
}

func (m *RiverTile) GetWest() *RiverEdge {
	if m != nil {
		return m.West
	}
	return nil
}

type Spatter struct {
	Material             *MatPair     `protobuf:"bytes,1,opt,name=material" json:"material,omitempty"`
	Amount               *int32       `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
	State                *MatterState `protobuf:"varint,3,opt,name=state,enum=RemoteFortressReader.MatterState" json:"state,omitempty"`
	Item                 *MatPair     `protobuf:"bytes,4,opt,name=item" json:"item,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Spatter) Reset()         { *m = Spatter{} }
func (m *Spatter) String() string { return proto.CompactTextString(m) }
func (*Spatter) ProtoMessage()    {}
func (*Spatter) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{8}
}
func (m *Spatter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Spatter.Unmarshal(m, b)
}
func (m *Spatter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Spatter.Marshal(b, m, deterministic)
}
func (dst *Spatter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Spatter.Merge(dst, src)
}
func (m *Spatter) XXX_Size() int {
	return xxx_messageInfo_Spatter.Size(m)
}
func (m *Spatter) XXX_DiscardUnknown() {
	xxx_messageInfo_Spatter.DiscardUnknown(m)
}

var xxx_messageInfo_Spatter proto.InternalMessageInfo

func (m *Spatter) GetMaterial() *MatPair {
	if m != nil {
		return m.Material
	}
	return nil
}

func (m *Spatter) GetAmount() int32 {
	if m != nil && m.Amount != nil {
		return *m.Amount
	}
	return 0
}

func (m *Spatter) GetState() MatterState {
	if m != nil && m.State != nil {
		return *m.State
	}
	return MatterState_Solid
}

func (m *Spatter) GetItem() *MatPair {
	if m != nil {
		return m.Item
	}
	return nil
}

type SpatterPile struct {
	Spatters             []*Spatter `protobuf:"bytes,1,rep,name=spatters" json:"spatters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *SpatterPile) Reset()         { *m = SpatterPile{} }
func (m *SpatterPile) String() string { return proto.CompactTextString(m) }
func (*SpatterPile) ProtoMessage()    {}
func (*SpatterPile) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{9}
}
func (m *SpatterPile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SpatterPile.Unmarshal(m, b)
}
func (m *SpatterPile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SpatterPile.Marshal(b, m, deterministic)
}
func (dst *SpatterPile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpatterPile.Merge(dst, src)
}
func (m *SpatterPile) XXX_Size() int {
	return xxx_messageInfo_SpatterPile.Size(m)
}
func (m *SpatterPile) XXX_DiscardUnknown() {
	xxx_messageInfo_SpatterPile.DiscardUnknown(m)
}

var xxx_messageInfo_SpatterPile proto.InternalMessageInfo

func (m *SpatterPile) GetSpatters() []*Spatter {
	if m != nil {
		return m.Spatters
	}
	return nil
}

type Item struct {
	Id                   *int32             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Pos                  *Coord             `protobuf:"bytes,2,opt,name=pos" json:"pos,omitempty"`
	Flags1               *uint32            `protobuf:"varint,3,opt,name=flags1" json:"flags1,omitempty"`
	Flags2               *uint32            `protobuf:"varint,4,opt,name=flags2" json:"flags2,omitempty"`
	Type                 *MatPair           `protobuf:"bytes,5,opt,name=type" json:"type,omitempty"`
	Material             *MatPair           `protobuf:"bytes,6,opt,name=material" json:"material,omitempty"`
	Dye                  *ColorDefinition   `protobuf:"bytes,7,opt,name=dye" json:"dye,omitempty"`
	StackSize            *int32             `protobuf:"varint,8,opt,name=stack_size,json=stackSize" json:"stack_size,omitempty"`
	SubposX              *float32           `protobuf:"fixed32,9,opt,name=subpos_x,json=subposX" json:"subpos_x,omitempty"`
	SubposY              *float32           `protobuf:"fixed32,10,opt,name=subpos_y,json=subposY" json:"subpos_y,omitempty"`
	SubposZ              *float32           `protobuf:"fixed32,11,opt,name=subpos_z,json=subposZ" json:"subpos_z,omitempty"`
	Projectile           *bool              `protobuf:"varint,12,opt,name=projectile" json:"projectile,omitempty"`
	VelocityX            *float32           `protobuf:"fixed32,13,opt,name=velocity_x,json=velocityX" json:"velocity_x,omitempty"`
	VelocityY            *float32           `protobuf:"fixed32,14,opt,name=velocity_y,json=velocityY" json:"velocity_y,omitempty"`
	VelocityZ            *float32           `protobuf:"fixed32,15,opt,name=velocity_z,json=velocityZ" json:"velocity_z,omitempty"`
	Volume               *int32             `protobuf:"varint,16,opt,name=volume" json:"volume,omitempty"`
	Improvements         []*ItemImprovement `protobuf:"bytes,17,rep,name=improvements" json:"improvements,omitempty"`
	Image                *ArtImage          `protobuf:"bytes,18,opt,name=image" json:"image,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Item) Reset()         { *m = Item{} }
func (m *Item) String() string { return proto.CompactTextString(m) }
func (*Item) ProtoMessage()    {}
func (*Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{10}
}
func (m *Item) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Item.Unmarshal(m, b)
}
func (m *Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Item.Marshal(b, m, deterministic)
}
func (dst *Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Item.Merge(dst, src)
}
func (m *Item) XXX_Size() int {
	return xxx_messageInfo_Item.Size(m)
}
func (m *Item) XXX_DiscardUnknown() {
	xxx_messageInfo_Item.DiscardUnknown(m)
}

var xxx_messageInfo_Item proto.InternalMessageInfo

func (m *Item) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Item) GetPos() *Coord {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *Item) GetFlags1() uint32 {
	if m != nil && m.Flags1 != nil {
		return *m.Flags1
	}
	return 0
}

func (m *Item) GetFlags2() uint32 {
	if m != nil && m.Flags2 != nil {
		return *m.Flags2
	}
	return 0
}

func (m *Item) GetType() *MatPair {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *Item) GetMaterial() *MatPair {
	if m != nil {
		return m.Material
	}
	return nil
}

func (m *Item) GetDye() *ColorDefinition {
	if m != nil {
		return m.Dye
	}
	return nil
}

func (m *Item) GetStackSize() int32 {
	if m != nil && m.StackSize != nil {
		return *m.StackSize
	}
	return 0
}

func (m *Item) GetSubposX() float32 {
	if m != nil && m.SubposX != nil {
		return *m.SubposX
	}
	return 0
}

func (m *Item) GetSubposY() float32 {
	if m != nil && m.SubposY != nil {
		return *m.SubposY
	}
	return 0
}

func (m *Item) GetSubposZ() float32 {
	if m != nil && m.SubposZ != nil {
		return *m.SubposZ
	}
	return 0
}

func (m *Item) GetProjectile() bool {
	if m != nil && m.Projectile != nil {
		return *m.Projectile
	}
	return false
}

func (m *Item) GetVelocityX() float32 {
	if m != nil && m.VelocityX != nil {
		return *m.VelocityX
	}
	return 0
}

func (m *Item) GetVelocityY() float32 {
	if m != nil && m.VelocityY != nil {
		return *m.VelocityY
	}
	return 0
}

func (m *Item) GetVelocityZ() float32 {
	if m != nil && m.VelocityZ != nil {
		return *m.VelocityZ
	}
	return 0
}

func (m *Item) GetVolume() int32 {
	if m != nil && m.Volume != nil {
		return *m.Volume
	}
	return 0
}

func (m *Item) GetImprovements() []*ItemImprovement {
	if m != nil {
		return m.Improvements
	}
	return nil
}

func (m *Item) GetImage() *ArtImage {
	if m != nil {
		return m.Image
	}
	return nil
}

type MapBlock struct {
	MapX                     *int32               `protobuf:"varint,1,req,name=map_x,json=mapX" json:"map_x,omitempty"`
	MapY                     *int32               `protobuf:"varint,2,req,name=map_y,json=mapY" json:"map_y,omitempty"`
	MapZ                     *int32               `protobuf:"varint,3,req,name=map_z,json=mapZ" json:"map_z,omitempty"`
	Tiles                    []int32              `protobuf:"varint,4,rep,name=tiles" json:"tiles,omitempty"`
	Materials                []*MatPair           `protobuf:"bytes,5,rep,name=materials" json:"materials,omitempty"`
	LayerMaterials           []*MatPair           `protobuf:"bytes,6,rep,name=layer_materials,json=layerMaterials" json:"layer_materials,omitempty"`
	VeinMaterials            []*MatPair           `protobuf:"bytes,7,rep,name=vein_materials,json=veinMaterials" json:"vein_materials,omitempty"`
	BaseMaterials            []*MatPair           `protobuf:"bytes,8,rep,name=base_materials,json=baseMaterials" json:"base_materials,omitempty"`
	Magma                    []int32              `protobuf:"varint,9,rep,name=magma" json:"magma,omitempty"`
	Water                    []int32              `protobuf:"varint,10,rep,name=water" json:"water,omitempty"`
	Hidden                   []bool               `protobuf:"varint,11,rep,name=hidden" json:"hidden,omitempty"`
	Light                    []bool               `protobuf:"varint,12,rep,name=light" json:"light,omitempty"`
	Subterranean             []bool               `protobuf:"varint,13,rep,name=subterranean" json:"subterranean,omitempty"`
	Outside                  []bool               `protobuf:"varint,14,rep,name=outside" json:"outside,omitempty"`
	Aquifer                  []bool               `protobuf:"varint,15,rep,name=aquifer" json:"aquifer,omitempty"`
	WaterStagnant            []bool               `protobuf:"varint,16,rep,name=water_stagnant,json=waterStagnant" json:"water_stagnant,omitempty"`
	WaterSalt                []bool               `protobuf:"varint,17,rep,name=water_salt,json=waterSalt" json:"water_salt,omitempty"`
	ConstructionItems        []*MatPair           `protobuf:"bytes,18,rep,name=construction_items,json=constructionItems" json:"construction_items,omitempty"`
	Buildings                []*BuildingInstance  `protobuf:"bytes,19,rep,name=buildings" json:"buildings,omitempty"`
	TreePercent              []int32              `protobuf:"varint,20,rep,name=tree_percent,json=treePercent" json:"tree_percent,omitempty"`
	TreeX                    []int32              `protobuf:"varint,21,rep,name=tree_x,json=treeX" json:"tree_x,omitempty"`
	TreeY                    []int32              `protobuf:"varint,22,rep,name=tree_y,json=treeY" json:"tree_y,omitempty"`
	TreeZ                    []int32              `protobuf:"varint,23,rep,name=tree_z,json=treeZ" json:"tree_z,omitempty"`
	TileDigDesignation       []TileDigDesignation `protobuf:"varint,24,rep,name=tile_dig_designation,json=tileDigDesignation,enum=RemoteFortressReader.TileDigDesignation" json:"tile_dig_designation,omitempty"`
	SpatterPile              []*SpatterPile       `protobuf:"bytes,25,rep,name=spatterPile" json:"spatterPile,omitempty"`
	Items                    []*Item              `protobuf:"bytes,26,rep,name=items" json:"items,omitempty"`
	TileDigDesignationMarker []bool               `protobuf:"varint,27,rep,name=tile_dig_designation_marker,json=tileDigDesignationMarker" json:"tile_dig_designation_marker,omitempty"`
	TileDigDesignationAuto   []bool               `protobuf:"varint,28,rep,name=tile_dig_designation_auto,json=tileDigDesignationAuto" json:"tile_dig_designation_auto,omitempty"`
	GrassPercent             []int32              `protobuf:"varint,29,rep,name=grass_percent,json=grassPercent" json:"grass_percent,omitempty"`
	Flows                    []*FlowInfo          `protobuf:"bytes,30,rep,name=flows" json:"flows,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}             `json:"-"`
	XXX_unrecognized         []byte               `json:"-"`
	XXX_sizecache            int32                `json:"-"`
}

func (m *MapBlock) Reset()         { *m = MapBlock{} }
func (m *MapBlock) String() string { return proto.CompactTextString(m) }
func (*MapBlock) ProtoMessage()    {}
func (*MapBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{11}
}
func (m *MapBlock) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MapBlock.Unmarshal(m, b)
}
func (m *MapBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MapBlock.Marshal(b, m, deterministic)
}
func (dst *MapBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapBlock.Merge(dst, src)
}
func (m *MapBlock) XXX_Size() int {
	return xxx_messageInfo_MapBlock.Size(m)
}
func (m *MapBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_MapBlock.DiscardUnknown(m)
}

var xxx_messageInfo_MapBlock proto.InternalMessageInfo

func (m *MapBlock) GetMapX() int32 {
	if m != nil && m.MapX != nil {
		return *m.MapX
	}
	return 0
}

func (m *MapBlock) GetMapY() int32 {
	if m != nil && m.MapY != nil {
		return *m.MapY
	}
	return 0
}

func (m *MapBlock) GetMapZ() int32 {
	if m != nil && m.MapZ != nil {
		return *m.MapZ
	}
	return 0
}

func (m *MapBlock) GetTiles() []int32 {
	if m != nil {
		return m.Tiles
	}
	return nil
}

func (m *MapBlock) GetMaterials() []*MatPair {
	if m != nil {
		return m.Materials
	}
	return nil
}

func (m *MapBlock) GetLayerMaterials() []*MatPair {
	if m != nil {
		return m.LayerMaterials
	}
	return nil
}

func (m *MapBlock) GetVeinMaterials() []*MatPair {
	if m != nil {
		return m.VeinMaterials
	}
	return nil
}

func (m *MapBlock) GetBaseMaterials() []*MatPair {
	if m != nil {
		return m.BaseMaterials
	}
	return nil
}

func (m *MapBlock) GetMagma() []int32 {
	if m != nil {
		return m.Magma
	}
	return nil
}

func (m *MapBlock) GetWater() []int32 {
	if m != nil {
		return m.Water
	}
	return nil
}

func (m *MapBlock) GetHidden() []bool {
	if m != nil {
		return m.Hidden
	}
	return nil
}

func (m *MapBlock) GetLight() []bool {
	if m != nil {
		return m.Light
	}
	return nil
}

func (m *MapBlock) GetSubterranean() []bool {
	if m != nil {
		return m.Subterranean
	}
	return nil
}

func (m *MapBlock) GetOutside() []bool {
	if m != nil {
		return m.Outside
	}
	return nil
}

func (m *MapBlock) GetAquifer() []bool {
	if m != nil {
		return m.Aquifer
	}
	return nil
}

func (m *MapBlock) GetWaterStagnant() []bool {
	if m != nil {
		return m.WaterStagnant
	}
	return nil
}

func (m *MapBlock) GetWaterSalt() []bool {
	if m != nil {
		return m.WaterSalt
	}
	return nil
}

func (m *MapBlock) GetConstructionItems() []*MatPair {
	if m != nil {
		return m.ConstructionItems
	}
	return nil
}

func (m *MapBlock) GetBuildings() []*BuildingInstance {
	if m != nil {
		return m.Buildings
	}
	return nil
}

func (m *MapBlock) GetTreePercent() []int32 {
	if m != nil {
		return m.TreePercent
	}
	return nil
}

func (m *MapBlock) GetTreeX() []int32 {
	if m != nil {
		return m.TreeX
	}
	return nil
}

func (m *MapBlock) GetTreeY() []int32 {
	if m != nil {
		return m.TreeY
	}
	return nil
}

func (m *MapBlock) GetTreeZ() []int32 {
	if m != nil {
		return m.TreeZ
	}
	return nil
}

func (m *MapBlock) GetTileDigDesignation() []TileDigDesignation {
	if m != nil {
		return m.TileDigDesignation
	}
	return nil
}

func (m *MapBlock) GetSpatterPile() []*SpatterPile {
	if m != nil {
		return m.SpatterPile
	}
	return nil
}

func (m *MapBlock) GetItems() []*Item {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *MapBlock) GetTileDigDesignationMarker() []bool {
	if m != nil {
		return m.TileDigDesignationMarker
	}
	return nil
}

func (m *MapBlock) GetTileDigDesignationAuto() []bool {
	if m != nil {
		return m.TileDigDesignationAuto
	}
	return nil
}

func (m *MapBlock) GetGrassPercent() []int32 {
	if m != nil {
		return m.GrassPercent
	}
	return nil
}

func (m *MapBlock) GetFlows() []*FlowInfo {
	if m != nil {
		return m.Flows
	}
	return nil
}

type MatPair struct {
	MatType              *int32   `protobuf:"varint,1,req,name=mat_type,json=matType" json:"mat_type,omitempty"`
	MatIndex             *int32   `protobuf:"varint,2,req,name=mat_index,json=matIndex" json:"mat_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MatPair) Reset()         { *m = MatPair{} }
func (m *MatPair) String() string { return proto.CompactTextString(m) }
func (*MatPair) ProtoMessage()    {}
func (*MatPair) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{12}
}
func (m *MatPair) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MatPair.Unmarshal(m, b)
}
func (m *MatPair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MatPair.Marshal(b, m, deterministic)
}
func (dst *MatPair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatPair.Merge(dst, src)
}
func (m *MatPair) XXX_Size() int {
	return xxx_messageInfo_MatPair.Size(m)
}
func (m *MatPair) XXX_DiscardUnknown() {
	xxx_messageInfo_MatPair.DiscardUnknown(m)
}

var xxx_messageInfo_MatPair proto.InternalMessageInfo

func (m *MatPair) GetMatType() int32 {
	if m != nil && m.MatType != nil {
		return *m.MatType
	}
	return 0
}

func (m *MatPair) GetMatIndex() int32 {
	if m != nil && m.MatIndex != nil {
		return *m.MatIndex
	}
	return 0
}

type ColorDefinition struct {
	Red                  *int32   `protobuf:"varint,1,req,name=red" json:"red,omitempty"`
	Green                *int32   `protobuf:"varint,2,req,name=green" json:"green,omitempty"`
	Blue                 *int32   `protobuf:"varint,3,req,name=blue" json:"blue,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ColorDefinition) Reset()         { *m = ColorDefinition{} }
func (m *ColorDefinition) String() string { return proto.CompactTextString(m) }
func (*ColorDefinition) ProtoMessage()    {}
func (*ColorDefinition) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{13}
}
func (m *ColorDefinition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ColorDefinition.Unmarshal(m, b)
}
func (m *ColorDefinition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ColorDefinition.Marshal(b, m, deterministic)
}
func (dst *ColorDefinition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ColorDefinition.Merge(dst, src)
}
func (m *ColorDefinition) XXX_Size() int {
	return xxx_messageInfo_ColorDefinition.Size(m)
}
func (m *ColorDefinition) XXX_DiscardUnknown() {
	xxx_messageInfo_ColorDefinition.DiscardUnknown(m)
}

var xxx_messageInfo_ColorDefinition proto.InternalMessageInfo

func (m *ColorDefinition) GetRed() int32 {
	if m != nil && m.Red != nil {
		return *m.Red
	}
	return 0
}

func (m *ColorDefinition) GetGreen() int32 {
	if m != nil && m.Green != nil {
		return *m.Green
	}
	return 0
}

func (m *ColorDefinition) GetBlue() int32 {
	if m != nil && m.Blue != nil {
		return *m.Blue
	}
	return 0
}

type MaterialDefinition struct {
	MatPair              *MatPair         `protobuf:"bytes,1,req,name=mat_pair,json=matPair" json:"mat_pair,omitempty"`
	Id                   *string          `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Name                 *string          `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	StateColor           *ColorDefinition `protobuf:"bytes,4,opt,name=state_color,json=stateColor" json:"state_color,omitempty"`
	Instrument           *InstrumentDef   `protobuf:"bytes,5,opt,name=instrument" json:"instrument,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *MaterialDefinition) Reset()         { *m = MaterialDefinition{} }
func (m *MaterialDefinition) String() string { return proto.CompactTextString(m) }
func (*MaterialDefinition) ProtoMessage()    {}
func (*MaterialDefinition) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{14}
}
func (m *MaterialDefinition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MaterialDefinition.Unmarshal(m, b)
}
func (m *MaterialDefinition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MaterialDefinition.Marshal(b, m, deterministic)
}
func (dst *MaterialDefinition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MaterialDefinition.Merge(dst, src)
}
func (m *MaterialDefinition) XXX_Size() int {
	return xxx_messageInfo_MaterialDefinition.Size(m)
}
func (m *MaterialDefinition) XXX_DiscardUnknown() {
	xxx_messageInfo_MaterialDefinition.DiscardUnknown(m)
}

var xxx_messageInfo_MaterialDefinition proto.InternalMessageInfo

func (m *MaterialDefinition) GetMatPair() *MatPair {
	if m != nil {
		return m.MatPair
	}
	return nil
}

func (m *MaterialDefinition) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *MaterialDefinition) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *MaterialDefinition) GetStateColor() *ColorDefinition {
	if m != nil {
		return m.StateColor
	}
	return nil
}

func (m *MaterialDefinition) GetInstrument() *InstrumentDef {
	if m != nil {
		return m.Instrument
	}
	return nil
}

type BuildingType struct {
	BuildingType         *int32   `protobuf:"varint,1,req,name=building_type,json=buildingType" json:"building_type,omitempty"`
	BuildingSubtype      *int32   `protobuf:"varint,2,req,name=building_subtype,json=buildingSubtype" json:"building_subtype,omitempty"`
	BuildingCustom       *int32   `protobuf:"varint,3,req,name=building_custom,json=buildingCustom" json:"building_custom,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BuildingType) Reset()         { *m = BuildingType{} }
func (m *BuildingType) String() string { return proto.CompactTextString(m) }
func (*BuildingType) ProtoMessage()    {}
func (*BuildingType) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{15}
}
func (m *BuildingType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BuildingType.Unmarshal(m, b)
}
func (m *BuildingType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BuildingType.Marshal(b, m, deterministic)
}
func (dst *BuildingType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildingType.Merge(dst, src)
}
func (m *BuildingType) XXX_Size() int {
	return xxx_messageInfo_BuildingType.Size(m)
}
func (m *BuildingType) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildingType.DiscardUnknown(m)
}

var xxx_messageInfo_BuildingType proto.InternalMessageInfo

func (m *BuildingType) GetBuildingType() int32 {
	if m != nil && m.BuildingType != nil {
		return *m.BuildingType
	}
	return 0
}

func (m *BuildingType) GetBuildingSubtype() int32 {
	if m != nil && m.BuildingSubtype != nil {
		return *m.BuildingSubtype
	}
	return 0
}

func (m *BuildingType) GetBuildingCustom() int32 {
	if m != nil && m.BuildingCustom != nil {
		return *m.BuildingCustom
	}
	return 0
}

type BuildingDefinition struct {
	BuildingType         *BuildingType `protobuf:"bytes,1,req,name=building_type,json=buildingType" json:"building_type,omitempty"`
	Id                   *string       `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Name                 *string       `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *BuildingDefinition) Reset()         { *m = BuildingDefinition{} }
func (m *BuildingDefinition) String() string { return proto.CompactTextString(m) }
func (*BuildingDefinition) ProtoMessage()    {}
func (*BuildingDefinition) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{16}
}
func (m *BuildingDefinition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BuildingDefinition.Unmarshal(m, b)
}
func (m *BuildingDefinition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BuildingDefinition.Marshal(b, m, deterministic)
}
func (dst *BuildingDefinition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildingDefinition.Merge(dst, src)
}
func (m *BuildingDefinition) XXX_Size() int {
	return xxx_messageInfo_BuildingDefinition.Size(m)
}
func (m *BuildingDefinition) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildingDefinition.DiscardUnknown(m)
}

var xxx_messageInfo_BuildingDefinition proto.InternalMessageInfo

func (m *BuildingDefinition) GetBuildingType() *BuildingType {
	if m != nil {
		return m.BuildingType
	}
	return nil
}

func (m *BuildingDefinition) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *BuildingDefinition) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

type BuildingList struct {
	BuildingList         []*BuildingDefinition `protobuf:"bytes,1,rep,name=building_list,json=buildingList" json:"building_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *BuildingList) Reset()         { *m = BuildingList{} }
func (m *BuildingList) String() string { return proto.CompactTextString(m) }
func (*BuildingList) ProtoMessage()    {}
func (*BuildingList) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{17}
}
func (m *BuildingList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BuildingList.Unmarshal(m, b)
}
func (m *BuildingList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BuildingList.Marshal(b, m, deterministic)
}
func (dst *BuildingList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildingList.Merge(dst, src)
}
func (m *BuildingList) XXX_Size() int {
	return xxx_messageInfo_BuildingList.Size(m)
}
func (m *BuildingList) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildingList.DiscardUnknown(m)
}

var xxx_messageInfo_BuildingList proto.InternalMessageInfo

func (m *BuildingList) GetBuildingList() []*BuildingDefinition {
	if m != nil {
		return m.BuildingList
	}
	return nil
}

type MaterialList struct {
	MaterialList         []*MaterialDefinition `protobuf:"bytes,1,rep,name=material_list,json=materialList" json:"material_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *MaterialList) Reset()         { *m = MaterialList{} }
func (m *MaterialList) String() string { return proto.CompactTextString(m) }
func (*MaterialList) ProtoMessage()    {}
func (*MaterialList) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{18}
}
func (m *MaterialList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MaterialList.Unmarshal(m, b)
}
func (m *MaterialList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MaterialList.Marshal(b, m, deterministic)
}
func (dst *MaterialList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MaterialList.Merge(dst, src)
}
func (m *MaterialList) XXX_Size() int {
	return xxx_messageInfo_MaterialList.Size(m)
}
func (m *MaterialList) XXX_DiscardUnknown() {
	xxx_messageInfo_MaterialList.DiscardUnknown(m)
}

var xxx_messageInfo_MaterialList proto.InternalMessageInfo

func (m *MaterialList) GetMaterialList() []*MaterialDefinition {
	if m != nil {
		return m.MaterialList
	}
	return nil
}

type Hair struct {
	Length               *int32     `protobuf:"varint,1,opt,name=length" json:"length,omitempty"`
	Style                *HairStyle `protobuf:"varint,2,opt,name=style,enum=RemoteFortressReader.HairStyle" json:"style,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Hair) Reset()         { *m = Hair{} }
func (m *Hair) String() string { return proto.CompactTextString(m) }
func (*Hair) ProtoMessage()    {}
func (*Hair) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{19}
}
func (m *Hair) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Hair.Unmarshal(m, b)
}
func (m *Hair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Hair.Marshal(b, m, deterministic)
}
func (dst *Hair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Hair.Merge(dst, src)
}
func (m *Hair) XXX_Size() int {
	return xxx_messageInfo_Hair.Size(m)
}
func (m *Hair) XXX_DiscardUnknown() {
	xxx_messageInfo_Hair.DiscardUnknown(m)
}

var xxx_messageInfo_Hair proto.InternalMessageInfo

func (m *Hair) GetLength() int32 {
	if m != nil && m.Length != nil {
		return *m.Length
	}
	return 0
}

func (m *Hair) GetStyle() HairStyle {
	if m != nil && m.Style != nil {
		return *m.Style
	}
	return HairStyle_UNKEMPT
}

type BodySizeInfo struct {
	SizeCur              *int32   `protobuf:"varint,1,opt,name=size_cur,json=sizeCur" json:"size_cur,omitempty"`
	SizeBase             *int32   `protobuf:"varint,2,opt,name=size_base,json=sizeBase" json:"size_base,omitempty"`
	AreaCur              *int32   `protobuf:"varint,3,opt,name=area_cur,json=areaCur" json:"area_cur,omitempty"`
	AreaBase             *int32   `protobuf:"varint,4,opt,name=area_base,json=areaBase" json:"area_base,omitempty"`
	LengthCur            *int32   `protobuf:"varint,5,opt,name=length_cur,json=lengthCur" json:"length_cur,omitempty"`
	LengthBase           *int32   `protobuf:"varint,6,opt,name=length_base,json=lengthBase" json:"length_base,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BodySizeInfo) Reset()         { *m = BodySizeInfo{} }
func (m *BodySizeInfo) String() string { return proto.CompactTextString(m) }
func (*BodySizeInfo) ProtoMessage()    {}
func (*BodySizeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{20}
}
func (m *BodySizeInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BodySizeInfo.Unmarshal(m, b)
}
func (m *BodySizeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BodySizeInfo.Marshal(b, m, deterministic)
}
func (dst *BodySizeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BodySizeInfo.Merge(dst, src)
}
func (m *BodySizeInfo) XXX_Size() int {
	return xxx_messageInfo_BodySizeInfo.Size(m)
}
func (m *BodySizeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BodySizeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BodySizeInfo proto.InternalMessageInfo

func (m *BodySizeInfo) GetSizeCur() int32 {
	if m != nil && m.SizeCur != nil {
		return *m.SizeCur
	}
	return 0
}

func (m *BodySizeInfo) GetSizeBase() int32 {
	if m != nil && m.SizeBase != nil {
		return *m.SizeBase
	}
	return 0
}

func (m *BodySizeInfo) GetAreaCur() int32 {
	if m != nil && m.AreaCur != nil {
		return *m.AreaCur
	}
	return 0
}

func (m *BodySizeInfo) GetAreaBase() int32 {
	if m != nil && m.AreaBase != nil {
		return *m.AreaBase
	}
	return 0
}

func (m *BodySizeInfo) GetLengthCur() int32 {
	if m != nil && m.LengthCur != nil {
		return *m.LengthCur
	}
	return 0
}

func (m *BodySizeInfo) GetLengthBase() int32 {
	if m != nil && m.LengthBase != nil {
		return *m.LengthBase
	}
	return 0
}

type UnitAppearance struct {
	BodyModifiers        []int32  `protobuf:"varint,1,rep,name=body_modifiers,json=bodyModifiers" json:"body_modifiers,omitempty"`
	BpModifiers          []int32  `protobuf:"varint,2,rep,name=bp_modifiers,json=bpModifiers" json:"bp_modifiers,omitempty"`
	SizeModifier         *int32   `protobuf:"varint,3,opt,name=size_modifier,json=sizeModifier" json:"size_modifier,omitempty"`
	Colors               []int32  `protobuf:"varint,4,rep,name=colors" json:"colors,omitempty"`
	Hair                 *Hair    `protobuf:"bytes,5,opt,name=hair" json:"hair,omitempty"`
	Beard                *Hair    `protobuf:"bytes,6,opt,name=beard" json:"beard,omitempty"`
	Moustache            *Hair    `protobuf:"bytes,7,opt,name=moustache" json:"moustache,omitempty"`
	Sideburns            *Hair    `protobuf:"bytes,8,opt,name=sideburns" json:"sideburns,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnitAppearance) Reset()         { *m = UnitAppearance{} }
func (m *UnitAppearance) String() string { return proto.CompactTextString(m) }
func (*UnitAppearance) ProtoMessage()    {}
func (*UnitAppearance) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{21}
}
func (m *UnitAppearance) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnitAppearance.Unmarshal(m, b)
}
func (m *UnitAppearance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnitAppearance.Marshal(b, m, deterministic)
}
func (dst *UnitAppearance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnitAppearance.Merge(dst, src)
}
func (m *UnitAppearance) XXX_Size() int {
	return xxx_messageInfo_UnitAppearance.Size(m)
}
func (m *UnitAppearance) XXX_DiscardUnknown() {
	xxx_messageInfo_UnitAppearance.DiscardUnknown(m)
}

var xxx_messageInfo_UnitAppearance proto.InternalMessageInfo

func (m *UnitAppearance) GetBodyModifiers() []int32 {
	if m != nil {
		return m.BodyModifiers
	}
	return nil
}

func (m *UnitAppearance) GetBpModifiers() []int32 {
	if m != nil {
		return m.BpModifiers
	}
	return nil
}

func (m *UnitAppearance) GetSizeModifier() int32 {
	if m != nil && m.SizeModifier != nil {
		return *m.SizeModifier
	}
	return 0
}

func (m *UnitAppearance) GetColors() []int32 {
	if m != nil {
		return m.Colors
	}
	return nil
}

func (m *UnitAppearance) GetHair() *Hair {
	if m != nil {
		return m.Hair
	}
	return nil
}

func (m *UnitAppearance) GetBeard() *Hair {
	if m != nil {
		return m.Beard
	}
	return nil
}

func (m *UnitAppearance) GetMoustache() *Hair {
	if m != nil {
		return m.Moustache
	}
	return nil
}

func (m *UnitAppearance) GetSideburns() *Hair {
	if m != nil {
		return m.Sideburns
	}
	return nil
}

type InventoryItem struct {
	Mode                 *InventoryMode `protobuf:"varint,1,opt,name=mode,enum=RemoteFortressReader.InventoryMode" json:"mode,omitempty"`
	Item                 *Item          `protobuf:"bytes,2,opt,name=item" json:"item,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *InventoryItem) Reset()         { *m = InventoryItem{} }
func (m *InventoryItem) String() string { return proto.CompactTextString(m) }
func (*InventoryItem) ProtoMessage()    {}
func (*InventoryItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{22}
}
func (m *InventoryItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InventoryItem.Unmarshal(m, b)
}
func (m *InventoryItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InventoryItem.Marshal(b, m, deterministic)
}
func (dst *InventoryItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InventoryItem.Merge(dst, src)
}
func (m *InventoryItem) XXX_Size() int {
	return xxx_messageInfo_InventoryItem.Size(m)
}
func (m *InventoryItem) XXX_DiscardUnknown() {
	xxx_messageInfo_InventoryItem.DiscardUnknown(m)
}

var xxx_messageInfo_InventoryItem proto.InternalMessageInfo

func (m *InventoryItem) GetMode() InventoryMode {
	if m != nil && m.Mode != nil {
		return *m.Mode
	}
	return InventoryMode_Hauled
}

func (m *InventoryItem) GetItem() *Item {
	if m != nil {
		return m.Item
	}
	return nil
}

type UnitDefinition struct {
	Id                   *int32           `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	IsValid              *bool            `protobuf:"varint,2,opt,name=isValid" json:"isValid,omitempty"`
	PosX                 *int32           `protobuf:"varint,3,opt,name=pos_x,json=posX" json:"pos_x,omitempty"`
	PosY                 *int32           `protobuf:"varint,4,opt,name=pos_y,json=posY" json:"pos_y,omitempty"`
	PosZ                 *int32           `protobuf:"varint,5,opt,name=pos_z,json=posZ" json:"pos_z,omitempty"`
	Race                 *MatPair         `protobuf:"bytes,6,opt,name=race" json:"race,omitempty"`
	ProfessionColor      *ColorDefinition `protobuf:"bytes,7,opt,name=profession_color,json=professionColor" json:"profession_color,omitempty"`
	Flags1               *uint32          `protobuf:"varint,8,opt,name=flags1" json:"flags1,omitempty"`
	Flags2               *uint32          `protobuf:"varint,9,opt,name=flags2" json:"flags2,omitempty"`
	Flags3               *uint32          `protobuf:"varint,10,opt,name=flags3" json:"flags3,omitempty"`
	IsSoldier            *bool            `protobuf:"varint,11,opt,name=is_soldier,json=isSoldier" json:"is_soldier,omitempty"`
	SizeInfo             *BodySizeInfo    `protobuf:"bytes,12,opt,name=size_info,json=sizeInfo" json:"size_info,omitempty"`
	Name                 *string          `protobuf:"bytes,13,opt,name=name" json:"name,omitempty"`
	BloodMax             *int32           `protobuf:"varint,14,opt,name=blood_max,json=bloodMax" json:"blood_max,omitempty"`
	BloodCount           *int32           `protobuf:"varint,15,opt,name=blood_count,json=bloodCount" json:"blood_count,omitempty"`
	Appearance           *UnitAppearance  `protobuf:"bytes,16,opt,name=appearance" json:"appearance,omitempty"`
	ProfessionId         *int32           `protobuf:"varint,17,opt,name=profession_id,json=professionId" json:"profession_id,omitempty"`
	NoblePositions       []string         `protobuf:"bytes,18,rep,name=noble_positions,json=noblePositions" json:"noble_positions,omitempty"`
	RiderId              *int32           `protobuf:"varint,19,opt,name=rider_id,json=riderId" json:"rider_id,omitempty"`
	Inventory            []*InventoryItem `protobuf:"bytes,20,rep,name=inventory" json:"inventory,omitempty"`
	SubposX              *float32         `protobuf:"fixed32,21,opt,name=subpos_x,json=subposX" json:"subpos_x,omitempty"`
	SubposY              *float32         `protobuf:"fixed32,22,opt,name=subpos_y,json=subposY" json:"subpos_y,omitempty"`
	SubposZ              *float32         `protobuf:"fixed32,23,opt,name=subpos_z,json=subposZ" json:"subpos_z,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *UnitDefinition) Reset()         { *m = UnitDefinition{} }
func (m *UnitDefinition) String() string { return proto.CompactTextString(m) }
func (*UnitDefinition) ProtoMessage()    {}
func (*UnitDefinition) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{23}
}
func (m *UnitDefinition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnitDefinition.Unmarshal(m, b)
}
func (m *UnitDefinition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnitDefinition.Marshal(b, m, deterministic)
}
func (dst *UnitDefinition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnitDefinition.Merge(dst, src)
}
func (m *UnitDefinition) XXX_Size() int {
	return xxx_messageInfo_UnitDefinition.Size(m)
}
func (m *UnitDefinition) XXX_DiscardUnknown() {
	xxx_messageInfo_UnitDefinition.DiscardUnknown(m)
}

var xxx_messageInfo_UnitDefinition proto.InternalMessageInfo

func (m *UnitDefinition) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *UnitDefinition) GetIsValid() bool {
	if m != nil && m.IsValid != nil {
		return *m.IsValid
	}
	return false
}

func (m *UnitDefinition) GetPosX() int32 {
	if m != nil && m.PosX != nil {
		return *m.PosX
	}
	return 0
}

func (m *UnitDefinition) GetPosY() int32 {
	if m != nil && m.PosY != nil {
		return *m.PosY
	}
	return 0
}

func (m *UnitDefinition) GetPosZ() int32 {
	if m != nil && m.PosZ != nil {
		return *m.PosZ
	}
	return 0
}

func (m *UnitDefinition) GetRace() *MatPair {
	if m != nil {
		return m.Race
	}
	return nil
}

func (m *UnitDefinition) GetProfessionColor() *ColorDefinition {
	if m != nil {
		return m.ProfessionColor
	}
	return nil
}

func (m *UnitDefinition) GetFlags1() uint32 {
	if m != nil && m.Flags1 != nil {
		return *m.Flags1
	}
	return 0
}

func (m *UnitDefinition) GetFlags2() uint32 {
	if m != nil && m.Flags2 != nil {
		return *m.Flags2
	}
	return 0
}

func (m *UnitDefinition) GetFlags3() uint32 {
	if m != nil && m.Flags3 != nil {
		return *m.Flags3
	}
	return 0
}

func (m *UnitDefinition) GetIsSoldier() bool {
	if m != nil && m.IsSoldier != nil {
		return *m.IsSoldier
	}
	return false
}

func (m *UnitDefinition) GetSizeInfo() *BodySizeInfo {
	if m != nil {
		return m.SizeInfo
	}
	return nil
}

func (m *UnitDefinition) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *UnitDefinition) GetBloodMax() int32 {
	if m != nil && m.BloodMax != nil {
		return *m.BloodMax
	}
	return 0
}

func (m *UnitDefinition) GetBloodCount() int32 {
	if m != nil && m.BloodCount != nil {
		return *m.BloodCount
	}
	return 0
}

func (m *UnitDefinition) GetAppearance() *UnitAppearance {
	if m != nil {
		return m.Appearance
	}
	return nil
}

func (m *UnitDefinition) GetProfessionId() int32 {
	if m != nil && m.ProfessionId != nil {
		return *m.ProfessionId
	}
	return 0
}

func (m *UnitDefinition) GetNoblePositions() []string {
	if m != nil {
		return m.NoblePositions
	}
	return nil
}

func (m *UnitDefinition) GetRiderId() int32 {
	if m != nil && m.RiderId != nil {
		return *m.RiderId
	}
	return 0
}

func (m *UnitDefinition) GetInventory() []*InventoryItem {
	if m != nil {
		return m.Inventory
	}
	return nil
}

func (m *UnitDefinition) GetSubposX() float32 {
	if m != nil && m.SubposX != nil {
		return *m.SubposX
	}
	return 0
}

func (m *UnitDefinition) GetSubposY() float32 {
	if m != nil && m.SubposY != nil {
		return *m.SubposY
	}
	return 0
}

func (m *UnitDefinition) GetSubposZ() float32 {
	if m != nil && m.SubposZ != nil {
		return *m.SubposZ
	}
	return 0
}

type UnitList struct {
	CreatureList         []*UnitDefinition `protobuf:"bytes,1,rep,name=creature_list,json=creatureList" json:"creature_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *UnitList) Reset()         { *m = UnitList{} }
func (m *UnitList) String() string { return proto.CompactTextString(m) }
func (*UnitList) ProtoMessage()    {}
func (*UnitList) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{24}
}
func (m *UnitList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnitList.Unmarshal(m, b)
}
func (m *UnitList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnitList.Marshal(b, m, deterministic)
}
func (dst *UnitList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnitList.Merge(dst, src)
}
func (m *UnitList) XXX_Size() int {
	return xxx_messageInfo_UnitList.Size(m)
}
func (m *UnitList) XXX_DiscardUnknown() {
	xxx_messageInfo_UnitList.DiscardUnknown(m)
}

var xxx_messageInfo_UnitList proto.InternalMessageInfo

func (m *UnitList) GetCreatureList() []*UnitDefinition {
	if m != nil {
		return m.CreatureList
	}
	return nil
}

type BlockRequest struct {
	BlocksNeeded         *int32   `protobuf:"varint,1,opt,name=blocks_needed,json=blocksNeeded" json:"blocks_needed,omitempty"`
	MinX                 *int32   `protobuf:"varint,2,opt,name=min_x,json=minX" json:"min_x,omitempty"`
	MaxX                 *int32   `protobuf:"varint,3,opt,name=max_x,json=maxX" json:"max_x,omitempty"`
	MinY                 *int32   `protobuf:"varint,4,opt,name=min_y,json=minY" json:"min_y,omitempty"`
	MaxY                 *int32   `protobuf:"varint,5,opt,name=max_y,json=maxY" json:"max_y,omitempty"`
	MinZ                 *int32   `protobuf:"varint,6,opt,name=min_z,json=minZ" json:"min_z,omitempty"`
	MaxZ                 *int32   `protobuf:"varint,7,opt,name=max_z,json=maxZ" json:"max_z,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockRequest) Reset()         { *m = BlockRequest{} }
func (m *BlockRequest) String() string { return proto.CompactTextString(m) }
func (*BlockRequest) ProtoMessage()    {}
func (*BlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{25}
}
func (m *BlockRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockRequest.Unmarshal(m, b)
}
func (m *BlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockRequest.Marshal(b, m, deterministic)
}
func (dst *BlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockRequest.Merge(dst, src)
}
func (m *BlockRequest) XXX_Size() int {
	return xxx_messageInfo_BlockRequest.Size(m)
}
func (m *BlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BlockRequest proto.InternalMessageInfo

func (m *BlockRequest) GetBlocksNeeded() int32 {
	if m != nil && m.BlocksNeeded != nil {
		return *m.BlocksNeeded
	}
	return 0
}

func (m *BlockRequest) GetMinX() int32 {
	if m != nil && m.MinX != nil {
		return *m.MinX
	}
	return 0
}

func (m *BlockRequest) GetMaxX() int32 {
	if m != nil && m.MaxX != nil {
		return *m.MaxX
	}
	return 0
}

func (m *BlockRequest) GetMinY() int32 {
	if m != nil && m.MinY != nil {
		return *m.MinY
	}
	return 0
}

func (m *BlockRequest) GetMaxY() int32 {
	if m != nil && m.MaxY != nil {
		return *m.MaxY
	}
	return 0
}

func (m *BlockRequest) GetMinZ() int32 {
	if m != nil && m.MinZ != nil {
		return *m.MinZ
	}
	return 0
}

func (m *BlockRequest) GetMaxZ() int32 {
	if m != nil && m.MaxZ != nil {
		return *m.MaxZ
	}
	return 0
}

type BlockList struct {
	MapBlocks            []*MapBlock  `protobuf:"bytes,1,rep,name=map_blocks,json=mapBlocks" json:"map_blocks,omitempty"`
	MapX                 *int32       `protobuf:"varint,2,opt,name=map_x,json=mapX" json:"map_x,omitempty"`
	MapY                 *int32       `protobuf:"varint,3,opt,name=map_y,json=mapY" json:"map_y,omitempty"`
	Engravings           []*Engraving `protobuf:"bytes,4,rep,name=engravings" json:"engravings,omitempty"`
	OceanWaves           []*Wave      `protobuf:"bytes,5,rep,name=ocean_waves,json=oceanWaves" json:"ocean_waves,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *BlockList) Reset()         { *m = BlockList{} }
func (m *BlockList) String() string { return proto.CompactTextString(m) }
func (*BlockList) ProtoMessage()    {}
func (*BlockList) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{26}
}
func (m *BlockList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockList.Unmarshal(m, b)
}
func (m *BlockList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockList.Marshal(b, m, deterministic)
}
func (dst *BlockList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockList.Merge(dst, src)
}
func (m *BlockList) XXX_Size() int {
	return xxx_messageInfo_BlockList.Size(m)
}
func (m *BlockList) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockList.DiscardUnknown(m)
}

var xxx_messageInfo_BlockList proto.InternalMessageInfo

func (m *BlockList) GetMapBlocks() []*MapBlock {
	if m != nil {
		return m.MapBlocks
	}
	return nil
}

func (m *BlockList) GetMapX() int32 {
	if m != nil && m.MapX != nil {
		return *m.MapX
	}
	return 0
}

func (m *BlockList) GetMapY() int32 {
	if m != nil && m.MapY != nil {
		return *m.MapY
	}
	return 0
}

func (m *BlockList) GetEngravings() []*Engraving {
	if m != nil {
		return m.Engravings
	}
	return nil
}

func (m *BlockList) GetOceanWaves() []*Wave {
	if m != nil {
		return m.OceanWaves
	}
	return nil
}

type PlantDef struct {
	PosX                 *int32   `protobuf:"varint,1,req,name=pos_x,json=posX" json:"pos_x,omitempty"`
	PosY                 *int32   `protobuf:"varint,2,req,name=pos_y,json=posY" json:"pos_y,omitempty"`
	PosZ                 *int32   `protobuf:"varint,3,req,name=pos_z,json=posZ" json:"pos_z,omitempty"`
	Index                *int32   `protobuf:"varint,4,req,name=index" json:"index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlantDef) Reset()         { *m = PlantDef{} }
func (m *PlantDef) String() string { return proto.CompactTextString(m) }
func (*PlantDef) ProtoMessage()    {}
func (*PlantDef) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{27}
}
func (m *PlantDef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlantDef.Unmarshal(m, b)
}
func (m *PlantDef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlantDef.Marshal(b, m, deterministic)
}
func (dst *PlantDef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlantDef.Merge(dst, src)
}
func (m *PlantDef) XXX_Size() int {
	return xxx_messageInfo_PlantDef.Size(m)
}
func (m *PlantDef) XXX_DiscardUnknown() {
	xxx_messageInfo_PlantDef.DiscardUnknown(m)
}

var xxx_messageInfo_PlantDef proto.InternalMessageInfo

func (m *PlantDef) GetPosX() int32 {
	if m != nil && m.PosX != nil {
		return *m.PosX
	}
	return 0
}

func (m *PlantDef) GetPosY() int32 {
	if m != nil && m.PosY != nil {
		return *m.PosY
	}
	return 0
}

func (m *PlantDef) GetPosZ() int32 {
	if m != nil && m.PosZ != nil {
		return *m.PosZ
	}
	return 0
}

func (m *PlantDef) GetIndex() int32 {
	if m != nil && m.Index != nil {
		return *m.Index
	}
	return 0
}

type PlantList struct {
	PlantList            []*PlantDef `protobuf:"bytes,1,rep,name=plant_list,json=plantList" json:"plant_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *PlantList) Reset()         { *m = PlantList{} }
func (m *PlantList) String() string { return proto.CompactTextString(m) }
func (*PlantList) ProtoMessage()    {}
func (*PlantList) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{28}
}
func (m *PlantList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlantList.Unmarshal(m, b)
}
func (m *PlantList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlantList.Marshal(b, m, deterministic)
}
func (dst *PlantList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlantList.Merge(dst, src)
}
func (m *PlantList) XXX_Size() int {
	return xxx_messageInfo_PlantList.Size(m)
}
func (m *PlantList) XXX_DiscardUnknown() {
	xxx_messageInfo_PlantList.DiscardUnknown(m)
}

var xxx_messageInfo_PlantList proto.InternalMessageInfo

func (m *PlantList) GetPlantList() []*PlantDef {
	if m != nil {
		return m.PlantList
	}
	return nil
}

type ViewInfo struct {
	ViewPosX             *int32   `protobuf:"varint,1,opt,name=view_pos_x,json=viewPosX" json:"view_pos_x,omitempty"`
	ViewPosY             *int32   `protobuf:"varint,2,opt,name=view_pos_y,json=viewPosY" json:"view_pos_y,omitempty"`
	ViewPosZ             *int32   `protobuf:"varint,3,opt,name=view_pos_z,json=viewPosZ" json:"view_pos_z,omitempty"`
	ViewSizeX            *int32   `protobuf:"varint,4,opt,name=view_size_x,json=viewSizeX" json:"view_size_x,omitempty"`
	ViewSizeY            *int32   `protobuf:"varint,5,opt,name=view_size_y,json=viewSizeY" json:"view_size_y,omitempty"`
	CursorPosX           *int32   `protobuf:"varint,6,opt,name=cursor_pos_x,json=cursorPosX" json:"cursor_pos_x,omitempty"`
	CursorPosY           *int32   `protobuf:"varint,7,opt,name=cursor_pos_y,json=cursorPosY" json:"cursor_pos_y,omitempty"`
	CursorPosZ           *int32   `protobuf:"varint,8,opt,name=cursor_pos_z,json=cursorPosZ" json:"cursor_pos_z,omitempty"`
	FollowUnitId         *int32   `protobuf:"varint,9,opt,name=follow_unit_id,json=followUnitId,def=-1" json:"follow_unit_id,omitempty"`
	FollowItemId         *int32   `protobuf:"varint,10,opt,name=follow_item_id,json=followItemId,def=-1" json:"follow_item_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ViewInfo) Reset()         { *m = ViewInfo{} }
func (m *ViewInfo) String() string { return proto.CompactTextString(m) }
func (*ViewInfo) ProtoMessage()    {}
func (*ViewInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{29}
}
func (m *ViewInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ViewInfo.Unmarshal(m, b)
}
func (m *ViewInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ViewInfo.Marshal(b, m, deterministic)
}
func (dst *ViewInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViewInfo.Merge(dst, src)
}
func (m *ViewInfo) XXX_Size() int {
	return xxx_messageInfo_ViewInfo.Size(m)
}
func (m *ViewInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ViewInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ViewInfo proto.InternalMessageInfo

const Default_ViewInfo_FollowUnitId int32 = -1
const Default_ViewInfo_FollowItemId int32 = -1

func (m *ViewInfo) GetViewPosX() int32 {
	if m != nil && m.ViewPosX != nil {
		return *m.ViewPosX
	}
	return 0
}

func (m *ViewInfo) GetViewPosY() int32 {
	if m != nil && m.ViewPosY != nil {
		return *m.ViewPosY
	}
	return 0
}

func (m *ViewInfo) GetViewPosZ() int32 {
	if m != nil && m.ViewPosZ != nil {
		return *m.ViewPosZ
	}
	return 0
}

func (m *ViewInfo) GetViewSizeX() int32 {
	if m != nil && m.ViewSizeX != nil {
		return *m.ViewSizeX
	}
	return 0
}

func (m *ViewInfo) GetViewSizeY() int32 {
	if m != nil && m.ViewSizeY != nil {
		return *m.ViewSizeY
	}
	return 0
}

func (m *ViewInfo) GetCursorPosX() int32 {
	if m != nil && m.CursorPosX != nil {
		return *m.CursorPosX
	}
	return 0
}

func (m *ViewInfo) GetCursorPosY() int32 {
	if m != nil && m.CursorPosY != nil {
		return *m.CursorPosY
	}
	return 0
}

func (m *ViewInfo) GetCursorPosZ() int32 {
	if m != nil && m.CursorPosZ != nil {
		return *m.CursorPosZ
	}
	return 0
}

func (m *ViewInfo) GetFollowUnitId() int32 {
	if m != nil && m.FollowUnitId != nil {
		return *m.FollowUnitId
	}
	return Default_ViewInfo_FollowUnitId
}

func (m *ViewInfo) GetFollowItemId() int32 {
	if m != nil && m.FollowItemId != nil {
		return *m.FollowItemId
	}
	return Default_ViewInfo_FollowItemId
}

type MapInfo struct {
	BlockSizeX           *int32   `protobuf:"varint,1,opt,name=block_size_x,json=blockSizeX" json:"block_size_x,omitempty"`
	BlockSizeY           *int32   `protobuf:"varint,2,opt,name=block_size_y,json=blockSizeY" json:"block_size_y,omitempty"`
	BlockSizeZ           *int32   `protobuf:"varint,3,opt,name=block_size_z,json=blockSizeZ" json:"block_size_z,omitempty"`
	BlockPosX            *int32   `protobuf:"varint,4,opt,name=block_pos_x,json=blockPosX" json:"block_pos_x,omitempty"`
	BlockPosY            *int32   `protobuf:"varint,5,opt,name=block_pos_y,json=blockPosY" json:"block_pos_y,omitempty"`
	BlockPosZ            *int32   `protobuf:"varint,6,opt,name=block_pos_z,json=blockPosZ" json:"block_pos_z,omitempty"`
	WorldName            *string  `protobuf:"bytes,7,opt,name=world_name,json=worldName" json:"world_name,omitempty"`
	WorldNameEnglish     *string  `protobuf:"bytes,8,opt,name=world_name_english,json=worldNameEnglish" json:"world_name_english,omitempty"`
	SaveName             *string  `protobuf:"bytes,9,opt,name=save_name,json=saveName" json:"save_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MapInfo) Reset()         { *m = MapInfo{} }
func (m *MapInfo) String() string { return proto.CompactTextString(m) }
func (*MapInfo) ProtoMessage()    {}
func (*MapInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{30}
}
func (m *MapInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MapInfo.Unmarshal(m, b)
}
func (m *MapInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MapInfo.Marshal(b, m, deterministic)
}
func (dst *MapInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapInfo.Merge(dst, src)
}
func (m *MapInfo) XXX_Size() int {
	return xxx_messageInfo_MapInfo.Size(m)
}
func (m *MapInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MapInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MapInfo proto.InternalMessageInfo

func (m *MapInfo) GetBlockSizeX() int32 {
	if m != nil && m.BlockSizeX != nil {
		return *m.BlockSizeX
	}
	return 0
}

func (m *MapInfo) GetBlockSizeY() int32 {
	if m != nil && m.BlockSizeY != nil {
		return *m.BlockSizeY
	}
	return 0
}

func (m *MapInfo) GetBlockSizeZ() int32 {
	if m != nil && m.BlockSizeZ != nil {
		return *m.BlockSizeZ
	}
	return 0
}

func (m *MapInfo) GetBlockPosX() int32 {
	if m != nil && m.BlockPosX != nil {
		return *m.BlockPosX
	}
	return 0
}

func (m *MapInfo) GetBlockPosY() int32 {
	if m != nil && m.BlockPosY != nil {
		return *m.BlockPosY
	}
	return 0
}

func (m *MapInfo) GetBlockPosZ() int32 {
	if m != nil && m.BlockPosZ != nil {
		return *m.BlockPosZ
	}
	return 0
}

func (m *MapInfo) GetWorldName() string {
	if m != nil && m.WorldName != nil {
		return *m.WorldName
	}
	return ""
}

func (m *MapInfo) GetWorldNameEnglish() string {
	if m != nil && m.WorldNameEnglish != nil {
		return *m.WorldNameEnglish
	}
	return ""
}

func (m *MapInfo) GetSaveName() string {
	if m != nil && m.SaveName != nil {
		return *m.SaveName
	}
	return ""
}

type Cloud struct {
	Front                *FrontType   `protobuf:"varint,1,opt,name=front,enum=RemoteFortressReader.FrontType" json:"front,omitempty"`
	Cumulus              *CumulusType `protobuf:"varint,2,opt,name=cumulus,enum=RemoteFortressReader.CumulusType" json:"cumulus,omitempty"`
	Cirrus               *bool        `protobuf:"varint,3,opt,name=cirrus" json:"cirrus,omitempty"`
	Stratus              *StratusType `protobuf:"varint,4,opt,name=stratus,enum=RemoteFortressReader.StratusType" json:"stratus,omitempty"`
	Fog                  *FogType     `protobuf:"varint,5,opt,name=fog,enum=RemoteFortressReader.FogType" json:"fog,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Cloud) Reset()         { *m = Cloud{} }
func (m *Cloud) String() string { return proto.CompactTextString(m) }
func (*Cloud) ProtoMessage()    {}
func (*Cloud) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{31}
}
func (m *Cloud) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Cloud.Unmarshal(m, b)
}
func (m *Cloud) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Cloud.Marshal(b, m, deterministic)
}
func (dst *Cloud) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cloud.Merge(dst, src)
}
func (m *Cloud) XXX_Size() int {
	return xxx_messageInfo_Cloud.Size(m)
}
func (m *Cloud) XXX_DiscardUnknown() {
	xxx_messageInfo_Cloud.DiscardUnknown(m)
}

var xxx_messageInfo_Cloud proto.InternalMessageInfo

func (m *Cloud) GetFront() FrontType {
	if m != nil && m.Front != nil {
		return *m.Front
	}
	return FrontType_FRONT_NONE
}

func (m *Cloud) GetCumulus() CumulusType {
	if m != nil && m.Cumulus != nil {
		return *m.Cumulus
	}
	return CumulusType_CUMULUS_NONE
}

func (m *Cloud) GetCirrus() bool {
	if m != nil && m.Cirrus != nil {
		return *m.Cirrus
	}
	return false
}

func (m *Cloud) GetStratus() StratusType {
	if m != nil && m.Stratus != nil {
		return *m.Stratus
	}
	return StratusType_STRATUS_NONE
}

func (m *Cloud) GetFog() FogType {
	if m != nil && m.Fog != nil {
		return *m.Fog
	}
	return FogType_FOG_NONE
}

type WorldMap struct {
	WorldWidth           *int32        `protobuf:"varint,1,req,name=world_width,json=worldWidth" json:"world_width,omitempty"`
	WorldHeight          *int32        `protobuf:"varint,2,req,name=world_height,json=worldHeight" json:"world_height,omitempty"`
	Name                 *string       `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	NameEnglish          *string       `protobuf:"bytes,4,opt,name=name_english,json=nameEnglish" json:"name_english,omitempty"`
	Elevation            []int32       `protobuf:"varint,5,rep,name=elevation" json:"elevation,omitempty"`
	Rainfall             []int32       `protobuf:"varint,6,rep,name=rainfall" json:"rainfall,omitempty"`
	Vegetation           []int32       `protobuf:"varint,7,rep,name=vegetation" json:"vegetation,omitempty"`
	Temperature          []int32       `protobuf:"varint,8,rep,name=temperature" json:"temperature,omitempty"`
	Evilness             []int32       `protobuf:"varint,9,rep,name=evilness" json:"evilness,omitempty"`
	Drainage             []int32       `protobuf:"varint,10,rep,name=drainage" json:"drainage,omitempty"`
	Volcanism            []int32       `protobuf:"varint,11,rep,name=volcanism" json:"volcanism,omitempty"`
	Savagery             []int32       `protobuf:"varint,12,rep,name=savagery" json:"savagery,omitempty"`
	Clouds               []*Cloud      `protobuf:"bytes,13,rep,name=clouds" json:"clouds,omitempty"`
	Salinity             []int32       `protobuf:"varint,14,rep,name=salinity" json:"salinity,omitempty"`
	MapX                 *int32        `protobuf:"varint,15,opt,name=map_x,json=mapX" json:"map_x,omitempty"`
	MapY                 *int32        `protobuf:"varint,16,opt,name=map_y,json=mapY" json:"map_y,omitempty"`
	CenterX              *int32        `protobuf:"varint,17,opt,name=center_x,json=centerX" json:"center_x,omitempty"`
	CenterY              *int32        `protobuf:"varint,18,opt,name=center_y,json=centerY" json:"center_y,omitempty"`
	CenterZ              *int32        `protobuf:"varint,19,opt,name=center_z,json=centerZ" json:"center_z,omitempty"`
	CurYear              *int32        `protobuf:"varint,20,opt,name=cur_year,json=curYear" json:"cur_year,omitempty"`
	CurYearTick          *int32        `protobuf:"varint,21,opt,name=cur_year_tick,json=curYearTick" json:"cur_year_tick,omitempty"`
	WorldPoles           *WorldPoles   `protobuf:"varint,22,opt,name=world_poles,json=worldPoles,enum=RemoteFortressReader.WorldPoles" json:"world_poles,omitempty"`
	RiverTiles           []*RiverTile  `protobuf:"bytes,23,rep,name=river_tiles,json=riverTiles" json:"river_tiles,omitempty"`
	WaterElevation       []int32       `protobuf:"varint,24,rep,name=water_elevation,json=waterElevation" json:"water_elevation,omitempty"`
	RegionTiles          []*RegionTile `protobuf:"bytes,25,rep,name=region_tiles,json=regionTiles" json:"region_tiles,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *WorldMap) Reset()         { *m = WorldMap{} }
func (m *WorldMap) String() string { return proto.CompactTextString(m) }
func (*WorldMap) ProtoMessage()    {}
func (*WorldMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{32}
}
func (m *WorldMap) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WorldMap.Unmarshal(m, b)
}
func (m *WorldMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WorldMap.Marshal(b, m, deterministic)
}
func (dst *WorldMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorldMap.Merge(dst, src)
}
func (m *WorldMap) XXX_Size() int {
	return xxx_messageInfo_WorldMap.Size(m)
}
func (m *WorldMap) XXX_DiscardUnknown() {
	xxx_messageInfo_WorldMap.DiscardUnknown(m)
}

var xxx_messageInfo_WorldMap proto.InternalMessageInfo

func (m *WorldMap) GetWorldWidth() int32 {
	if m != nil && m.WorldWidth != nil {
		return *m.WorldWidth
	}
	return 0
}

func (m *WorldMap) GetWorldHeight() int32 {
	if m != nil && m.WorldHeight != nil {
		return *m.WorldHeight
	}
	return 0
}

func (m *WorldMap) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *WorldMap) GetNameEnglish() string {
	if m != nil && m.NameEnglish != nil {
		return *m.NameEnglish
	}
	return ""
}

func (m *WorldMap) GetElevation() []int32 {
	if m != nil {
		return m.Elevation
	}
	return nil
}

func (m *WorldMap) GetRainfall() []int32 {
	if m != nil {
		return m.Rainfall
	}
	return nil
}

func (m *WorldMap) GetVegetation() []int32 {
	if m != nil {
		return m.Vegetation
	}
	return nil
}

func (m *WorldMap) GetTemperature() []int32 {
	if m != nil {
		return m.Temperature
	}
	return nil
}

func (m *WorldMap) GetEvilness() []int32 {
	if m != nil {
		return m.Evilness
	}
	return nil
}

func (m *WorldMap) GetDrainage() []int32 {
	if m != nil {
		return m.Drainage
	}
	return nil
}

func (m *WorldMap) GetVolcanism() []int32 {
	if m != nil {
		return m.Volcanism
	}
	return nil
}

func (m *WorldMap) GetSavagery() []int32 {
	if m != nil {
		return m.Savagery
	}
	return nil
}

func (m *WorldMap) GetClouds() []*Cloud {
	if m != nil {
		return m.Clouds
	}
	return nil
}

func (m *WorldMap) GetSalinity() []int32 {
	if m != nil {
		return m.Salinity
	}
	return nil
}

func (m *WorldMap) GetMapX() int32 {
	if m != nil && m.MapX != nil {
		return *m.MapX
	}
	return 0
}

func (m *WorldMap) GetMapY() int32 {
	if m != nil && m.MapY != nil {
		return *m.MapY
	}
	return 0
}

func (m *WorldMap) GetCenterX() int32 {
	if m != nil && m.CenterX != nil {
		return *m.CenterX
	}
	return 0
}

func (m *WorldMap) GetCenterY() int32 {
	if m != nil && m.CenterY != nil {
		return *m.CenterY
	}
	return 0
}

func (m *WorldMap) GetCenterZ() int32 {
	if m != nil && m.CenterZ != nil {
		return *m.CenterZ
	}
	return 0
}

func (m *WorldMap) GetCurYear() int32 {
	if m != nil && m.CurYear != nil {
		return *m.CurYear
	}
	return 0
}

func (m *WorldMap) GetCurYearTick() int32 {
	if m != nil && m.CurYearTick != nil {
		return *m.CurYearTick
	}
	return 0
}

func (m *WorldMap) GetWorldPoles() WorldPoles {
	if m != nil && m.WorldPoles != nil {
		return *m.WorldPoles
	}
	return WorldPoles_NO_POLES
}

func (m *WorldMap) GetRiverTiles() []*RiverTile {
	if m != nil {
		return m.RiverTiles
	}
	return nil
}

func (m *WorldMap) GetWaterElevation() []int32 {
	if m != nil {
		return m.WaterElevation
	}
	return nil
}

func (m *WorldMap) GetRegionTiles() []*RegionTile {
	if m != nil {
		return m.RegionTiles
	}
	return nil
}

type SiteRealizationBuildingWall struct {
	StartX               *int32   `protobuf:"varint,1,opt,name=start_x,json=startX" json:"start_x,omitempty"`
	StartY               *int32   `protobuf:"varint,2,opt,name=start_y,json=startY" json:"start_y,omitempty"`
	StartZ               *int32   `protobuf:"varint,3,opt,name=start_z,json=startZ" json:"start_z,omitempty"`
	EndX                 *int32   `protobuf:"varint,4,opt,name=end_x,json=endX" json:"end_x,omitempty"`
	EndY                 *int32   `protobuf:"varint,5,opt,name=end_y,json=endY" json:"end_y,omitempty"`
	EndZ                 *int32   `protobuf:"varint,6,opt,name=end_z,json=endZ" json:"end_z,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SiteRealizationBuildingWall) Reset()         { *m = SiteRealizationBuildingWall{} }
func (m *SiteRealizationBuildingWall) String() string { return proto.CompactTextString(m) }
func (*SiteRealizationBuildingWall) ProtoMessage()    {}
func (*SiteRealizationBuildingWall) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{33}
}
func (m *SiteRealizationBuildingWall) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SiteRealizationBuildingWall.Unmarshal(m, b)
}
func (m *SiteRealizationBuildingWall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SiteRealizationBuildingWall.Marshal(b, m, deterministic)
}
func (dst *SiteRealizationBuildingWall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SiteRealizationBuildingWall.Merge(dst, src)
}
func (m *SiteRealizationBuildingWall) XXX_Size() int {
	return xxx_messageInfo_SiteRealizationBuildingWall.Size(m)
}
func (m *SiteRealizationBuildingWall) XXX_DiscardUnknown() {
	xxx_messageInfo_SiteRealizationBuildingWall.DiscardUnknown(m)
}

var xxx_messageInfo_SiteRealizationBuildingWall proto.InternalMessageInfo

func (m *SiteRealizationBuildingWall) GetStartX() int32 {
	if m != nil && m.StartX != nil {
		return *m.StartX
	}
	return 0
}

func (m *SiteRealizationBuildingWall) GetStartY() int32 {
	if m != nil && m.StartY != nil {
		return *m.StartY
	}
	return 0
}

func (m *SiteRealizationBuildingWall) GetStartZ() int32 {
	if m != nil && m.StartZ != nil {
		return *m.StartZ
	}
	return 0
}

func (m *SiteRealizationBuildingWall) GetEndX() int32 {
	if m != nil && m.EndX != nil {
		return *m.EndX
	}
	return 0
}

func (m *SiteRealizationBuildingWall) GetEndY() int32 {
	if m != nil && m.EndY != nil {
		return *m.EndY
	}
	return 0
}

func (m *SiteRealizationBuildingWall) GetEndZ() int32 {
	if m != nil && m.EndZ != nil {
		return *m.EndZ
	}
	return 0
}

type SiteRealizationBuildingTower struct {
	RoofZ                *int32   `protobuf:"varint,1,opt,name=roof_z,json=roofZ" json:"roof_z,omitempty"`
	Round                *bool    `protobuf:"varint,2,opt,name=round" json:"round,omitempty"`
	Goblin               *bool    `protobuf:"varint,3,opt,name=goblin" json:"goblin,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SiteRealizationBuildingTower) Reset()         { *m = SiteRealizationBuildingTower{} }
func (m *SiteRealizationBuildingTower) String() string { return proto.CompactTextString(m) }
func (*SiteRealizationBuildingTower) ProtoMessage()    {}
func (*SiteRealizationBuildingTower) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{34}
}
func (m *SiteRealizationBuildingTower) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SiteRealizationBuildingTower.Unmarshal(m, b)
}
func (m *SiteRealizationBuildingTower) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SiteRealizationBuildingTower.Marshal(b, m, deterministic)
}
func (dst *SiteRealizationBuildingTower) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SiteRealizationBuildingTower.Merge(dst, src)
}
func (m *SiteRealizationBuildingTower) XXX_Size() int {
	return xxx_messageInfo_SiteRealizationBuildingTower.Size(m)
}
func (m *SiteRealizationBuildingTower) XXX_DiscardUnknown() {
	xxx_messageInfo_SiteRealizationBuildingTower.DiscardUnknown(m)
}

var xxx_messageInfo_SiteRealizationBuildingTower proto.InternalMessageInfo

func (m *SiteRealizationBuildingTower) GetRoofZ() int32 {
	if m != nil && m.RoofZ != nil {
		return *m.RoofZ
	}
	return 0
}

func (m *SiteRealizationBuildingTower) GetRound() bool {
	if m != nil && m.Round != nil {
		return *m.Round
	}
	return false
}

func (m *SiteRealizationBuildingTower) GetGoblin() bool {
	if m != nil && m.Goblin != nil {
		return *m.Goblin
	}
	return false
}

type TrenchSpoke struct {
	MoundStart           *int32   `protobuf:"varint,1,opt,name=mound_start,json=moundStart" json:"mound_start,omitempty"`
	TrenchStart          *int32   `protobuf:"varint,2,opt,name=trench_start,json=trenchStart" json:"trench_start,omitempty"`
	TrenchEnd            *int32   `protobuf:"varint,3,opt,name=trench_end,json=trenchEnd" json:"trench_end,omitempty"`
	MoundEnd             *int32   `protobuf:"varint,4,opt,name=mound_end,json=moundEnd" json:"mound_end,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TrenchSpoke) Reset()         { *m = TrenchSpoke{} }
func (m *TrenchSpoke) String() string { return proto.CompactTextString(m) }
func (*TrenchSpoke) ProtoMessage()    {}
func (*TrenchSpoke) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{35}
}
func (m *TrenchSpoke) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrenchSpoke.Unmarshal(m, b)
}
func (m *TrenchSpoke) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrenchSpoke.Marshal(b, m, deterministic)
}
func (dst *TrenchSpoke) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrenchSpoke.Merge(dst, src)
}
func (m *TrenchSpoke) XXX_Size() int {
	return xxx_messageInfo_TrenchSpoke.Size(m)
}
func (m *TrenchSpoke) XXX_DiscardUnknown() {
	xxx_messageInfo_TrenchSpoke.DiscardUnknown(m)
}

var xxx_messageInfo_TrenchSpoke proto.InternalMessageInfo

func (m *TrenchSpoke) GetMoundStart() int32 {
	if m != nil && m.MoundStart != nil {
		return *m.MoundStart
	}
	return 0
}

func (m *TrenchSpoke) GetTrenchStart() int32 {
	if m != nil && m.TrenchStart != nil {
		return *m.TrenchStart
	}
	return 0
}

func (m *TrenchSpoke) GetTrenchEnd() int32 {
	if m != nil && m.TrenchEnd != nil {
		return *m.TrenchEnd
	}
	return 0
}

func (m *TrenchSpoke) GetMoundEnd() int32 {
	if m != nil && m.MoundEnd != nil {
		return *m.MoundEnd
	}
	return 0
}

type SiteRealizationBuildingTrenches struct {
	Spokes               []*TrenchSpoke `protobuf:"bytes,1,rep,name=spokes" json:"spokes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *SiteRealizationBuildingTrenches) Reset()         { *m = SiteRealizationBuildingTrenches{} }
func (m *SiteRealizationBuildingTrenches) String() string { return proto.CompactTextString(m) }
func (*SiteRealizationBuildingTrenches) ProtoMessage()    {}
func (*SiteRealizationBuildingTrenches) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{36}
}
func (m *SiteRealizationBuildingTrenches) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SiteRealizationBuildingTrenches.Unmarshal(m, b)
}
func (m *SiteRealizationBuildingTrenches) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SiteRealizationBuildingTrenches.Marshal(b, m, deterministic)
}
func (dst *SiteRealizationBuildingTrenches) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SiteRealizationBuildingTrenches.Merge(dst, src)
}
func (m *SiteRealizationBuildingTrenches) XXX_Size() int {
	return xxx_messageInfo_SiteRealizationBuildingTrenches.Size(m)
}
func (m *SiteRealizationBuildingTrenches) XXX_DiscardUnknown() {
	xxx_messageInfo_SiteRealizationBuildingTrenches.DiscardUnknown(m)
}

var xxx_messageInfo_SiteRealizationBuildingTrenches proto.InternalMessageInfo

func (m *SiteRealizationBuildingTrenches) GetSpokes() []*TrenchSpoke {
	if m != nil {
		return m.Spokes
	}
	return nil
}

type SiteRealizationBuilding struct {
	Id                   *int32                           `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Type                 *SiteRealizationBuildingType     `protobuf:"varint,2,opt,name=type,enum=RemoteFortressReader.SiteRealizationBuildingType" json:"type,omitempty"`
	MinX                 *int32                           `protobuf:"varint,3,opt,name=min_x,json=minX" json:"min_x,omitempty"`
	MinY                 *int32                           `protobuf:"varint,4,opt,name=min_y,json=minY" json:"min_y,omitempty"`
	MaxX                 *int32                           `protobuf:"varint,5,opt,name=max_x,json=maxX" json:"max_x,omitempty"`
	MaxY                 *int32                           `protobuf:"varint,6,opt,name=max_y,json=maxY" json:"max_y,omitempty"`
	Material             *MatPair                         `protobuf:"bytes,7,opt,name=material" json:"material,omitempty"`
	WallInfo             *SiteRealizationBuildingWall     `protobuf:"bytes,8,opt,name=wall_info,json=wallInfo" json:"wall_info,omitempty"`
	TowerInfo            *SiteRealizationBuildingTower    `protobuf:"bytes,9,opt,name=tower_info,json=towerInfo" json:"tower_info,omitempty"`
	TrenchInfo           *SiteRealizationBuildingTrenches `protobuf:"bytes,10,opt,name=trench_info,json=trenchInfo" json:"trench_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *SiteRealizationBuilding) Reset()         { *m = SiteRealizationBuilding{} }
func (m *SiteRealizationBuilding) String() string { return proto.CompactTextString(m) }
func (*SiteRealizationBuilding) ProtoMessage()    {}
func (*SiteRealizationBuilding) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{37}
}
func (m *SiteRealizationBuilding) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SiteRealizationBuilding.Unmarshal(m, b)
}
func (m *SiteRealizationBuilding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SiteRealizationBuilding.Marshal(b, m, deterministic)
}
func (dst *SiteRealizationBuilding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SiteRealizationBuilding.Merge(dst, src)
}
func (m *SiteRealizationBuilding) XXX_Size() int {
	return xxx_messageInfo_SiteRealizationBuilding.Size(m)
}
func (m *SiteRealizationBuilding) XXX_DiscardUnknown() {
	xxx_messageInfo_SiteRealizationBuilding.DiscardUnknown(m)
}

var xxx_messageInfo_SiteRealizationBuilding proto.InternalMessageInfo

func (m *SiteRealizationBuilding) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *SiteRealizationBuilding) GetType() SiteRealizationBuildingType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return SiteRealizationBuildingType_cottage_plot
}

func (m *SiteRealizationBuilding) GetMinX() int32 {
	if m != nil && m.MinX != nil {
		return *m.MinX
	}
	return 0
}

func (m *SiteRealizationBuilding) GetMinY() int32 {
	if m != nil && m.MinY != nil {
		return *m.MinY
	}
	return 0
}

func (m *SiteRealizationBuilding) GetMaxX() int32 {
	if m != nil && m.MaxX != nil {
		return *m.MaxX
	}
	return 0
}

func (m *SiteRealizationBuilding) GetMaxY() int32 {
	if m != nil && m.MaxY != nil {
		return *m.MaxY
	}
	return 0
}

func (m *SiteRealizationBuilding) GetMaterial() *MatPair {
	if m != nil {
		return m.Material
	}
	return nil
}

func (m *SiteRealizationBuilding) GetWallInfo() *SiteRealizationBuildingWall {
	if m != nil {
		return m.WallInfo
	}
	return nil
}

func (m *SiteRealizationBuilding) GetTowerInfo() *SiteRealizationBuildingTower {
	if m != nil {
		return m.TowerInfo
	}
	return nil
}

func (m *SiteRealizationBuilding) GetTrenchInfo() *SiteRealizationBuildingTrenches {
	if m != nil {
		return m.TrenchInfo
	}
	return nil
}

type RegionTile struct {
	Elevation            *int32                     `protobuf:"varint,1,opt,name=elevation" json:"elevation,omitempty"`
	Rainfall             *int32                     `protobuf:"varint,2,opt,name=rainfall" json:"rainfall,omitempty"`
	Vegetation           *int32                     `protobuf:"varint,3,opt,name=vegetation" json:"vegetation,omitempty"`
	Temperature          *int32                     `protobuf:"varint,4,opt,name=temperature" json:"temperature,omitempty"`
	Evilness             *int32                     `protobuf:"varint,5,opt,name=evilness" json:"evilness,omitempty"`
	Drainage             *int32                     `protobuf:"varint,6,opt,name=drainage" json:"drainage,omitempty"`
	Volcanism            *int32                     `protobuf:"varint,7,opt,name=volcanism" json:"volcanism,omitempty"`
	Savagery             *int32                     `protobuf:"varint,8,opt,name=savagery" json:"savagery,omitempty"`
	Salinity             *int32                     `protobuf:"varint,9,opt,name=salinity" json:"salinity,omitempty"`
	RiverTiles           *RiverTile                 `protobuf:"bytes,10,opt,name=river_tiles,json=riverTiles" json:"river_tiles,omitempty"`
	WaterElevation       *int32                     `protobuf:"varint,11,opt,name=water_elevation,json=waterElevation" json:"water_elevation,omitempty"`
	SurfaceMaterial      *MatPair                   `protobuf:"bytes,12,opt,name=surface_material,json=surfaceMaterial" json:"surface_material,omitempty"`
	PlantMaterials       []*MatPair                 `protobuf:"bytes,13,rep,name=plant_materials,json=plantMaterials" json:"plant_materials,omitempty"`
	Buildings            []*SiteRealizationBuilding `protobuf:"bytes,14,rep,name=buildings" json:"buildings,omitempty"`
	StoneMaterials       []*MatPair                 `protobuf:"bytes,15,rep,name=stone_materials,json=stoneMaterials" json:"stone_materials,omitempty"`
	TreeMaterials        []*MatPair                 `protobuf:"bytes,16,rep,name=tree_materials,json=treeMaterials" json:"tree_materials,omitempty"`
	Snow                 *int32                     `protobuf:"varint,17,opt,name=snow" json:"snow,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *RegionTile) Reset()         { *m = RegionTile{} }
func (m *RegionTile) String() string { return proto.CompactTextString(m) }
func (*RegionTile) ProtoMessage()    {}
func (*RegionTile) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{38}
}
func (m *RegionTile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegionTile.Unmarshal(m, b)
}
func (m *RegionTile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegionTile.Marshal(b, m, deterministic)
}
func (dst *RegionTile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegionTile.Merge(dst, src)
}
func (m *RegionTile) XXX_Size() int {
	return xxx_messageInfo_RegionTile.Size(m)
}
func (m *RegionTile) XXX_DiscardUnknown() {
	xxx_messageInfo_RegionTile.DiscardUnknown(m)
}

var xxx_messageInfo_RegionTile proto.InternalMessageInfo

func (m *RegionTile) GetElevation() int32 {
	if m != nil && m.Elevation != nil {
		return *m.Elevation
	}
	return 0
}

func (m *RegionTile) GetRainfall() int32 {
	if m != nil && m.Rainfall != nil {
		return *m.Rainfall
	}
	return 0
}

func (m *RegionTile) GetVegetation() int32 {
	if m != nil && m.Vegetation != nil {
		return *m.Vegetation
	}
	return 0
}

func (m *RegionTile) GetTemperature() int32 {
	if m != nil && m.Temperature != nil {
		return *m.Temperature
	}
	return 0
}

func (m *RegionTile) GetEvilness() int32 {
	if m != nil && m.Evilness != nil {
		return *m.Evilness
	}
	return 0
}

func (m *RegionTile) GetDrainage() int32 {
	if m != nil && m.Drainage != nil {
		return *m.Drainage
	}
	return 0
}

func (m *RegionTile) GetVolcanism() int32 {
	if m != nil && m.Volcanism != nil {
		return *m.Volcanism
	}
	return 0
}

func (m *RegionTile) GetSavagery() int32 {
	if m != nil && m.Savagery != nil {
		return *m.Savagery
	}
	return 0
}

func (m *RegionTile) GetSalinity() int32 {
	if m != nil && m.Salinity != nil {
		return *m.Salinity
	}
	return 0
}

func (m *RegionTile) GetRiverTiles() *RiverTile {
	if m != nil {
		return m.RiverTiles
	}
	return nil
}

func (m *RegionTile) GetWaterElevation() int32 {
	if m != nil && m.WaterElevation != nil {
		return *m.WaterElevation
	}
	return 0
}

func (m *RegionTile) GetSurfaceMaterial() *MatPair {
	if m != nil {
		return m.SurfaceMaterial
	}
	return nil
}

func (m *RegionTile) GetPlantMaterials() []*MatPair {
	if m != nil {
		return m.PlantMaterials
	}
	return nil
}

func (m *RegionTile) GetBuildings() []*SiteRealizationBuilding {
	if m != nil {
		return m.Buildings
	}
	return nil
}

func (m *RegionTile) GetStoneMaterials() []*MatPair {
	if m != nil {
		return m.StoneMaterials
	}
	return nil
}

func (m *RegionTile) GetTreeMaterials() []*MatPair {
	if m != nil {
		return m.TreeMaterials
	}
	return nil
}

func (m *RegionTile) GetSnow() int32 {
	if m != nil && m.Snow != nil {
		return *m.Snow
	}
	return 0
}

type RegionMap struct {
	MapX                 *int32        `protobuf:"varint,1,opt,name=map_x,json=mapX" json:"map_x,omitempty"`
	MapY                 *int32        `protobuf:"varint,2,opt,name=map_y,json=mapY" json:"map_y,omitempty"`
	Name                 *string       `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	NameEnglish          *string       `protobuf:"bytes,4,opt,name=name_english,json=nameEnglish" json:"name_english,omitempty"`
	Tiles                []*RegionTile `protobuf:"bytes,5,rep,name=tiles" json:"tiles,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *RegionMap) Reset()         { *m = RegionMap{} }
func (m *RegionMap) String() string { return proto.CompactTextString(m) }
func (*RegionMap) ProtoMessage()    {}
func (*RegionMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{39}
}
func (m *RegionMap) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegionMap.Unmarshal(m, b)
}
func (m *RegionMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegionMap.Marshal(b, m, deterministic)
}
func (dst *RegionMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegionMap.Merge(dst, src)
}
func (m *RegionMap) XXX_Size() int {
	return xxx_messageInfo_RegionMap.Size(m)
}
func (m *RegionMap) XXX_DiscardUnknown() {
	xxx_messageInfo_RegionMap.DiscardUnknown(m)
}

var xxx_messageInfo_RegionMap proto.InternalMessageInfo

func (m *RegionMap) GetMapX() int32 {
	if m != nil && m.MapX != nil {
		return *m.MapX
	}
	return 0
}

func (m *RegionMap) GetMapY() int32 {
	if m != nil && m.MapY != nil {
		return *m.MapY
	}
	return 0
}

func (m *RegionMap) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *RegionMap) GetNameEnglish() string {
	if m != nil && m.NameEnglish != nil {
		return *m.NameEnglish
	}
	return ""
}

func (m *RegionMap) GetTiles() []*RegionTile {
	if m != nil {
		return m.Tiles
	}
	return nil
}

type RegionMaps struct {
	WorldMaps            []*WorldMap  `protobuf:"bytes,1,rep,name=world_maps,json=worldMaps" json:"world_maps,omitempty"`
	RegionMaps           []*RegionMap `protobuf:"bytes,2,rep,name=region_maps,json=regionMaps" json:"region_maps,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *RegionMaps) Reset()         { *m = RegionMaps{} }
func (m *RegionMaps) String() string { return proto.CompactTextString(m) }
func (*RegionMaps) ProtoMessage()    {}
func (*RegionMaps) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{40}
}
func (m *RegionMaps) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegionMaps.Unmarshal(m, b)
}
func (m *RegionMaps) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegionMaps.Marshal(b, m, deterministic)
}
func (dst *RegionMaps) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegionMaps.Merge(dst, src)
}
func (m *RegionMaps) XXX_Size() int {
	return xxx_messageInfo_RegionMaps.Size(m)
}
func (m *RegionMaps) XXX_DiscardUnknown() {
	xxx_messageInfo_RegionMaps.DiscardUnknown(m)
}

var xxx_messageInfo_RegionMaps proto.InternalMessageInfo

func (m *RegionMaps) GetWorldMaps() []*WorldMap {
	if m != nil {
		return m.WorldMaps
	}
	return nil
}

func (m *RegionMaps) GetRegionMaps() []*RegionMap {
	if m != nil {
		return m.RegionMaps
	}
	return nil
}

type PatternDescriptor struct {
	Id                   *string            `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Colors               []*ColorDefinition `protobuf:"bytes,2,rep,name=colors" json:"colors,omitempty"`
	Pattern              *PatternType       `protobuf:"varint,3,opt,name=pattern,enum=RemoteFortressReader.PatternType" json:"pattern,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *PatternDescriptor) Reset()         { *m = PatternDescriptor{} }
func (m *PatternDescriptor) String() string { return proto.CompactTextString(m) }
func (*PatternDescriptor) ProtoMessage()    {}
func (*PatternDescriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{41}
}
func (m *PatternDescriptor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PatternDescriptor.Unmarshal(m, b)
}
func (m *PatternDescriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PatternDescriptor.Marshal(b, m, deterministic)
}
func (dst *PatternDescriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PatternDescriptor.Merge(dst, src)
}
func (m *PatternDescriptor) XXX_Size() int {
	return xxx_messageInfo_PatternDescriptor.Size(m)
}
func (m *PatternDescriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_PatternDescriptor.DiscardUnknown(m)
}

var xxx_messageInfo_PatternDescriptor proto.InternalMessageInfo

func (m *PatternDescriptor) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *PatternDescriptor) GetColors() []*ColorDefinition {
	if m != nil {
		return m.Colors
	}
	return nil
}

func (m *PatternDescriptor) GetPattern() PatternType {
	if m != nil && m.Pattern != nil {
		return *m.Pattern
	}
	return PatternType_MONOTONE
}

type ColorModifierRaw struct {
	Patterns             []*PatternDescriptor `protobuf:"bytes,1,rep,name=patterns" json:"patterns,omitempty"`
	BodyPartId           []int32              `protobuf:"varint,2,rep,name=body_part_id,json=bodyPartId" json:"body_part_id,omitempty"`
	TissueLayerId        []int32              `protobuf:"varint,3,rep,name=tissue_layer_id,json=tissueLayerId" json:"tissue_layer_id,omitempty"`
	StartDate            *int32               `protobuf:"varint,4,opt,name=start_date,json=startDate" json:"start_date,omitempty"`
	EndDate              *int32               `protobuf:"varint,5,opt,name=end_date,json=endDate" json:"end_date,omitempty"`
	Part                 *string              `protobuf:"bytes,6,opt,name=part" json:"part,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ColorModifierRaw) Reset()         { *m = ColorModifierRaw{} }
func (m *ColorModifierRaw) String() string { return proto.CompactTextString(m) }
func (*ColorModifierRaw) ProtoMessage()    {}
func (*ColorModifierRaw) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{42}
}
func (m *ColorModifierRaw) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ColorModifierRaw.Unmarshal(m, b)
}
func (m *ColorModifierRaw) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ColorModifierRaw.Marshal(b, m, deterministic)
}
func (dst *ColorModifierRaw) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ColorModifierRaw.Merge(dst, src)
}
func (m *ColorModifierRaw) XXX_Size() int {
	return xxx_messageInfo_ColorModifierRaw.Size(m)
}
func (m *ColorModifierRaw) XXX_DiscardUnknown() {
	xxx_messageInfo_ColorModifierRaw.DiscardUnknown(m)
}

var xxx_messageInfo_ColorModifierRaw proto.InternalMessageInfo

func (m *ColorModifierRaw) GetPatterns() []*PatternDescriptor {
	if m != nil {
		return m.Patterns
	}
	return nil
}

func (m *ColorModifierRaw) GetBodyPartId() []int32 {
	if m != nil {
		return m.BodyPartId
	}
	return nil
}

func (m *ColorModifierRaw) GetTissueLayerId() []int32 {
	if m != nil {
		return m.TissueLayerId
	}
	return nil
}

func (m *ColorModifierRaw) GetStartDate() int32 {
	if m != nil && m.StartDate != nil {
		return *m.StartDate
	}
	return 0
}

func (m *ColorModifierRaw) GetEndDate() int32 {
	if m != nil && m.EndDate != nil {
		return *m.EndDate
	}
	return 0
}

func (m *ColorModifierRaw) GetPart() string {
	if m != nil && m.Part != nil {
		return *m.Part
	}
	return ""
}

type BodyPartLayerRaw struct {
	LayerName            *string  `protobuf:"bytes,1,opt,name=layer_name,json=layerName" json:"layer_name,omitempty"`
	TissueId             *int32   `protobuf:"varint,2,opt,name=tissue_id,json=tissueId" json:"tissue_id,omitempty"`
	LayerDepth           *int32   `protobuf:"varint,3,opt,name=layer_depth,json=layerDepth" json:"layer_depth,omitempty"`
	BpModifiers          []int32  `protobuf:"varint,4,rep,name=bp_modifiers,json=bpModifiers" json:"bp_modifiers,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BodyPartLayerRaw) Reset()         { *m = BodyPartLayerRaw{} }
func (m *BodyPartLayerRaw) String() string { return proto.CompactTextString(m) }
func (*BodyPartLayerRaw) ProtoMessage()    {}
func (*BodyPartLayerRaw) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{43}
}
func (m *BodyPartLayerRaw) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BodyPartLayerRaw.Unmarshal(m, b)
}
func (m *BodyPartLayerRaw) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BodyPartLayerRaw.Marshal(b, m, deterministic)
}
func (dst *BodyPartLayerRaw) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BodyPartLayerRaw.Merge(dst, src)
}
func (m *BodyPartLayerRaw) XXX_Size() int {
	return xxx_messageInfo_BodyPartLayerRaw.Size(m)
}
func (m *BodyPartLayerRaw) XXX_DiscardUnknown() {
	xxx_messageInfo_BodyPartLayerRaw.DiscardUnknown(m)
}

var xxx_messageInfo_BodyPartLayerRaw proto.InternalMessageInfo

func (m *BodyPartLayerRaw) GetLayerName() string {
	if m != nil && m.LayerName != nil {
		return *m.LayerName
	}
	return ""
}

func (m *BodyPartLayerRaw) GetTissueId() int32 {
	if m != nil && m.TissueId != nil {
		return *m.TissueId
	}
	return 0
}

func (m *BodyPartLayerRaw) GetLayerDepth() int32 {
	if m != nil && m.LayerDepth != nil {
		return *m.LayerDepth
	}
	return 0
}

func (m *BodyPartLayerRaw) GetBpModifiers() []int32 {
	if m != nil {
		return m.BpModifiers
	}
	return nil
}

type BodyPartRaw struct {
	Token                *string             `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	Category             *string             `protobuf:"bytes,2,opt,name=category" json:"category,omitempty"`
	Parent               *int32              `protobuf:"varint,3,opt,name=parent" json:"parent,omitempty"`
	Flags                []bool              `protobuf:"varint,4,rep,name=flags" json:"flags,omitempty"`
	Layers               []*BodyPartLayerRaw `protobuf:"bytes,5,rep,name=layers" json:"layers,omitempty"`
	Relsize              *int32              `protobuf:"varint,6,opt,name=relsize" json:"relsize,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *BodyPartRaw) Reset()         { *m = BodyPartRaw{} }
func (m *BodyPartRaw) String() string { return proto.CompactTextString(m) }
func (*BodyPartRaw) ProtoMessage()    {}
func (*BodyPartRaw) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{44}
}
func (m *BodyPartRaw) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BodyPartRaw.Unmarshal(m, b)
}
func (m *BodyPartRaw) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BodyPartRaw.Marshal(b, m, deterministic)
}
func (dst *BodyPartRaw) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BodyPartRaw.Merge(dst, src)
}
func (m *BodyPartRaw) XXX_Size() int {
	return xxx_messageInfo_BodyPartRaw.Size(m)
}
func (m *BodyPartRaw) XXX_DiscardUnknown() {
	xxx_messageInfo_BodyPartRaw.DiscardUnknown(m)
}

var xxx_messageInfo_BodyPartRaw proto.InternalMessageInfo

func (m *BodyPartRaw) GetToken() string {
	if m != nil && m.Token != nil {
		return *m.Token
	}
	return ""
}

func (m *BodyPartRaw) GetCategory() string {
	if m != nil && m.Category != nil {
		return *m.Category
	}
	return ""
}

func (m *BodyPartRaw) GetParent() int32 {
	if m != nil && m.Parent != nil {
		return *m.Parent
	}
	return 0
}

func (m *BodyPartRaw) GetFlags() []bool {
	if m != nil {
		return m.Flags
	}
	return nil
}

func (m *BodyPartRaw) GetLayers() []*BodyPartLayerRaw {
	if m != nil {
		return m.Layers
	}
	return nil
}

func (m *BodyPartRaw) GetRelsize() int32 {
	if m != nil && m.Relsize != nil {
		return *m.Relsize
	}
	return 0
}

type BpAppearanceModifier struct {
	Type                 *string  `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	ModMin               *int32   `protobuf:"varint,2,opt,name=mod_min,json=modMin" json:"mod_min,omitempty"`
	ModMax               *int32   `protobuf:"varint,3,opt,name=mod_max,json=modMax" json:"mod_max,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BpAppearanceModifier) Reset()         { *m = BpAppearanceModifier{} }
func (m *BpAppearanceModifier) String() string { return proto.CompactTextString(m) }
func (*BpAppearanceModifier) ProtoMessage()    {}
func (*BpAppearanceModifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{45}
}
func (m *BpAppearanceModifier) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BpAppearanceModifier.Unmarshal(m, b)
}
func (m *BpAppearanceModifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BpAppearanceModifier.Marshal(b, m, deterministic)
}
func (dst *BpAppearanceModifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BpAppearanceModifier.Merge(dst, src)
}
func (m *BpAppearanceModifier) XXX_Size() int {
	return xxx_messageInfo_BpAppearanceModifier.Size(m)
}
func (m *BpAppearanceModifier) XXX_DiscardUnknown() {
	xxx_messageInfo_BpAppearanceModifier.DiscardUnknown(m)
}

var xxx_messageInfo_BpAppearanceModifier proto.InternalMessageInfo

func (m *BpAppearanceModifier) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *BpAppearanceModifier) GetModMin() int32 {
	if m != nil && m.ModMin != nil {
		return *m.ModMin
	}
	return 0
}

func (m *BpAppearanceModifier) GetModMax() int32 {
	if m != nil && m.ModMax != nil {
		return *m.ModMax
	}
	return 0
}

type TissueRaw struct {
	Id                   *string  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name                 *string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Material             *MatPair `protobuf:"bytes,3,opt,name=material" json:"material,omitempty"`
	SubordinateToTissue  *string  `protobuf:"bytes,4,opt,name=subordinate_to_tissue,json=subordinateToTissue" json:"subordinate_to_tissue,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TissueRaw) Reset()         { *m = TissueRaw{} }
func (m *TissueRaw) String() string { return proto.CompactTextString(m) }
func (*TissueRaw) ProtoMessage()    {}
func (*TissueRaw) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{46}
}
func (m *TissueRaw) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TissueRaw.Unmarshal(m, b)
}
func (m *TissueRaw) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TissueRaw.Marshal(b, m, deterministic)
}
func (dst *TissueRaw) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TissueRaw.Merge(dst, src)
}
func (m *TissueRaw) XXX_Size() int {
	return xxx_messageInfo_TissueRaw.Size(m)
}
func (m *TissueRaw) XXX_DiscardUnknown() {
	xxx_messageInfo_TissueRaw.DiscardUnknown(m)
}

var xxx_messageInfo_TissueRaw proto.InternalMessageInfo

func (m *TissueRaw) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *TissueRaw) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *TissueRaw) GetMaterial() *MatPair {
	if m != nil {
		return m.Material
	}
	return nil
}

func (m *TissueRaw) GetSubordinateToTissue() string {
	if m != nil && m.SubordinateToTissue != nil {
		return *m.SubordinateToTissue
	}
	return ""
}

type CasteRaw struct {
	Index                   *int32                  `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	CasteId                 *string                 `protobuf:"bytes,2,opt,name=caste_id,json=casteId" json:"caste_id,omitempty"`
	CasteName               []string                `protobuf:"bytes,3,rep,name=caste_name,json=casteName" json:"caste_name,omitempty"`
	BabyName                []string                `protobuf:"bytes,4,rep,name=baby_name,json=babyName" json:"baby_name,omitempty"`
	ChildName               []string                `protobuf:"bytes,5,rep,name=child_name,json=childName" json:"child_name,omitempty"`
	Gender                  *int32                  `protobuf:"varint,6,opt,name=gender" json:"gender,omitempty"`
	BodyParts               []*BodyPartRaw          `protobuf:"bytes,7,rep,name=body_parts,json=bodyParts" json:"body_parts,omitempty"`
	TotalRelsize            *int32                  `protobuf:"varint,8,opt,name=total_relsize,json=totalRelsize" json:"total_relsize,omitempty"`
	Modifiers               []*BpAppearanceModifier `protobuf:"bytes,9,rep,name=modifiers" json:"modifiers,omitempty"`
	ModifierIdx             []int32                 `protobuf:"varint,10,rep,name=modifier_idx,json=modifierIdx" json:"modifier_idx,omitempty"`
	PartIdx                 []int32                 `protobuf:"varint,11,rep,name=part_idx,json=partIdx" json:"part_idx,omitempty"`
	LayerIdx                []int32                 `protobuf:"varint,12,rep,name=layer_idx,json=layerIdx" json:"layer_idx,omitempty"`
	BodyAppearanceModifiers []*BpAppearanceModifier `protobuf:"bytes,13,rep,name=body_appearance_modifiers,json=bodyAppearanceModifiers" json:"body_appearance_modifiers,omitempty"`
	ColorModifiers          []*ColorModifierRaw     `protobuf:"bytes,14,rep,name=color_modifiers,json=colorModifiers" json:"color_modifiers,omitempty"`
	Description             *string                 `protobuf:"bytes,15,opt,name=description" json:"description,omitempty"`
	AdultSize               *int32                  `protobuf:"varint,16,opt,name=adult_size,json=adultSize" json:"adult_size,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}                `json:"-"`
	XXX_unrecognized        []byte                  `json:"-"`
	XXX_sizecache           int32                   `json:"-"`
}

func (m *CasteRaw) Reset()         { *m = CasteRaw{} }
func (m *CasteRaw) String() string { return proto.CompactTextString(m) }
func (*CasteRaw) ProtoMessage()    {}
func (*CasteRaw) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{47}
}
func (m *CasteRaw) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CasteRaw.Unmarshal(m, b)
}
func (m *CasteRaw) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CasteRaw.Marshal(b, m, deterministic)
}
func (dst *CasteRaw) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CasteRaw.Merge(dst, src)
}
func (m *CasteRaw) XXX_Size() int {
	return xxx_messageInfo_CasteRaw.Size(m)
}
func (m *CasteRaw) XXX_DiscardUnknown() {
	xxx_messageInfo_CasteRaw.DiscardUnknown(m)
}

var xxx_messageInfo_CasteRaw proto.InternalMessageInfo

func (m *CasteRaw) GetIndex() int32 {
	if m != nil && m.Index != nil {
		return *m.Index
	}
	return 0
}

func (m *CasteRaw) GetCasteId() string {
	if m != nil && m.CasteId != nil {
		return *m.CasteId
	}
	return ""
}

func (m *CasteRaw) GetCasteName() []string {
	if m != nil {
		return m.CasteName
	}
	return nil
}

func (m *CasteRaw) GetBabyName() []string {
	if m != nil {
		return m.BabyName
	}
	return nil
}

func (m *CasteRaw) GetChildName() []string {
	if m != nil {
		return m.ChildName
	}
	return nil
}

func (m *CasteRaw) GetGender() int32 {
	if m != nil && m.Gender != nil {
		return *m.Gender
	}
	return 0
}

func (m *CasteRaw) GetBodyParts() []*BodyPartRaw {
	if m != nil {
		return m.BodyParts
	}
	return nil
}

func (m *CasteRaw) GetTotalRelsize() int32 {
	if m != nil && m.TotalRelsize != nil {
		return *m.TotalRelsize
	}
	return 0
}

func (m *CasteRaw) GetModifiers() []*BpAppearanceModifier {
	if m != nil {
		return m.Modifiers
	}
	return nil
}

func (m *CasteRaw) GetModifierIdx() []int32 {
	if m != nil {
		return m.ModifierIdx
	}
	return nil
}

func (m *CasteRaw) GetPartIdx() []int32 {
	if m != nil {
		return m.PartIdx
	}
	return nil
}

func (m *CasteRaw) GetLayerIdx() []int32 {
	if m != nil {
		return m.LayerIdx
	}
	return nil
}

func (m *CasteRaw) GetBodyAppearanceModifiers() []*BpAppearanceModifier {
	if m != nil {
		return m.BodyAppearanceModifiers
	}
	return nil
}

func (m *CasteRaw) GetColorModifiers() []*ColorModifierRaw {
	if m != nil {
		return m.ColorModifiers
	}
	return nil
}

func (m *CasteRaw) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *CasteRaw) GetAdultSize() int32 {
	if m != nil && m.AdultSize != nil {
		return *m.AdultSize
	}
	return 0
}

type CreatureRaw struct {
	Index                *int32           `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	CreatureId           *string          `protobuf:"bytes,2,opt,name=creature_id,json=creatureId" json:"creature_id,omitempty"`
	Name                 []string         `protobuf:"bytes,3,rep,name=name" json:"name,omitempty"`
	GeneralBabyName      []string         `protobuf:"bytes,4,rep,name=general_baby_name,json=generalBabyName" json:"general_baby_name,omitempty"`
	GeneralChildName     []string         `protobuf:"bytes,5,rep,name=general_child_name,json=generalChildName" json:"general_child_name,omitempty"`
	CreatureTile         *int32           `protobuf:"varint,6,opt,name=creature_tile,json=creatureTile" json:"creature_tile,omitempty"`
	CreatureSoldierTile  *int32           `protobuf:"varint,7,opt,name=creature_soldier_tile,json=creatureSoldierTile" json:"creature_soldier_tile,omitempty"`
	Color                *ColorDefinition `protobuf:"bytes,8,opt,name=color" json:"color,omitempty"`
	Adultsize            *int32           `protobuf:"varint,9,opt,name=adultsize" json:"adultsize,omitempty"`
	Caste                []*CasteRaw      `protobuf:"bytes,10,rep,name=caste" json:"caste,omitempty"`
	Tissues              []*TissueRaw     `protobuf:"bytes,11,rep,name=tissues" json:"tissues,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *CreatureRaw) Reset()         { *m = CreatureRaw{} }
func (m *CreatureRaw) String() string { return proto.CompactTextString(m) }
func (*CreatureRaw) ProtoMessage()    {}
func (*CreatureRaw) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{48}
}
func (m *CreatureRaw) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreatureRaw.Unmarshal(m, b)
}
func (m *CreatureRaw) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreatureRaw.Marshal(b, m, deterministic)
}
func (dst *CreatureRaw) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatureRaw.Merge(dst, src)
}
func (m *CreatureRaw) XXX_Size() int {
	return xxx_messageInfo_CreatureRaw.Size(m)
}
func (m *CreatureRaw) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatureRaw.DiscardUnknown(m)
}

var xxx_messageInfo_CreatureRaw proto.InternalMessageInfo

func (m *CreatureRaw) GetIndex() int32 {
	if m != nil && m.Index != nil {
		return *m.Index
	}
	return 0
}

func (m *CreatureRaw) GetCreatureId() string {
	if m != nil && m.CreatureId != nil {
		return *m.CreatureId
	}
	return ""
}

func (m *CreatureRaw) GetName() []string {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *CreatureRaw) GetGeneralBabyName() []string {
	if m != nil {
		return m.GeneralBabyName
	}
	return nil
}

func (m *CreatureRaw) GetGeneralChildName() []string {
	if m != nil {
		return m.GeneralChildName
	}
	return nil
}

func (m *CreatureRaw) GetCreatureTile() int32 {
	if m != nil && m.CreatureTile != nil {
		return *m.CreatureTile
	}
	return 0
}

func (m *CreatureRaw) GetCreatureSoldierTile() int32 {
	if m != nil && m.CreatureSoldierTile != nil {
		return *m.CreatureSoldierTile
	}
	return 0
}

func (m *CreatureRaw) GetColor() *ColorDefinition {
	if m != nil {
		return m.Color
	}
	return nil
}

func (m *CreatureRaw) GetAdultsize() int32 {
	if m != nil && m.Adultsize != nil {
		return *m.Adultsize
	}
	return 0
}

func (m *CreatureRaw) GetCaste() []*CasteRaw {
	if m != nil {
		return m.Caste
	}
	return nil
}

func (m *CreatureRaw) GetTissues() []*TissueRaw {
	if m != nil {
		return m.Tissues
	}
	return nil
}

type CreatureRawList struct {
	CreatureRaws         []*CreatureRaw `protobuf:"bytes,1,rep,name=creature_raws,json=creatureRaws" json:"creature_raws,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *CreatureRawList) Reset()         { *m = CreatureRawList{} }
func (m *CreatureRawList) String() string { return proto.CompactTextString(m) }
func (*CreatureRawList) ProtoMessage()    {}
func (*CreatureRawList) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{49}
}
func (m *CreatureRawList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreatureRawList.Unmarshal(m, b)
}
func (m *CreatureRawList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreatureRawList.Marshal(b, m, deterministic)
}
func (dst *CreatureRawList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatureRawList.Merge(dst, src)
}
func (m *CreatureRawList) XXX_Size() int {
	return xxx_messageInfo_CreatureRawList.Size(m)
}
func (m *CreatureRawList) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatureRawList.DiscardUnknown(m)
}

var xxx_messageInfo_CreatureRawList proto.InternalMessageInfo

func (m *CreatureRawList) GetCreatureRaws() []*CreatureRaw {
	if m != nil {
		return m.CreatureRaws
	}
	return nil
}

type Army struct {
	Id                   *int32            `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	PosX                 *int32            `protobuf:"varint,2,opt,name=pos_x,json=posX" json:"pos_x,omitempty"`
	PosY                 *int32            `protobuf:"varint,3,opt,name=pos_y,json=posY" json:"pos_y,omitempty"`
	PosZ                 *int32            `protobuf:"varint,4,opt,name=pos_z,json=posZ" json:"pos_z,omitempty"`
	Leader               *UnitDefinition   `protobuf:"bytes,5,opt,name=leader" json:"leader,omitempty"`
	Members              []*UnitDefinition `protobuf:"bytes,6,rep,name=members" json:"members,omitempty"`
	Flags                *uint32           `protobuf:"varint,7,opt,name=flags" json:"flags,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Army) Reset()         { *m = Army{} }
func (m *Army) String() string { return proto.CompactTextString(m) }
func (*Army) ProtoMessage()    {}
func (*Army) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{50}
}
func (m *Army) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Army.Unmarshal(m, b)
}
func (m *Army) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Army.Marshal(b, m, deterministic)
}
func (dst *Army) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Army.Merge(dst, src)
}
func (m *Army) XXX_Size() int {
	return xxx_messageInfo_Army.Size(m)
}
func (m *Army) XXX_DiscardUnknown() {
	xxx_messageInfo_Army.DiscardUnknown(m)
}

var xxx_messageInfo_Army proto.InternalMessageInfo

func (m *Army) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Army) GetPosX() int32 {
	if m != nil && m.PosX != nil {
		return *m.PosX
	}
	return 0
}

func (m *Army) GetPosY() int32 {
	if m != nil && m.PosY != nil {
		return *m.PosY
	}
	return 0
}

func (m *Army) GetPosZ() int32 {
	if m != nil && m.PosZ != nil {
		return *m.PosZ
	}
	return 0
}

func (m *Army) GetLeader() *UnitDefinition {
	if m != nil {
		return m.Leader
	}
	return nil
}

func (m *Army) GetMembers() []*UnitDefinition {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *Army) GetFlags() uint32 {
	if m != nil && m.Flags != nil {
		return *m.Flags
	}
	return 0
}

type ArmyList struct {
	Armies               []*Army  `protobuf:"bytes,1,rep,name=armies" json:"armies,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArmyList) Reset()         { *m = ArmyList{} }
func (m *ArmyList) String() string { return proto.CompactTextString(m) }
func (*ArmyList) ProtoMessage()    {}
func (*ArmyList) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{51}
}
func (m *ArmyList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArmyList.Unmarshal(m, b)
}
func (m *ArmyList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArmyList.Marshal(b, m, deterministic)
}
func (dst *ArmyList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArmyList.Merge(dst, src)
}
func (m *ArmyList) XXX_Size() int {
	return xxx_messageInfo_ArmyList.Size(m)
}
func (m *ArmyList) XXX_DiscardUnknown() {
	xxx_messageInfo_ArmyList.DiscardUnknown(m)
}

var xxx_messageInfo_ArmyList proto.InternalMessageInfo

func (m *ArmyList) GetArmies() []*Army {
	if m != nil {
		return m.Armies
	}
	return nil
}

type GrowthPrint struct {
	Priority             *int32   `protobuf:"varint,1,opt,name=priority" json:"priority,omitempty"`
	Color                *int32   `protobuf:"varint,2,opt,name=color" json:"color,omitempty"`
	TimingStart          *int32   `protobuf:"varint,3,opt,name=timing_start,json=timingStart" json:"timing_start,omitempty"`
	TimingEnd            *int32   `protobuf:"varint,4,opt,name=timing_end,json=timingEnd" json:"timing_end,omitempty"`
	Tile                 *int32   `protobuf:"varint,5,opt,name=tile" json:"tile,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GrowthPrint) Reset()         { *m = GrowthPrint{} }
func (m *GrowthPrint) String() string { return proto.CompactTextString(m) }
func (*GrowthPrint) ProtoMessage()    {}
func (*GrowthPrint) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{52}
}
func (m *GrowthPrint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GrowthPrint.Unmarshal(m, b)
}
func (m *GrowthPrint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GrowthPrint.Marshal(b, m, deterministic)
}
func (dst *GrowthPrint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GrowthPrint.Merge(dst, src)
}
func (m *GrowthPrint) XXX_Size() int {
	return xxx_messageInfo_GrowthPrint.Size(m)
}
func (m *GrowthPrint) XXX_DiscardUnknown() {
	xxx_messageInfo_GrowthPrint.DiscardUnknown(m)
}

var xxx_messageInfo_GrowthPrint proto.InternalMessageInfo

func (m *GrowthPrint) GetPriority() int32 {
	if m != nil && m.Priority != nil {
		return *m.Priority
	}
	return 0
}

func (m *GrowthPrint) GetColor() int32 {
	if m != nil && m.Color != nil {
		return *m.Color
	}
	return 0
}

func (m *GrowthPrint) GetTimingStart() int32 {
	if m != nil && m.TimingStart != nil {
		return *m.TimingStart
	}
	return 0
}

func (m *GrowthPrint) GetTimingEnd() int32 {
	if m != nil && m.TimingEnd != nil {
		return *m.TimingEnd
	}
	return 0
}

func (m *GrowthPrint) GetTile() int32 {
	if m != nil && m.Tile != nil {
		return *m.Tile
	}
	return 0
}

type TreeGrowth struct {
	Index                *int32         `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	Id                   *string        `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Name                 *string        `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Mat                  *MatPair       `protobuf:"bytes,4,opt,name=mat" json:"mat,omitempty"`
	Prints               []*GrowthPrint `protobuf:"bytes,5,rep,name=prints" json:"prints,omitempty"`
	TimingStart          *int32         `protobuf:"varint,6,opt,name=timing_start,json=timingStart" json:"timing_start,omitempty"`
	TimingEnd            *int32         `protobuf:"varint,7,opt,name=timing_end,json=timingEnd" json:"timing_end,omitempty"`
	Twigs                *bool          `protobuf:"varint,8,opt,name=twigs" json:"twigs,omitempty"`
	LightBranches        *bool          `protobuf:"varint,9,opt,name=light_branches,json=lightBranches" json:"light_branches,omitempty"`
	HeavyBranches        *bool          `protobuf:"varint,10,opt,name=heavy_branches,json=heavyBranches" json:"heavy_branches,omitempty"`
	Trunk                *bool          `protobuf:"varint,11,opt,name=trunk" json:"trunk,omitempty"`
	Roots                *bool          `protobuf:"varint,12,opt,name=roots" json:"roots,omitempty"`
	Cap                  *bool          `protobuf:"varint,13,opt,name=cap" json:"cap,omitempty"`
	Sapling              *bool          `protobuf:"varint,14,opt,name=sapling" json:"sapling,omitempty"`
	TrunkHeightStart     *int32         `protobuf:"varint,15,opt,name=trunk_height_start,json=trunkHeightStart" json:"trunk_height_start,omitempty"`
	TrunkHeightEnd       *int32         `protobuf:"varint,16,opt,name=trunk_height_end,json=trunkHeightEnd" json:"trunk_height_end,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *TreeGrowth) Reset()         { *m = TreeGrowth{} }
func (m *TreeGrowth) String() string { return proto.CompactTextString(m) }
func (*TreeGrowth) ProtoMessage()    {}
func (*TreeGrowth) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{53}
}
func (m *TreeGrowth) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TreeGrowth.Unmarshal(m, b)
}
func (m *TreeGrowth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TreeGrowth.Marshal(b, m, deterministic)
}
func (dst *TreeGrowth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TreeGrowth.Merge(dst, src)
}
func (m *TreeGrowth) XXX_Size() int {
	return xxx_messageInfo_TreeGrowth.Size(m)
}
func (m *TreeGrowth) XXX_DiscardUnknown() {
	xxx_messageInfo_TreeGrowth.DiscardUnknown(m)
}

var xxx_messageInfo_TreeGrowth proto.InternalMessageInfo

func (m *TreeGrowth) GetIndex() int32 {
	if m != nil && m.Index != nil {
		return *m.Index
	}
	return 0
}

func (m *TreeGrowth) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *TreeGrowth) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *TreeGrowth) GetMat() *MatPair {
	if m != nil {
		return m.Mat
	}
	return nil
}

func (m *TreeGrowth) GetPrints() []*GrowthPrint {
	if m != nil {
		return m.Prints
	}
	return nil
}

func (m *TreeGrowth) GetTimingStart() int32 {
	if m != nil && m.TimingStart != nil {
		return *m.TimingStart
	}
	return 0
}

func (m *TreeGrowth) GetTimingEnd() int32 {
	if m != nil && m.TimingEnd != nil {
		return *m.TimingEnd
	}
	return 0
}

func (m *TreeGrowth) GetTwigs() bool {
	if m != nil && m.Twigs != nil {
		return *m.Twigs
	}
	return false
}

func (m *TreeGrowth) GetLightBranches() bool {
	if m != nil && m.LightBranches != nil {
		return *m.LightBranches
	}
	return false
}

func (m *TreeGrowth) GetHeavyBranches() bool {
	if m != nil && m.HeavyBranches != nil {
		return *m.HeavyBranches
	}
	return false
}

func (m *TreeGrowth) GetTrunk() bool {
	if m != nil && m.Trunk != nil {
		return *m.Trunk
	}
	return false
}

func (m *TreeGrowth) GetRoots() bool {
	if m != nil && m.Roots != nil {
		return *m.Roots
	}
	return false
}

func (m *TreeGrowth) GetCap() bool {
	if m != nil && m.Cap != nil {
		return *m.Cap
	}
	return false
}

func (m *TreeGrowth) GetSapling() bool {
	if m != nil && m.Sapling != nil {
		return *m.Sapling
	}
	return false
}

func (m *TreeGrowth) GetTrunkHeightStart() int32 {
	if m != nil && m.TrunkHeightStart != nil {
		return *m.TrunkHeightStart
	}
	return 0
}

func (m *TreeGrowth) GetTrunkHeightEnd() int32 {
	if m != nil && m.TrunkHeightEnd != nil {
		return *m.TrunkHeightEnd
	}
	return 0
}

type PlantRaw struct {
	Index                *int32        `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	Id                   *string       `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Name                 *string       `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Growths              []*TreeGrowth `protobuf:"bytes,4,rep,name=growths" json:"growths,omitempty"`
	Tile                 *int32        `protobuf:"varint,5,opt,name=tile" json:"tile,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *PlantRaw) Reset()         { *m = PlantRaw{} }
func (m *PlantRaw) String() string { return proto.CompactTextString(m) }
func (*PlantRaw) ProtoMessage()    {}
func (*PlantRaw) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{54}
}
func (m *PlantRaw) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlantRaw.Unmarshal(m, b)
}
func (m *PlantRaw) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlantRaw.Marshal(b, m, deterministic)
}
func (dst *PlantRaw) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlantRaw.Merge(dst, src)
}
func (m *PlantRaw) XXX_Size() int {
	return xxx_messageInfo_PlantRaw.Size(m)
}
func (m *PlantRaw) XXX_DiscardUnknown() {
	xxx_messageInfo_PlantRaw.DiscardUnknown(m)
}

var xxx_messageInfo_PlantRaw proto.InternalMessageInfo

func (m *PlantRaw) GetIndex() int32 {
	if m != nil && m.Index != nil {
		return *m.Index
	}
	return 0
}

func (m *PlantRaw) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *PlantRaw) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *PlantRaw) GetGrowths() []*TreeGrowth {
	if m != nil {
		return m.Growths
	}
	return nil
}

func (m *PlantRaw) GetTile() int32 {
	if m != nil && m.Tile != nil {
		return *m.Tile
	}
	return 0
}

type PlantRawList struct {
	PlantRaws            []*PlantRaw `protobuf:"bytes,1,rep,name=plant_raws,json=plantRaws" json:"plant_raws,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *PlantRawList) Reset()         { *m = PlantRawList{} }
func (m *PlantRawList) String() string { return proto.CompactTextString(m) }
func (*PlantRawList) ProtoMessage()    {}
func (*PlantRawList) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{55}
}
func (m *PlantRawList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlantRawList.Unmarshal(m, b)
}
func (m *PlantRawList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlantRawList.Marshal(b, m, deterministic)
}
func (dst *PlantRawList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlantRawList.Merge(dst, src)
}
func (m *PlantRawList) XXX_Size() int {
	return xxx_messageInfo_PlantRawList.Size(m)
}
func (m *PlantRawList) XXX_DiscardUnknown() {
	xxx_messageInfo_PlantRawList.DiscardUnknown(m)
}

var xxx_messageInfo_PlantRawList proto.InternalMessageInfo

func (m *PlantRawList) GetPlantRaws() []*PlantRaw {
	if m != nil {
		return m.PlantRaws
	}
	return nil
}

type ScreenTile struct {
	Character            *uint32  `protobuf:"varint,1,opt,name=character" json:"character,omitempty"`
	Foreground           *uint32  `protobuf:"varint,2,opt,name=foreground" json:"foreground,omitempty"`
	Background           *uint32  `protobuf:"varint,3,opt,name=background" json:"background,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ScreenTile) Reset()         { *m = ScreenTile{} }
func (m *ScreenTile) String() string { return proto.CompactTextString(m) }
func (*ScreenTile) ProtoMessage()    {}
func (*ScreenTile) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{56}
}
func (m *ScreenTile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScreenTile.Unmarshal(m, b)
}
func (m *ScreenTile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScreenTile.Marshal(b, m, deterministic)
}
func (dst *ScreenTile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScreenTile.Merge(dst, src)
}
func (m *ScreenTile) XXX_Size() int {
	return xxx_messageInfo_ScreenTile.Size(m)
}
func (m *ScreenTile) XXX_DiscardUnknown() {
	xxx_messageInfo_ScreenTile.DiscardUnknown(m)
}

var xxx_messageInfo_ScreenTile proto.InternalMessageInfo

func (m *ScreenTile) GetCharacter() uint32 {
	if m != nil && m.Character != nil {
		return *m.Character
	}
	return 0
}

func (m *ScreenTile) GetForeground() uint32 {
	if m != nil && m.Foreground != nil {
		return *m.Foreground
	}
	return 0
}

func (m *ScreenTile) GetBackground() uint32 {
	if m != nil && m.Background != nil {
		return *m.Background
	}
	return 0
}

type ScreenCapture struct {
	Width                *uint32       `protobuf:"varint,1,opt,name=width" json:"width,omitempty"`
	Height               *uint32       `protobuf:"varint,2,opt,name=height" json:"height,omitempty"`
	Tiles                []*ScreenTile `protobuf:"bytes,3,rep,name=tiles" json:"tiles,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ScreenCapture) Reset()         { *m = ScreenCapture{} }
func (m *ScreenCapture) String() string { return proto.CompactTextString(m) }
func (*ScreenCapture) ProtoMessage()    {}
func (*ScreenCapture) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{57}
}
func (m *ScreenCapture) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScreenCapture.Unmarshal(m, b)
}
func (m *ScreenCapture) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScreenCapture.Marshal(b, m, deterministic)
}
func (dst *ScreenCapture) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScreenCapture.Merge(dst, src)
}
func (m *ScreenCapture) XXX_Size() int {
	return xxx_messageInfo_ScreenCapture.Size(m)
}
func (m *ScreenCapture) XXX_DiscardUnknown() {
	xxx_messageInfo_ScreenCapture.DiscardUnknown(m)
}

var xxx_messageInfo_ScreenCapture proto.InternalMessageInfo

func (m *ScreenCapture) GetWidth() uint32 {
	if m != nil && m.Width != nil {
		return *m.Width
	}
	return 0
}

func (m *ScreenCapture) GetHeight() uint32 {
	if m != nil && m.Height != nil {
		return *m.Height
	}
	return 0
}

func (m *ScreenCapture) GetTiles() []*ScreenTile {
	if m != nil {
		return m.Tiles
	}
	return nil
}

type KeyboardEvent struct {
	Type                 *uint32  `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Which                *uint32  `protobuf:"varint,2,opt,name=which" json:"which,omitempty"`
	State                *uint32  `protobuf:"varint,3,opt,name=state" json:"state,omitempty"`
	Scancode             *uint32  `protobuf:"varint,4,opt,name=scancode" json:"scancode,omitempty"`
	Sym                  *uint32  `protobuf:"varint,5,opt,name=sym" json:"sym,omitempty"`
	Mod                  *uint32  `protobuf:"varint,6,opt,name=mod" json:"mod,omitempty"`
	Unicode              *uint32  `protobuf:"varint,7,opt,name=unicode" json:"unicode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KeyboardEvent) Reset()         { *m = KeyboardEvent{} }
func (m *KeyboardEvent) String() string { return proto.CompactTextString(m) }
func (*KeyboardEvent) ProtoMessage()    {}
func (*KeyboardEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{58}
}
func (m *KeyboardEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeyboardEvent.Unmarshal(m, b)
}
func (m *KeyboardEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeyboardEvent.Marshal(b, m, deterministic)
}
func (dst *KeyboardEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyboardEvent.Merge(dst, src)
}
func (m *KeyboardEvent) XXX_Size() int {
	return xxx_messageInfo_KeyboardEvent.Size(m)
}
func (m *KeyboardEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyboardEvent.DiscardUnknown(m)
}

var xxx_messageInfo_KeyboardEvent proto.InternalMessageInfo

func (m *KeyboardEvent) GetType() uint32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *KeyboardEvent) GetWhich() uint32 {
	if m != nil && m.Which != nil {
		return *m.Which
	}
	return 0
}

func (m *KeyboardEvent) GetState() uint32 {
	if m != nil && m.State != nil {
		return *m.State
	}
	return 0
}

func (m *KeyboardEvent) GetScancode() uint32 {
	if m != nil && m.Scancode != nil {
		return *m.Scancode
	}
	return 0
}

func (m *KeyboardEvent) GetSym() uint32 {
	if m != nil && m.Sym != nil {
		return *m.Sym
	}
	return 0
}

func (m *KeyboardEvent) GetMod() uint32 {
	if m != nil && m.Mod != nil {
		return *m.Mod
	}
	return 0
}

func (m *KeyboardEvent) GetUnicode() uint32 {
	if m != nil && m.Unicode != nil {
		return *m.Unicode
	}
	return 0
}

type DigCommand struct {
	Designation          *TileDigDesignation `protobuf:"varint,1,opt,name=designation,enum=RemoteFortressReader.TileDigDesignation" json:"designation,omitempty"`
	Locations            []*Coord            `protobuf:"bytes,2,rep,name=locations" json:"locations,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *DigCommand) Reset()         { *m = DigCommand{} }
func (m *DigCommand) String() string { return proto.CompactTextString(m) }
func (*DigCommand) ProtoMessage()    {}
func (*DigCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{59}
}
func (m *DigCommand) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DigCommand.Unmarshal(m, b)
}
func (m *DigCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DigCommand.Marshal(b, m, deterministic)
}
func (dst *DigCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DigCommand.Merge(dst, src)
}
func (m *DigCommand) XXX_Size() int {
	return xxx_messageInfo_DigCommand.Size(m)
}
func (m *DigCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_DigCommand.DiscardUnknown(m)
}

var xxx_messageInfo_DigCommand proto.InternalMessageInfo

func (m *DigCommand) GetDesignation() TileDigDesignation {
	if m != nil && m.Designation != nil {
		return *m.Designation
	}
	return TileDigDesignation_NO_DIG
}

func (m *DigCommand) GetLocations() []*Coord {
	if m != nil {
		return m.Locations
	}
	return nil
}

type SingleBool struct {
	Value                *bool    `protobuf:"varint,1,opt,name=Value,json=value" json:"Value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SingleBool) Reset()         { *m = SingleBool{} }
func (m *SingleBool) String() string { return proto.CompactTextString(m) }
func (*SingleBool) ProtoMessage()    {}
func (*SingleBool) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{60}
}
func (m *SingleBool) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SingleBool.Unmarshal(m, b)
}
func (m *SingleBool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SingleBool.Marshal(b, m, deterministic)
}
func (dst *SingleBool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SingleBool.Merge(dst, src)
}
func (m *SingleBool) XXX_Size() int {
	return xxx_messageInfo_SingleBool.Size(m)
}
func (m *SingleBool) XXX_DiscardUnknown() {
	xxx_messageInfo_SingleBool.DiscardUnknown(m)
}

var xxx_messageInfo_SingleBool proto.InternalMessageInfo

func (m *SingleBool) GetValue() bool {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return false
}

type VersionInfo struct {
	DwarfFortressVersion        *string  `protobuf:"bytes,1,opt,name=dwarf_fortress_version,json=dwarfFortressVersion" json:"dwarf_fortress_version,omitempty"`
	DfhackVersion               *string  `protobuf:"bytes,2,opt,name=dfhack_version,json=dfhackVersion" json:"dfhack_version,omitempty"`
	RemoteFortressReaderVersion *string  `protobuf:"bytes,3,opt,name=remote_fortress_reader_version,json=remoteFortressReaderVersion" json:"remote_fortress_reader_version,omitempty"`
	XXX_NoUnkeyedLiteral        struct{} `json:"-"`
	XXX_unrecognized            []byte   `json:"-"`
	XXX_sizecache               int32    `json:"-"`
}

func (m *VersionInfo) Reset()         { *m = VersionInfo{} }
func (m *VersionInfo) String() string { return proto.CompactTextString(m) }
func (*VersionInfo) ProtoMessage()    {}
func (*VersionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{61}
}
func (m *VersionInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VersionInfo.Unmarshal(m, b)
}
func (m *VersionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VersionInfo.Marshal(b, m, deterministic)
}
func (dst *VersionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VersionInfo.Merge(dst, src)
}
func (m *VersionInfo) XXX_Size() int {
	return xxx_messageInfo_VersionInfo.Size(m)
}
func (m *VersionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_VersionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_VersionInfo proto.InternalMessageInfo

func (m *VersionInfo) GetDwarfFortressVersion() string {
	if m != nil && m.DwarfFortressVersion != nil {
		return *m.DwarfFortressVersion
	}
	return ""
}

func (m *VersionInfo) GetDfhackVersion() string {
	if m != nil && m.DfhackVersion != nil {
		return *m.DfhackVersion
	}
	return ""
}

func (m *VersionInfo) GetRemoteFortressReaderVersion() string {
	if m != nil && m.RemoteFortressReaderVersion != nil {
		return *m.RemoteFortressReaderVersion
	}
	return ""
}

type ListRequest struct {
	ListStart            *int32   `protobuf:"varint,1,opt,name=list_start,json=listStart" json:"list_start,omitempty"`
	ListEnd              *int32   `protobuf:"varint,2,opt,name=list_end,json=listEnd" json:"list_end,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListRequest) Reset()         { *m = ListRequest{} }
func (m *ListRequest) String() string { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()    {}
func (*ListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{62}
}
func (m *ListRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRequest.Unmarshal(m, b)
}
func (m *ListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRequest.Marshal(b, m, deterministic)
}
func (dst *ListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRequest.Merge(dst, src)
}
func (m *ListRequest) XXX_Size() int {
	return xxx_messageInfo_ListRequest.Size(m)
}
func (m *ListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListRequest proto.InternalMessageInfo

func (m *ListRequest) GetListStart() int32 {
	if m != nil && m.ListStart != nil {
		return *m.ListStart
	}
	return 0
}

func (m *ListRequest) GetListEnd() int32 {
	if m != nil && m.ListEnd != nil {
		return *m.ListEnd
	}
	return 0
}

type Report struct {
	Type                 *int32           `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Text                 *string          `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
	Color                *ColorDefinition `protobuf:"bytes,3,opt,name=color" json:"color,omitempty"`
	Duration             *int32           `protobuf:"varint,4,opt,name=duration" json:"duration,omitempty"`
	Continuation         *bool            `protobuf:"varint,5,opt,name=continuation" json:"continuation,omitempty"`
	Unconscious          *bool            `protobuf:"varint,6,opt,name=unconscious" json:"unconscious,omitempty"`
	Announcement         *bool            `protobuf:"varint,7,opt,name=announcement" json:"announcement,omitempty"`
	RepeatCount          *int32           `protobuf:"varint,8,opt,name=repeat_count,json=repeatCount" json:"repeat_count,omitempty"`
	Pos                  *Coord           `protobuf:"bytes,9,opt,name=pos" json:"pos,omitempty"`
	Id                   *int32           `protobuf:"varint,10,opt,name=id" json:"id,omitempty"`
	Year                 *int32           `protobuf:"varint,11,opt,name=year" json:"year,omitempty"`
	Time                 *int32           `protobuf:"varint,12,opt,name=time" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Report) Reset()         { *m = Report{} }
func (m *Report) String() string { return proto.CompactTextString(m) }
func (*Report) ProtoMessage()    {}
func (*Report) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{63}
}
func (m *Report) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Report.Unmarshal(m, b)
}
func (m *Report) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Report.Marshal(b, m, deterministic)
}
func (dst *Report) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Report.Merge(dst, src)
}
func (m *Report) XXX_Size() int {
	return xxx_messageInfo_Report.Size(m)
}
func (m *Report) XXX_DiscardUnknown() {
	xxx_messageInfo_Report.DiscardUnknown(m)
}

var xxx_messageInfo_Report proto.InternalMessageInfo

func (m *Report) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *Report) GetText() string {
	if m != nil && m.Text != nil {
		return *m.Text
	}
	return ""
}

func (m *Report) GetColor() *ColorDefinition {
	if m != nil {
		return m.Color
	}
	return nil
}

func (m *Report) GetDuration() int32 {
	if m != nil && m.Duration != nil {
		return *m.Duration
	}
	return 0
}

func (m *Report) GetContinuation() bool {
	if m != nil && m.Continuation != nil {
		return *m.Continuation
	}
	return false
}

func (m *Report) GetUnconscious() bool {
	if m != nil && m.Unconscious != nil {
		return *m.Unconscious
	}
	return false
}

func (m *Report) GetAnnouncement() bool {
	if m != nil && m.Announcement != nil {
		return *m.Announcement
	}
	return false
}

func (m *Report) GetRepeatCount() int32 {
	if m != nil && m.RepeatCount != nil {
		return *m.RepeatCount
	}
	return 0
}

func (m *Report) GetPos() *Coord {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *Report) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Report) GetYear() int32 {
	if m != nil && m.Year != nil {
		return *m.Year
	}
	return 0
}

func (m *Report) GetTime() int32 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

type Status struct {
	Reports              []*Report `protobuf:"bytes,1,rep,name=reports" json:"reports,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{64}
}
func (m *Status) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Status.Unmarshal(m, b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Status.Marshal(b, m, deterministic)
}
func (dst *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(dst, src)
}
func (m *Status) XXX_Size() int {
	return xxx_messageInfo_Status.Size(m)
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetReports() []*Report {
	if m != nil {
		return m.Reports
	}
	return nil
}

type ShapeDescriptior struct {
	Id                   *string  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Tile                 *int32   `protobuf:"varint,2,opt,name=tile" json:"tile,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShapeDescriptior) Reset()         { *m = ShapeDescriptior{} }
func (m *ShapeDescriptior) String() string { return proto.CompactTextString(m) }
func (*ShapeDescriptior) ProtoMessage()    {}
func (*ShapeDescriptior) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{65}
}
func (m *ShapeDescriptior) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ShapeDescriptior.Unmarshal(m, b)
}
func (m *ShapeDescriptior) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ShapeDescriptior.Marshal(b, m, deterministic)
}
func (dst *ShapeDescriptior) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShapeDescriptior.Merge(dst, src)
}
func (m *ShapeDescriptior) XXX_Size() int {
	return xxx_messageInfo_ShapeDescriptior.Size(m)
}
func (m *ShapeDescriptior) XXX_DiscardUnknown() {
	xxx_messageInfo_ShapeDescriptior.DiscardUnknown(m)
}

var xxx_messageInfo_ShapeDescriptior proto.InternalMessageInfo

func (m *ShapeDescriptior) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *ShapeDescriptior) GetTile() int32 {
	if m != nil && m.Tile != nil {
		return *m.Tile
	}
	return 0
}

type Language struct {
	Shapes               []*ShapeDescriptior `protobuf:"bytes,1,rep,name=shapes" json:"shapes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Language) Reset()         { *m = Language{} }
func (m *Language) String() string { return proto.CompactTextString(m) }
func (*Language) ProtoMessage()    {}
func (*Language) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{66}
}
func (m *Language) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Language.Unmarshal(m, b)
}
func (m *Language) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Language.Marshal(b, m, deterministic)
}
func (dst *Language) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Language.Merge(dst, src)
}
func (m *Language) XXX_Size() int {
	return xxx_messageInfo_Language.Size(m)
}
func (m *Language) XXX_DiscardUnknown() {
	xxx_messageInfo_Language.DiscardUnknown(m)
}

var xxx_messageInfo_Language proto.InternalMessageInfo

func (m *Language) GetShapes() []*ShapeDescriptior {
	if m != nil {
		return m.Shapes
	}
	return nil
}

type ItemImprovement struct {
	Material             *MatPair         `protobuf:"bytes,1,opt,name=material" json:"material,omitempty"`
	Type                 *ImprovementType `protobuf:"varint,2,opt,name=type,enum=RemoteFortressReader.ImprovementType" json:"type,omitempty"`
	Shape                *int32           `protobuf:"varint,3,opt,name=shape" json:"shape,omitempty"`
	SpecificType         *int32           `protobuf:"varint,4,opt,name=specific_type,json=specificType" json:"specific_type,omitempty"`
	Image                *ArtImage        `protobuf:"bytes,5,opt,name=image" json:"image,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ItemImprovement) Reset()         { *m = ItemImprovement{} }
func (m *ItemImprovement) String() string { return proto.CompactTextString(m) }
func (*ItemImprovement) ProtoMessage()    {}
func (*ItemImprovement) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{67}
}
func (m *ItemImprovement) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ItemImprovement.Unmarshal(m, b)
}
func (m *ItemImprovement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ItemImprovement.Marshal(b, m, deterministic)
}
func (dst *ItemImprovement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ItemImprovement.Merge(dst, src)
}
func (m *ItemImprovement) XXX_Size() int {
	return xxx_messageInfo_ItemImprovement.Size(m)
}
func (m *ItemImprovement) XXX_DiscardUnknown() {
	xxx_messageInfo_ItemImprovement.DiscardUnknown(m)
}

var xxx_messageInfo_ItemImprovement proto.InternalMessageInfo

func (m *ItemImprovement) GetMaterial() *MatPair {
	if m != nil {
		return m.Material
	}
	return nil
}

func (m *ItemImprovement) GetType() ImprovementType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ImprovementType_ART_IMAGE
}

func (m *ItemImprovement) GetShape() int32 {
	if m != nil && m.Shape != nil {
		return *m.Shape
	}
	return 0
}

func (m *ItemImprovement) GetSpecificType() int32 {
	if m != nil && m.SpecificType != nil {
		return *m.SpecificType
	}
	return 0
}

func (m *ItemImprovement) GetImage() *ArtImage {
	if m != nil {
		return m.Image
	}
	return nil
}

type ArtImageElement struct {
	Count                *int32               `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
	Type                 *ArtImageElementType `protobuf:"varint,2,opt,name=type,enum=RemoteFortressReader.ArtImageElementType" json:"type,omitempty"`
	CreatureItem         *MatPair             `protobuf:"bytes,3,opt,name=creature_item,json=creatureItem" json:"creature_item,omitempty"`
	Material             *MatPair             `protobuf:"bytes,5,opt,name=material" json:"material,omitempty"`
	Id                   *int32               `protobuf:"varint,6,opt,name=id" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ArtImageElement) Reset()         { *m = ArtImageElement{} }
func (m *ArtImageElement) String() string { return proto.CompactTextString(m) }
func (*ArtImageElement) ProtoMessage()    {}
func (*ArtImageElement) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{68}
}
func (m *ArtImageElement) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArtImageElement.Unmarshal(m, b)
}
func (m *ArtImageElement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArtImageElement.Marshal(b, m, deterministic)
}
func (dst *ArtImageElement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArtImageElement.Merge(dst, src)
}
func (m *ArtImageElement) XXX_Size() int {
	return xxx_messageInfo_ArtImageElement.Size(m)
}
func (m *ArtImageElement) XXX_DiscardUnknown() {
	xxx_messageInfo_ArtImageElement.DiscardUnknown(m)
}

var xxx_messageInfo_ArtImageElement proto.InternalMessageInfo

func (m *ArtImageElement) GetCount() int32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *ArtImageElement) GetType() ArtImageElementType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ArtImageElementType_IMAGE_CREATURE
}

func (m *ArtImageElement) GetCreatureItem() *MatPair {
	if m != nil {
		return m.CreatureItem
	}
	return nil
}

func (m *ArtImageElement) GetMaterial() *MatPair {
	if m != nil {
		return m.Material
	}
	return nil
}

func (m *ArtImageElement) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

type ArtImageProperty struct {
	Subject              *int32                `protobuf:"varint,1,opt,name=subject" json:"subject,omitempty"`
	Object               *int32                `protobuf:"varint,2,opt,name=object" json:"object,omitempty"`
	Verb                 *ArtImageVerb         `protobuf:"varint,3,opt,name=verb,enum=RemoteFortressReader.ArtImageVerb" json:"verb,omitempty"`
	Type                 *ArtImagePropertyType `protobuf:"varint,4,opt,name=type,enum=RemoteFortressReader.ArtImagePropertyType" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ArtImageProperty) Reset()         { *m = ArtImageProperty{} }
func (m *ArtImageProperty) String() string { return proto.CompactTextString(m) }
func (*ArtImageProperty) ProtoMessage()    {}
func (*ArtImageProperty) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{69}
}
func (m *ArtImageProperty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArtImageProperty.Unmarshal(m, b)
}
func (m *ArtImageProperty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArtImageProperty.Marshal(b, m, deterministic)
}
func (dst *ArtImageProperty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArtImageProperty.Merge(dst, src)
}
func (m *ArtImageProperty) XXX_Size() int {
	return xxx_messageInfo_ArtImageProperty.Size(m)
}
func (m *ArtImageProperty) XXX_DiscardUnknown() {
	xxx_messageInfo_ArtImageProperty.DiscardUnknown(m)
}

var xxx_messageInfo_ArtImageProperty proto.InternalMessageInfo

func (m *ArtImageProperty) GetSubject() int32 {
	if m != nil && m.Subject != nil {
		return *m.Subject
	}
	return 0
}

func (m *ArtImageProperty) GetObject() int32 {
	if m != nil && m.Object != nil {
		return *m.Object
	}
	return 0
}

func (m *ArtImageProperty) GetVerb() ArtImageVerb {
	if m != nil && m.Verb != nil {
		return *m.Verb
	}
	return ArtImageVerb_VERB_WITHERING
}

func (m *ArtImageProperty) GetType() ArtImagePropertyType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ArtImagePropertyType_TRANSITIVE_VERB
}

type ArtImage struct {
	Elements             []*ArtImageElement  `protobuf:"bytes,1,rep,name=elements" json:"elements,omitempty"`
	Id                   *MatPair            `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Properties           []*ArtImageProperty `protobuf:"bytes,3,rep,name=properties" json:"properties,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ArtImage) Reset()         { *m = ArtImage{} }
func (m *ArtImage) String() string { return proto.CompactTextString(m) }
func (*ArtImage) ProtoMessage()    {}
func (*ArtImage) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{70}
}
func (m *ArtImage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArtImage.Unmarshal(m, b)
}
func (m *ArtImage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArtImage.Marshal(b, m, deterministic)
}
func (dst *ArtImage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArtImage.Merge(dst, src)
}
func (m *ArtImage) XXX_Size() int {
	return xxx_messageInfo_ArtImage.Size(m)
}
func (m *ArtImage) XXX_DiscardUnknown() {
	xxx_messageInfo_ArtImage.DiscardUnknown(m)
}

var xxx_messageInfo_ArtImage proto.InternalMessageInfo

func (m *ArtImage) GetElements() []*ArtImageElement {
	if m != nil {
		return m.Elements
	}
	return nil
}

func (m *ArtImage) GetId() *MatPair {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ArtImage) GetProperties() []*ArtImageProperty {
	if m != nil {
		return m.Properties
	}
	return nil
}

type Engraving struct {
	Pos                  *Coord    `protobuf:"bytes,1,opt,name=pos" json:"pos,omitempty"`
	Quality              *int32    `protobuf:"varint,2,opt,name=quality" json:"quality,omitempty"`
	Tile                 *int32    `protobuf:"varint,3,opt,name=tile" json:"tile,omitempty"`
	Image                *ArtImage `protobuf:"bytes,4,opt,name=image" json:"image,omitempty"`
	Floor                *bool     `protobuf:"varint,5,opt,name=floor" json:"floor,omitempty"`
	West                 *bool     `protobuf:"varint,6,opt,name=west" json:"west,omitempty"`
	East                 *bool     `protobuf:"varint,7,opt,name=east" json:"east,omitempty"`
	North                *bool     `protobuf:"varint,8,opt,name=north" json:"north,omitempty"`
	South                *bool     `protobuf:"varint,9,opt,name=south" json:"south,omitempty"`
	Hidden               *bool     `protobuf:"varint,10,opt,name=hidden" json:"hidden,omitempty"`
	Northwest            *bool     `protobuf:"varint,11,opt,name=northwest" json:"northwest,omitempty"`
	Northeast            *bool     `protobuf:"varint,12,opt,name=northeast" json:"northeast,omitempty"`
	Southwest            *bool     `protobuf:"varint,13,opt,name=southwest" json:"southwest,omitempty"`
	Southeast            *bool     `protobuf:"varint,14,opt,name=southeast" json:"southeast,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Engraving) Reset()         { *m = Engraving{} }
func (m *Engraving) String() string { return proto.CompactTextString(m) }
func (*Engraving) ProtoMessage()    {}
func (*Engraving) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{71}
}
func (m *Engraving) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Engraving.Unmarshal(m, b)
}
func (m *Engraving) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Engraving.Marshal(b, m, deterministic)
}
func (dst *Engraving) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Engraving.Merge(dst, src)
}
func (m *Engraving) XXX_Size() int {
	return xxx_messageInfo_Engraving.Size(m)
}
func (m *Engraving) XXX_DiscardUnknown() {
	xxx_messageInfo_Engraving.DiscardUnknown(m)
}

var xxx_messageInfo_Engraving proto.InternalMessageInfo

func (m *Engraving) GetPos() *Coord {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *Engraving) GetQuality() int32 {
	if m != nil && m.Quality != nil {
		return *m.Quality
	}
	return 0
}

func (m *Engraving) GetTile() int32 {
	if m != nil && m.Tile != nil {
		return *m.Tile
	}
	return 0
}

func (m *Engraving) GetImage() *ArtImage {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *Engraving) GetFloor() bool {
	if m != nil && m.Floor != nil {
		return *m.Floor
	}
	return false
}

func (m *Engraving) GetWest() bool {
	if m != nil && m.West != nil {
		return *m.West
	}
	return false
}

func (m *Engraving) GetEast() bool {
	if m != nil && m.East != nil {
		return *m.East
	}
	return false
}

func (m *Engraving) GetNorth() bool {
	if m != nil && m.North != nil {
		return *m.North
	}
	return false
}

func (m *Engraving) GetSouth() bool {
	if m != nil && m.South != nil {
		return *m.South
	}
	return false
}

func (m *Engraving) GetHidden() bool {
	if m != nil && m.Hidden != nil {
		return *m.Hidden
	}
	return false
}

func (m *Engraving) GetNorthwest() bool {
	if m != nil && m.Northwest != nil {
		return *m.Northwest
	}
	return false
}

func (m *Engraving) GetNortheast() bool {
	if m != nil && m.Northeast != nil {
		return *m.Northeast
	}
	return false
}

func (m *Engraving) GetSouthwest() bool {
	if m != nil && m.Southwest != nil {
		return *m.Southwest
	}
	return false
}

func (m *Engraving) GetSoutheast() bool {
	if m != nil && m.Southeast != nil {
		return *m.Southeast
	}
	return false
}

type FlowInfo struct {
	Index                *int32    `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	Type                 *FlowType `protobuf:"varint,2,opt,name=type,enum=RemoteFortressReader.FlowType" json:"type,omitempty"`
	Density              *int32    `protobuf:"varint,3,opt,name=density" json:"density,omitempty"`
	Pos                  *Coord    `protobuf:"bytes,4,opt,name=pos" json:"pos,omitempty"`
	Dest                 *Coord    `protobuf:"bytes,5,opt,name=dest" json:"dest,omitempty"`
	Expanding            *bool     `protobuf:"varint,6,opt,name=expanding" json:"expanding,omitempty"`
	Reuse                *bool     `protobuf:"varint,7,opt,name=reuse" json:"reuse,omitempty"`
	GuideId              *int32    `protobuf:"varint,8,opt,name=guide_id,json=guideId" json:"guide_id,omitempty"`
	Material             *MatPair  `protobuf:"bytes,9,opt,name=material" json:"material,omitempty"`
	Item                 *MatPair  `protobuf:"bytes,10,opt,name=item" json:"item,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *FlowInfo) Reset()         { *m = FlowInfo{} }
func (m *FlowInfo) String() string { return proto.CompactTextString(m) }
func (*FlowInfo) ProtoMessage()    {}
func (*FlowInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{72}
}
func (m *FlowInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlowInfo.Unmarshal(m, b)
}
func (m *FlowInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlowInfo.Marshal(b, m, deterministic)
}
func (dst *FlowInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowInfo.Merge(dst, src)
}
func (m *FlowInfo) XXX_Size() int {
	return xxx_messageInfo_FlowInfo.Size(m)
}
func (m *FlowInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowInfo.DiscardUnknown(m)
}

var xxx_messageInfo_FlowInfo proto.InternalMessageInfo

func (m *FlowInfo) GetIndex() int32 {
	if m != nil && m.Index != nil {
		return *m.Index
	}
	return 0
}

func (m *FlowInfo) GetType() FlowType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return FlowType_Miasma
}

func (m *FlowInfo) GetDensity() int32 {
	if m != nil && m.Density != nil {
		return *m.Density
	}
	return 0
}

func (m *FlowInfo) GetPos() *Coord {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *FlowInfo) GetDest() *Coord {
	if m != nil {
		return m.Dest
	}
	return nil
}

func (m *FlowInfo) GetExpanding() bool {
	if m != nil && m.Expanding != nil {
		return *m.Expanding
	}
	return false
}

func (m *FlowInfo) GetReuse() bool {
	if m != nil && m.Reuse != nil {
		return *m.Reuse
	}
	return false
}

func (m *FlowInfo) GetGuideId() int32 {
	if m != nil && m.GuideId != nil {
		return *m.GuideId
	}
	return 0
}

func (m *FlowInfo) GetMaterial() *MatPair {
	if m != nil {
		return m.Material
	}
	return nil
}

func (m *FlowInfo) GetItem() *MatPair {
	if m != nil {
		return m.Item
	}
	return nil
}

type Wave struct {
	Dest                 *Coord   `protobuf:"bytes,1,opt,name=dest" json:"dest,omitempty"`
	Pos                  *Coord   `protobuf:"bytes,2,opt,name=pos" json:"pos,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Wave) Reset()         { *m = Wave{} }
func (m *Wave) String() string { return proto.CompactTextString(m) }
func (*Wave) ProtoMessage()    {}
func (*Wave) Descriptor() ([]byte, []int) {
	return fileDescriptor_RemoteFortressReader_45db96218c729a15, []int{73}
}
func (m *Wave) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Wave.Unmarshal(m, b)
}
func (m *Wave) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Wave.Marshal(b, m, deterministic)
}
func (dst *Wave) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Wave.Merge(dst, src)
}
func (m *Wave) XXX_Size() int {
	return xxx_messageInfo_Wave.Size(m)
}
func (m *Wave) XXX_DiscardUnknown() {
	xxx_messageInfo_Wave.DiscardUnknown(m)
}

var xxx_messageInfo_Wave proto.InternalMessageInfo

func (m *Wave) GetDest() *Coord {
	if m != nil {
		return m.Dest
	}
	return nil
}

func (m *Wave) GetPos() *Coord {
	if m != nil {
		return m.Pos
	}
	return nil
}

func init() {
	proto.RegisterType((*Coord)(nil), "RemoteFortressReader.Coord")
	proto.RegisterType((*Tiletype)(nil), "RemoteFortressReader.Tiletype")
	proto.RegisterType((*TiletypeList)(nil), "RemoteFortressReader.TiletypeList")
	proto.RegisterType((*BuildingExtents)(nil), "RemoteFortressReader.BuildingExtents")
	proto.RegisterType((*BuildingItem)(nil), "RemoteFortressReader.BuildingItem")
	proto.RegisterType((*BuildingInstance)(nil), "RemoteFortressReader.BuildingInstance")
	proto.RegisterType((*RiverEdge)(nil), "RemoteFortressReader.RiverEdge")
	proto.RegisterType((*RiverTile)(nil), "RemoteFortressReader.RiverTile")
	proto.RegisterType((*Spatter)(nil), "RemoteFortressReader.Spatter")
	proto.RegisterType((*SpatterPile)(nil), "RemoteFortressReader.SpatterPile")
	proto.RegisterType((*Item)(nil), "RemoteFortressReader.Item")
	proto.RegisterType((*MapBlock)(nil), "RemoteFortressReader.MapBlock")
	proto.RegisterType((*MatPair)(nil), "RemoteFortressReader.MatPair")
	proto.RegisterType((*ColorDefinition)(nil), "RemoteFortressReader.ColorDefinition")
	proto.RegisterType((*MaterialDefinition)(nil), "RemoteFortressReader.MaterialDefinition")
	proto.RegisterType((*BuildingType)(nil), "RemoteFortressReader.BuildingType")
	proto.RegisterType((*BuildingDefinition)(nil), "RemoteFortressReader.BuildingDefinition")
	proto.RegisterType((*BuildingList)(nil), "RemoteFortressReader.BuildingList")
	proto.RegisterType((*MaterialList)(nil), "RemoteFortressReader.MaterialList")
	proto.RegisterType((*Hair)(nil), "RemoteFortressReader.Hair")
	proto.RegisterType((*BodySizeInfo)(nil), "RemoteFortressReader.BodySizeInfo")
	proto.RegisterType((*UnitAppearance)(nil), "RemoteFortressReader.UnitAppearance")
	proto.RegisterType((*InventoryItem)(nil), "RemoteFortressReader.InventoryItem")
	proto.RegisterType((*UnitDefinition)(nil), "RemoteFortressReader.UnitDefinition")
	proto.RegisterType((*UnitList)(nil), "RemoteFortressReader.UnitList")
	proto.RegisterType((*BlockRequest)(nil), "RemoteFortressReader.BlockRequest")
	proto.RegisterType((*BlockList)(nil), "RemoteFortressReader.BlockList")
	proto.RegisterType((*PlantDef)(nil), "RemoteFortressReader.PlantDef")
	proto.RegisterType((*PlantList)(nil), "RemoteFortressReader.PlantList")
	proto.RegisterType((*ViewInfo)(nil), "RemoteFortressReader.ViewInfo")
	proto.RegisterType((*MapInfo)(nil), "RemoteFortressReader.MapInfo")
	proto.RegisterType((*Cloud)(nil), "RemoteFortressReader.Cloud")
	proto.RegisterType((*WorldMap)(nil), "RemoteFortressReader.WorldMap")
	proto.RegisterType((*SiteRealizationBuildingWall)(nil), "RemoteFortressReader.SiteRealizationBuildingWall")
	proto.RegisterType((*SiteRealizationBuildingTower)(nil), "RemoteFortressReader.SiteRealizationBuildingTower")
	proto.RegisterType((*TrenchSpoke)(nil), "RemoteFortressReader.TrenchSpoke")
	proto.RegisterType((*SiteRealizationBuildingTrenches)(nil), "RemoteFortressReader.SiteRealizationBuildingTrenches")
	proto.RegisterType((*SiteRealizationBuilding)(nil), "RemoteFortressReader.SiteRealizationBuilding")
	proto.RegisterType((*RegionTile)(nil), "RemoteFortressReader.RegionTile")
	proto.RegisterType((*RegionMap)(nil), "RemoteFortressReader.RegionMap")
	proto.RegisterType((*RegionMaps)(nil), "RemoteFortressReader.RegionMaps")
	proto.RegisterType((*PatternDescriptor)(nil), "RemoteFortressReader.PatternDescriptor")
	proto.RegisterType((*ColorModifierRaw)(nil), "RemoteFortressReader.ColorModifierRaw")
	proto.RegisterType((*BodyPartLayerRaw)(nil), "RemoteFortressReader.BodyPartLayerRaw")
	proto.RegisterType((*BodyPartRaw)(nil), "RemoteFortressReader.BodyPartRaw")
	proto.RegisterType((*BpAppearanceModifier)(nil), "RemoteFortressReader.BpAppearanceModifier")
	proto.RegisterType((*TissueRaw)(nil), "RemoteFortressReader.TissueRaw")
	proto.RegisterType((*CasteRaw)(nil), "RemoteFortressReader.CasteRaw")
	proto.RegisterType((*CreatureRaw)(nil), "RemoteFortressReader.CreatureRaw")
	proto.RegisterType((*CreatureRawList)(nil), "RemoteFortressReader.CreatureRawList")
	proto.RegisterType((*Army)(nil), "RemoteFortressReader.Army")
	proto.RegisterType((*ArmyList)(nil), "RemoteFortressReader.ArmyList")
	proto.RegisterType((*GrowthPrint)(nil), "RemoteFortressReader.GrowthPrint")
	proto.RegisterType((*TreeGrowth)(nil), "RemoteFortressReader.TreeGrowth")
	proto.RegisterType((*PlantRaw)(nil), "RemoteFortressReader.PlantRaw")
	proto.RegisterType((*PlantRawList)(nil), "RemoteFortressReader.PlantRawList")
	proto.RegisterType((*ScreenTile)(nil), "RemoteFortressReader.ScreenTile")
	proto.RegisterType((*ScreenCapture)(nil), "RemoteFortressReader.ScreenCapture")
	proto.RegisterType((*KeyboardEvent)(nil), "RemoteFortressReader.KeyboardEvent")
	proto.RegisterType((*DigCommand)(nil), "RemoteFortressReader.DigCommand")
	proto.RegisterType((*SingleBool)(nil), "RemoteFortressReader.SingleBool")
	proto.RegisterType((*VersionInfo)(nil), "RemoteFortressReader.VersionInfo")
	proto.RegisterType((*ListRequest)(nil), "RemoteFortressReader.ListRequest")
	proto.RegisterType((*Report)(nil), "RemoteFortressReader.Report")
	proto.RegisterType((*Status)(nil), "RemoteFortressReader.Status")
	proto.RegisterType((*ShapeDescriptior)(nil), "RemoteFortressReader.ShapeDescriptior")
	proto.RegisterType((*Language)(nil), "RemoteFortressReader.Language")
	proto.RegisterType((*ItemImprovement)(nil), "RemoteFortressReader.ItemImprovement")
	proto.RegisterType((*ArtImageElement)(nil), "RemoteFortressReader.ArtImageElement")
	proto.RegisterType((*ArtImageProperty)(nil), "RemoteFortressReader.ArtImageProperty")
	proto.RegisterType((*ArtImage)(nil), "RemoteFortressReader.ArtImage")
	proto.RegisterType((*Engraving)(nil), "RemoteFortressReader.Engraving")
	proto.RegisterType((*FlowInfo)(nil), "RemoteFortressReader.FlowInfo")
	proto.RegisterType((*Wave)(nil), "RemoteFortressReader.Wave")
	proto.RegisterEnum("RemoteFortressReader.TiletypeShape", TiletypeShape_name, TiletypeShape_value)
	proto.RegisterEnum("RemoteFortressReader.TiletypeSpecial", TiletypeSpecial_name, TiletypeSpecial_value)
	proto.RegisterEnum("RemoteFortressReader.TiletypeMaterial", TiletypeMaterial_name, TiletypeMaterial_value)
	proto.RegisterEnum("RemoteFortressReader.TiletypeVariant", TiletypeVariant_name, TiletypeVariant_value)
	proto.RegisterEnum("RemoteFortressReader.WorldPoles", WorldPoles_name, WorldPoles_value)
	proto.RegisterEnum("RemoteFortressReader.BuildingDirection", BuildingDirection_name, BuildingDirection_value)
	proto.RegisterEnum("RemoteFortressReader.TileDigDesignation", TileDigDesignation_name, TileDigDesignation_value)
	proto.RegisterEnum("RemoteFortressReader.HairStyle", HairStyle_name, HairStyle_value)
	proto.RegisterEnum("RemoteFortressReader.InventoryMode", InventoryMode_name, InventoryMode_value)
	proto.RegisterEnum("RemoteFortressReader.MatterState", MatterState_name, MatterState_value)
	proto.RegisterEnum("RemoteFortressReader.FrontType", FrontType_name, FrontType_value)
	proto.RegisterEnum("RemoteFortressReader.CumulusType", CumulusType_name, CumulusType_value)
	proto.RegisterEnum("RemoteFortressReader.StratusType", StratusType_name, StratusType_value)
	proto.RegisterEnum("RemoteFortressReader.FogType", FogType_name, FogType_value)
	proto.RegisterEnum("RemoteFortressReader.SiteRealizationBuildingType", SiteRealizationBuildingType_name, SiteRealizationBuildingType_value)
	proto.RegisterEnum("RemoteFortressReader.PatternType", PatternType_name, PatternType_value)
	proto.RegisterEnum("RemoteFortressReader.ImprovementType", ImprovementType_name, ImprovementType_value)
	proto.RegisterEnum("RemoteFortressReader.ArtImageElementType", ArtImageElementType_name, ArtImageElementType_value)
	proto.RegisterEnum("RemoteFortressReader.ArtImagePropertyType", ArtImagePropertyType_name, ArtImagePropertyType_value)
	proto.RegisterEnum("RemoteFortressReader.ArtImageVerb", ArtImageVerb_name, ArtImageVerb_value)
	proto.RegisterEnum("RemoteFortressReader.FlowType", FlowType_name, FlowType_value)
}

func init() {
	proto.RegisterFile("RemoteFortressReader.proto", fileDescriptor_RemoteFortressReader_45db96218c729a15)
}

var fileDescriptor_RemoteFortressReader_45db96218c729a15 = []byte{
	// 8142 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x7c, 0x5b, 0x6c, 0x24, 0x49,
	0xb6, 0xd0, 0x94, 0xeb, 0x7d, 0xca, 0x65, 0x67, 0x67, 0xbb, 0xbb, 0x6b, 0x7a, 0x5e, 0x3d, 0x35,
	0x77, 0x66, 0x7b, 0xcd, 0xce, 0xec, 0x9d, 0x9e, 0xb9, 0xbb, 0xdb, 0x77, 0xd8, 0xd9, 0x2d, 0x57,
	0xa5, 0xed, 0x9c, 0xae, 0xd7, 0x46, 0x55, 0xd9, 0xed, 0xd6, 0x5d, 0xa5, 0xd2, 0x95, 0xe1, 0x72,
	0x6e, 0x57, 0x65, 0xd6, 0x64, 0x66, 0xf9, 0xd1, 0x7f, 0x17, 0x3e, 0x40, 0xc0, 0xfd, 0x01, 0xae,
	0xc4, 0x07, 0x02, 0x09, 0x21, 0x21, 0xbe, 0x10, 0x12, 0x3f, 0x3c, 0xc4, 0xd7, 0x95, 0xe0, 0x93,
	0x3f, 0xfe, 0x10, 0x12, 0x1f, 0xc0, 0x07, 0x42, 0x20, 0x21, 0x5d, 0x21, 0x10, 0xe8, 0x9c, 0x88,
	0xc8, 0xcc, 0x72, 0xbb, 0xdc, 0xee, 0x5d, 0x7f, 0x55, 0x9c, 0x57, 0x44, 0x9c, 0x38, 0x71, 0xe2,
	0x9c, 0x13, 0x91, 0x86, 0x87, 0x8c, 0xcf, 0xfc, 0x88, 0xef, 0xfa, 0x41, 0x14, 0xf0, 0x30, 0x64,
	0xdc, 0x76, 0x78, 0xf0, 0xc5, 0x3c, 0xf0, 0x23, 0x5f, 0xdf, 0xba, 0x0e, 0xf7, 0xf0, 0x81, 0x19,
	0xf1, 0x99, 0xc3, 0x4f, 0x4c, 0x2f, 0x8c, 0x82, 0xc5, 0x8c, 0x7b, 0x91, 0x20, 0xaf, 0x7f, 0x09,
	0xf9, 0xa6, 0xef, 0x07, 0x8e, 0xbe, 0x0e, 0x99, 0x8b, 0x5a, 0xe6, 0x51, 0xe6, 0x71, 0x9e, 0x65,
	0x2e, 0xb0, 0x75, 0x59, 0x5b, 0x13, 0xad, 0x4b, 0x6c, 0xbd, 0xaa, 0x65, 0x45, 0xeb, 0x55, 0xfd,
	0x3f, 0xaf, 0x41, 0x69, 0xe8, 0x4e, 0x79, 0x74, 0x39, 0xe7, 0xfa, 0x06, 0xac, 0xb9, 0x4e, 0x2d,
	0xf3, 0x68, 0xed, 0x71, 0x9e, 0xad, 0xb9, 0x8e, 0xae, 0x43, 0xce, 0xb3, 0x67, 0x9c, 0x78, 0xcb,
	0x8c, 0x7e, 0xeb, 0x35, 0x28, 0x8e, 0xed, 0x79, 0xe4, 0xfa, 0x1e, 0x09, 0x29, 0x33, 0xd5, 0xd4,
	0x9f, 0x42, 0x3e, 0x3c, 0xb5, 0xe7, 0xbc, 0x96, 0x7b, 0x94, 0x79, 0xbc, 0xf1, 0xe4, 0x93, 0x2f,
	0xae, 0x9d, 0x98, 0xea, 0x6c, 0x80, 0xa4, 0x4c, 0x70, 0xe8, 0xbf, 0x80, 0x62, 0x38, 0xe7, 0x63,
	0xd7, 0x9e, 0xd6, 0xf2, 0xc4, 0xfc, 0xe9, 0x1b, 0x98, 0x05, 0x31, 0x53, 0x5c, 0xfa, 0x0e, 0x94,
	0x66, 0x76, 0xc4, 0x03, 0x94, 0x50, 0x20, 0x09, 0x9f, 0xdd, 0x2c, 0xa1, 0x23, 0xa9, 0x59, 0xcc,
	0x87, 0x83, 0x38, 0xb3, 0x03, 0xd7, 0xf6, 0xa2, 0x5a, 0xf1, 0x36, 0x83, 0x38, 0x10, 0xc4, 0x4c,
	0x71, 0xe9, 0xef, 0x43, 0xd9, 0x71, 0x03, 0x3e, 0x26, 0xe5, 0x94, 0x48, 0x39, 0x09, 0xa0, 0x3e,
	0x80, 0x75, 0xc5, 0xd9, 0x76, 0xc3, 0x48, 0x6f, 0x42, 0x35, 0x92, 0x6d, 0x6b, 0xea, 0x86, 0x51,
	0x2d, 0xf3, 0x28, 0xfb, 0xb8, 0xf2, 0xe4, 0xc3, 0x9b, 0x3b, 0x65, 0xeb, 0x51, 0x4a, 0x48, 0xfd,
	0x2f, 0x67, 0x60, 0x73, 0x67, 0xe1, 0x4e, 0x1d, 0xd7, 0x9b, 0x18, 0x17, 0x11, 0xf7, 0xa2, 0x50,
	0xbf, 0x0b, 0xf9, 0xb9, 0x1f, 0x5a, 0x17, 0x72, 0x21, 0x73, 0x73, 0x3f, 0x7c, 0xae, 0x80, 0x68,
	0x07, 0x0a, 0x78, 0xa4, 0x6f, 0x41, 0xfe, 0xdc, 0x75, 0xa2, 0xd3, 0x5a, 0x96, 0x80, 0xa2, 0xa1,
	0xdf, 0x87, 0xc2, 0x29, 0x77, 0x27, 0xa7, 0x51, 0x2d, 0x47, 0x60, 0xd9, 0xc2, 0x95, 0xe7, 0xa2,
	0x8b, 0x5a, 0xfe, 0x51, 0xf6, 0x71, 0x9e, 0xa9, 0x66, 0x9d, 0xc1, 0xba, 0x1a, 0x04, 0x9a, 0xa6,
	0xfe, 0x05, 0xe4, 0xdc, 0x88, 0xcf, 0xc8, 0x02, 0x2b, 0x4f, 0x1e, 0x5e, 0x3f, 0x23, 0xa4, 0x64,
	0x44, 0x87, 0x76, 0x36, 0xf3, 0x1d, 0x2e, 0x6d, 0x94, 0x7e, 0xd7, 0xff, 0x4b, 0x0e, 0xb4, 0x58,
	0xa8, 0x17, 0x46, 0xb6, 0x37, 0xe6, 0x38, 0x60, 0xd7, 0x73, 0xb8, 0x9a, 0x9a, 0x68, 0xe8, 0x0f,
	0xa1, 0x4c, 0x13, 0xb6, 0x66, 0xae, 0x27, 0x65, 0x14, 0x71, 0xd2, 0x1d, 0xd7, 0x53, 0xb8, 0x4b,
	0xc2, 0x65, 0x63, 0xdc, 0x51, 0x0a, 0xf7, 0x8a, 0x70, 0xb9, 0x18, 0xf7, 0x22, 0x85, 0xbb, 0xb0,
	0x66, 0xf6, 0x05, 0xd9, 0xa4, 0x92, 0x69, 0x5f, 0xa4, 0x64, 0xda, 0x17, 0x64, 0x6d, 0x4a, 0x66,
	0x82, 0x7b, 0x45, 0xb8, 0x62, 0x4a, 0xa6, 0x7d, 0xa1, 0xef, 0x41, 0xf5, 0x58, 0xce, 0xc8, 0xc2,
	0x15, 0x24, 0x1b, 0xa9, 0x3c, 0xa9, 0x5f, 0xaf, 0x1f, 0x35, 0xf9, 0x21, 0xad, 0xfa, 0x71, 0xaa,
	0xa5, 0x3f, 0x4d, 0x59, 0x7b, 0x99, 0x64, 0x7c, 0x70, 0xbd, 0x8c, 0x8e, 0x1d, 0xf5, 0x6d, 0x37,
	0x48, 0x19, 0xf9, 0xa7, 0xb0, 0x11, 0x8f, 0xe1, 0x64, 0x6a, 0x4f, 0xc2, 0x1a, 0x3c, 0xca, 0x3c,
	0xae, 0xb2, 0x78, 0x64, 0xbb, 0x08, 0xd4, 0x1f, 0x40, 0xd1, 0x0d, 0xad, 0xc0, 0xf7, 0x67, 0xb5,
	0xca, 0xa3, 0xcc, 0xe3, 0x12, 0x2b, 0xb8, 0x21, 0xf3, 0xfd, 0x99, 0xfe, 0x14, 0x72, 0x04, 0x5d,
	0xa7, 0x6e, 0x3f, 0xbd, 0x79, 0xe8, 0xd2, 0x22, 0x19, 0xb1, 0xe8, 0x46, 0x7a, 0x7b, 0x54, 0x69,
	0x87, 0xfd, 0xe0, 0x66, 0xfe, 0x96, 0x22, 0x4f, 0xed, 0x23, 0xfd, 0x67, 0x90, 0x47, 0xa3, 0x09,
	0x6b, 0x1b, 0xb4, 0x5f, 0xde, 0xa0, 0x3d, 0xb2, 0x32, 0xc1, 0x80, 0x86, 0x6d, 0x8f, 0x23, 0xf7,
	0x8c, 0xd7, 0x36, 0x69, 0x61, 0x64, 0xab, 0x1e, 0x42, 0x99, 0xb9, 0x67, 0x3c, 0x30, 0x9c, 0x09,
	0xc7, 0x99, 0xcf, 0x5c, 0xcf, 0x9a, 0xfb, 0xa1, 0x74, 0xa0, 0x85, 0x99, 0xeb, 0xf5, 0x7d, 0x52,
	0xc9, 0xcc, 0xbe, 0x20, 0xc4, 0x9a, 0x44, 0xd8, 0x17, 0x88, 0x48, 0xc4, 0x66, 0xd3, 0x62, 0xd1,
	0x1d, 0xf0, 0x29, 0x3f, 0xb3, 0x69, 0xbe, 0xc2, 0xbc, 0x12, 0x40, 0xfd, 0x3f, 0x65, 0x64, 0xaf,
	0xb8, 0xb3, 0xf5, 0x3f, 0x80, 0xbc, 0xe7, 0x07, 0xd1, 0xa9, 0xdc, 0x32, 0x1f, 0x5d, 0x3f, 0xa9,
	0x78, 0x94, 0x4c, 0x50, 0x23, 0x5b, 0xe8, 0x2f, 0xa2, 0x53, 0x1a, 0xd1, 0x6d, 0xd8, 0x88, 0x5a,
	0xff, 0x0a, 0x72, 0xdc, 0x0e, 0x23, 0x1a, 0xef, 0x2d, 0xb8, 0x88, 0x18, 0x99, 0xce, 0x79, 0x18,
	0xd1, 0x4c, 0x6e, 0xc3, 0x84, 0xc4, 0xf5, 0x7f, 0x9b, 0x81, 0xe2, 0x60, 0x6e, 0x47, 0x11, 0x0f,
	0x96, 0xac, 0x36, 0xf3, 0x76, 0x56, 0x8b, 0x2a, 0x9e, 0xf9, 0x0b, 0x2f, 0x52, 0xaa, 0x17, 0x2d,
	0xfd, 0xa7, 0x90, 0x0f, 0x23, 0x3b, 0x12, 0x9a, 0xdf, 0x78, 0xf2, 0xf1, 0x4a, 0x79, 0x11, 0x0f,
	0x06, 0x48, 0xc8, 0x04, 0xbd, 0xfe, 0xa5, 0xf4, 0x50, 0xb9, 0xdb, 0x8c, 0x83, 0x48, 0xeb, 0xfb,
	0x50, 0x91, 0x33, 0xe9, 0xe3, 0x8a, 0x3d, 0x85, 0x52, 0x28, 0x9a, 0xa1, 0xf4, 0xdc, 0x2b, 0xa4,
	0x48, 0x26, 0x16, 0x93, 0xd7, 0xff, 0x41, 0x1e, 0x72, 0xe4, 0x27, 0xd5, 0x79, 0x9b, 0x91, 0xe7,
	0xed, 0xe7, 0x90, 0x55, 0xe6, 0x55, 0x79, 0xf2, 0xde, 0xf5, 0xe2, 0xe8, 0x80, 0x67, 0x48, 0x87,
	0x5a, 0xa1, 0x2d, 0xfc, 0x25, 0x4d, 0xbf, 0xca, 0x64, 0x2b, 0x86, 0x3f, 0xa1, 0xe9, 0x29, 0xf8,
	0x13, 0x9c, 0x34, 0xb9, 0x9d, 0xfc, 0xad, 0x26, 0x1d, 0x5d, 0xf5, 0x34, 0x85, 0xb7, 0x5b, 0xb3,
	0x9f, 0x42, 0xd6, 0xb9, 0xe4, 0xe4, 0x03, 0x57, 0x3a, 0x8a, 0xa6, 0x3f, 0xf5, 0x83, 0x16, 0x3f,
	0x71, 0x3d, 0x97, 0xb6, 0x39, 0x72, 0xe8, 0x1f, 0x00, 0x84, 0x91, 0x3d, 0x7e, 0x69, 0x85, 0xee,
	0x2b, 0xe1, 0x23, 0xf3, 0xac, 0x4c, 0x90, 0x81, 0xfb, 0x8a, 0xeb, 0xef, 0x42, 0x29, 0x5c, 0x1c,
	0x8b, 0x13, 0x0e, 0x9d, 0xdf, 0x1a, 0x2b, 0x8a, 0xf6, 0xf3, 0x14, 0xea, 0x92, 0xdc, 0x5a, 0x8c,
	0x3a, 0x4a, 0xa1, 0x5e, 0x91, 0x47, 0x8b, 0x51, 0x2f, 0xf4, 0x0f, 0x01, 0xe6, 0x81, 0xff, 0x1b,
	0x74, 0x2f, 0x53, 0x4e, 0x8e, 0xad, 0xc4, 0x52, 0x10, 0x1c, 0xcf, 0x19, 0x9f, 0xfa, 0x63, 0x37,
	0xba, 0xb4, 0x2e, 0xc8, 0x71, 0xad, 0xb1, 0xb2, 0x82, 0x3c, 0x5f, 0x42, 0x5f, 0xd6, 0x36, 0x96,
	0xd1, 0x47, 0x4b, 0xe8, 0x57, 0xe4, 0x78, 0x52, 0xe8, 0x17, 0xb8, 0x56, 0x67, 0xfe, 0x74, 0x31,
	0xe3, 0x35, 0x4d, 0x58, 0xb6, 0x68, 0xe9, 0x26, 0xac, 0xbb, 0xb3, 0x79, 0xe0, 0x9f, 0xf1, 0x19,
	0x9d, 0xb8, 0x77, 0xc8, 0xc4, 0x3e, 0x5d, 0x7d, 0x94, 0x9a, 0x09, 0x35, 0x5b, 0x62, 0xd5, 0xbf,
	0x86, 0xbc, 0x3b, 0xb3, 0x27, 0xbc, 0xa6, 0xd3, 0x52, 0xac, 0x08, 0x30, 0x1a, 0x41, 0x64, 0x22,
	0x15, 0x13, 0xc4, 0xf5, 0xbf, 0x01, 0x50, 0xea, 0xd8, 0xf3, 0x9d, 0xa9, 0x3f, 0x7e, 0x89, 0xd1,
	0xc3, 0xcc, 0x9e, 0x27, 0x21, 0xc5, 0xcc, 0x9e, 0x3f, 0x57, 0xc0, 0x38, 0xa4, 0x98, 0xd9, 0xf3,
	0x23, 0x05, 0x7c, 0x25, 0x43, 0x0a, 0x04, 0xbe, 0xc0, 0x63, 0x1b, 0x35, 0x19, 0xd6, 0x72, 0x14,
	0x37, 0x88, 0x86, 0xfe, 0x0d, 0x94, 0x95, 0xb1, 0x88, 0x88, 0xe2, 0x8d, 0xc6, 0x95, 0xd0, 0xeb,
	0xbb, 0xb0, 0x39, 0xb5, 0x2f, 0x79, 0x60, 0x25, 0x22, 0x0a, 0xb7, 0x11, 0xb1, 0x41, 0x5c, 0x9d,
	0x58, 0x4e, 0x0b, 0x36, 0xce, 0xb8, 0xeb, 0xa5, 0xc4, 0x14, 0x6f, 0x23, 0xa6, 0x8a, 0x4c, 0x4b,
	0x52, 0x8e, 0xed, 0x90, 0xa7, 0xa4, 0x94, 0x6e, 0x25, 0x05, 0x99, 0x12, 0x29, 0x5b, 0xa8, 0xbb,
	0xc9, 0xcc, 0xae, 0x95, 0x85, 0x9a, 0xa8, 0x41, 0x41, 0x1a, 0x92, 0xd4, 0x40, 0x40, 0xa9, 0x41,
	0x41, 0x9a, 0xeb, 0x38, 0xdc, 0xab, 0x55, 0x1e, 0x65, 0xf1, 0x7c, 0x16, 0x2d, 0xa4, 0x9e, 0x52,
	0xec, 0xb6, 0x4e, 0x60, 0xd1, 0xd0, 0xeb, 0xb0, 0x1e, 0x2e, 0x8e, 0x23, 0x1e, 0x04, 0xb6, 0xc7,
	0x6d, 0x3c, 0x7d, 0x11, 0xb9, 0x04, 0xc3, 0xf0, 0xce, 0x5f, 0x44, 0xa1, 0xeb, 0x70, 0x3a, 0x59,
	0x4b, 0x4c, 0x35, 0x11, 0x63, 0x7f, 0xbf, 0x70, 0x4f, 0x78, 0x50, 0xdb, 0x14, 0x18, 0xd9, 0xc4,
	0x68, 0x82, 0x86, 0x63, 0x85, 0x91, 0x3d, 0xf1, 0x30, 0x72, 0xd6, 0x88, 0xa0, 0x4a, 0xd0, 0x81,
	0x04, 0xe2, 0x1e, 0x90, 0x64, 0xf6, 0x34, 0x22, 0x53, 0x2e, 0xb1, 0xb2, 0x20, 0xb1, 0xa7, 0x91,
	0xde, 0x06, 0x7d, 0xec, 0x53, 0x2e, 0x43, 0x27, 0xbc, 0x25, 0x8e, 0x77, 0xfd, 0x36, 0x1a, 0xbc,
	0x93, 0x66, 0x34, 0xe9, 0x94, 0x6f, 0x41, 0x59, 0xc5, 0x32, 0x61, 0xed, 0x2e, 0x09, 0xf9, 0xec,
	0x0d, 0x31, 0x82, 0x0c, 0x2f, 0x59, 0xc2, 0xa8, 0x7f, 0x0c, 0xeb, 0x51, 0xc0, 0xb9, 0x35, 0xe7,
	0xc1, 0x98, 0x7b, 0x51, 0x6d, 0x8b, 0x94, 0x5f, 0x41, 0x58, 0x5f, 0x80, 0xf4, 0x7b, 0x50, 0x20,
	0x92, 0x8b, 0xda, 0x3d, 0x69, 0xd6, 0x01, 0xe7, 0xcf, 0x63, 0xf0, 0x65, 0xed, 0x7e, 0x02, 0x3e,
	0x8a, 0xc1, 0xaf, 0x6a, 0x0f, 0x12, 0xf0, 0x0b, 0xfd, 0x05, 0x6c, 0xe1, 0x6e, 0xb0, 0x1c, 0x77,
	0x62, 0x39, 0x3c, 0x74, 0x27, 0x9e, 0x88, 0x17, 0x6a, 0x8f, 0xb2, 0x8f, 0x37, 0x9e, 0x3c, 0x5e,
	0x9d, 0x0c, 0xb4, 0xdc, 0x49, 0x2b, 0xa1, 0x67, 0x7a, 0xf4, 0x1a, 0x4c, 0x6f, 0x42, 0x25, 0x4c,
	0x4e, 0xac, 0xda, 0xbb, 0xa4, 0x8b, 0x8f, 0x6f, 0x3c, 0xa5, 0x90, 0x90, 0xa5, 0xb9, 0xf4, 0xdf,
	0x57, 0xe1, 0xd6, 0x43, 0x62, 0xbf, 0x29, 0x98, 0x97, 0x61, 0xd6, 0xcf, 0xe1, 0xbd, 0xeb, 0xa6,
	0x64, 0xcd, 0xec, 0xe0, 0x25, 0x0f, 0x6a, 0xef, 0xd1, 0xf2, 0xd7, 0x5e, 0x1f, 0x6f, 0x87, 0xf0,
	0xfa, 0x53, 0x78, 0xf7, 0x5a, 0x76, 0x7b, 0x11, 0xf9, 0xb5, 0xf7, 0x89, 0xf9, 0xfe, 0xeb, 0xcc,
	0x8d, 0x45, 0xe4, 0xeb, 0x9f, 0x40, 0x75, 0x12, 0xd8, 0x61, 0x18, 0xaf, 0xda, 0x07, 0xa4, 0xea,
	0x75, 0x02, 0xaa, 0x65, 0xfb, 0x1a, 0xf2, 0x27, 0x53, 0xff, 0x3c, 0xac, 0x7d, 0x78, 0x53, 0xbe,
	0xb5, 0x3b, 0xf5, 0xcf, 0x4d, 0xef, 0xc4, 0x67, 0x82, 0xb8, 0xde, 0x80, 0xa2, 0xb4, 0x39, 0x3c,
	0x4a, 0x66, 0x76, 0x24, 0x22, 0x78, 0xe1, 0x0f, 0x8b, 0x33, 0x3b, 0xa2, 0xc0, 0xfc, 0x3d, 0x72,
	0x69, 0x96, 0xc8, 0x51, 0x84, 0x5b, 0x44, 0x5a, 0x13, 0xdb, 0xf5, 0x0e, 0x6c, 0x5e, 0x39, 0xef,
	0x74, 0x0d, 0xb2, 0x01, 0x57, 0x19, 0x37, 0xfe, 0xc4, 0xfd, 0x3b, 0x09, 0x38, 0xf7, 0x24, 0xb7,
	0x68, 0x60, 0x82, 0x74, 0x3c, 0x5d, 0x70, 0xe5, 0x54, 0xf1, 0x77, 0xfd, 0xff, 0x64, 0x40, 0x57,
	0xbe, 0x23, 0x25, 0xf2, 0x67, 0x62, 0x74, 0x73, 0xdb, 0x0d, 0x48, 0xee, 0x1b, 0xb7, 0x10, 0x0e,
	0x9e, 0xe6, 0x25, 0xa2, 0x11, 0x91, 0xeb, 0xa7, 0xb3, 0xff, 0x6c, 0x2a, 0xfb, 0xdf, 0x85, 0x0a,
	0x05, 0x50, 0xd6, 0x18, 0x67, 0x22, 0xc3, 0xa7, 0x5b, 0x1e, 0xee, 0x40, 0x9c, 0x04, 0xd5, 0x7f,
	0x09, 0xe0, 0xc6, 0xd5, 0x0b, 0x19, 0x90, 0x3c, 0xfa, 0xe2, 0xf5, 0xba, 0x46, 0xf2, 0xb3, 0xc5,
	0x4f, 0x58, 0x8a, 0xa7, 0xfe, 0x57, 0x32, 0x49, 0xd2, 0x49, 0xba, 0xff, 0xe4, 0x6a, 0x76, 0x25,
	0xb4, 0xba, 0x9c, 0x39, 0xfd, 0x10, 0xb4, 0x98, 0x08, 0xbd, 0x1f, 0xd2, 0x09, 0x4d, 0x6f, 0x2a,
	0xf8, 0x40, 0x80, 0xf5, 0x1f, 0x40, 0x0c, 0xb2, 0xc6, 0x8b, 0x30, 0xf2, 0x67, 0x52, 0xfd, 0x71,
	0x02, 0xd5, 0x24, 0x68, 0xfd, 0x8f, 0x33, 0xa0, 0xc7, 0x19, 0x4b, 0xb2, 0x10, 0x7b, 0xd7, 0x8d,
	0xe7, 0xb7, 0xc9, 0xf6, 0x6e, 0xb1, 0x2e, 0xf5, 0x5f, 0x27, 0xca, 0xa0, 0xe2, 0x42, 0x27, 0xd5,
	0x79, 0xaa, 0xb8, 0xf0, 0xf8, 0x0d, 0xf9, 0x56, 0xb2, 0x58, 0xf1, 0x10, 0xa8, 0xcc, 0xf0, 0x6b,
	0x58, 0x57, 0xa6, 0xa6, 0xc4, 0xab, 0xa3, 0xee, 0x16, 0xe2, 0x5f, 0xb7, 0x52, 0xb6, 0x3e, 0x4b,
	0x89, 0xab, 0x8f, 0x20, 0xb7, 0x8f, 0x16, 0x78, 0x1f, 0x0a, 0x53, 0xee, 0x4d, 0x64, 0x1a, 0x94,
	0x67, 0xb2, 0x45, 0x69, 0x4e, 0x74, 0x39, 0x15, 0x05, 0x82, 0x8d, 0x55, 0xb9, 0x07, 0x8a, 0x18,
	0x20, 0x19, 0x13, 0xd4, 0xf5, 0x7f, 0x8d, 0x26, 0xe2, 0x3b, 0x97, 0x18, 0x36, 0xe2, 0x5e, 0xa6,
	0x20, 0xd0, 0x7d, 0xc5, 0xad, 0xf1, 0x22, 0x90, 0x3d, 0x14, 0xb1, 0xdd, 0x5c, 0x04, 0xb8, 0x73,
	0x09, 0x85, 0x27, 0xb2, 0x4c, 0x32, 0x88, 0x76, 0xc7, 0x0e, 0x29, 0xe4, 0xb4, 0x03, 0x6e, 0x13,
	0x9f, 0xac, 0x21, 0x60, 0x5b, 0xf2, 0x11, 0x8a, 0xf8, 0x44, 0x92, 0x47, 0xb4, 0xc4, 0xf7, 0x01,
	0x80, 0x98, 0x01, 0x71, 0x8a, 0x2a, 0x42, 0x59, 0x40, 0x90, 0xf7, 0x23, 0xa8, 0x48, 0x34, 0x71,
	0x8b, 0x4a, 0x82, 0xe4, 0x40, 0xfe, 0xfa, 0x7f, 0x5b, 0x83, 0x8d, 0x91, 0xe7, 0x46, 0x8d, 0xf9,
	0x9c, 0xdb, 0x01, 0x55, 0x40, 0x30, 0x7f, 0xf7, 0x9d, 0x4b, 0x6b, 0xe6, 0x3b, 0xee, 0x89, 0xab,
	0x92, 0x8f, 0x3c, 0xab, 0x22, 0xb4, 0xa3, 0x80, 0x78, 0x7c, 0x1d, 0xcf, 0x53, 0x44, 0x6b, 0xe2,
	0xf8, 0x3a, 0x9e, 0x27, 0x24, 0x9f, 0x40, 0x95, 0x66, 0xac, 0x88, 0xe4, 0xcc, 0xd6, 0x11, 0xa8,
	0xa8, 0x70, 0x45, 0x68, 0xa7, 0xab, 0xd0, 0x4d, 0xb6, 0xf4, 0x2f, 0x20, 0x77, 0x8a, 0x1e, 0x26,
	0x7f, 0x53, 0x85, 0x67, 0x9f, 0xf2, 0x08, 0xa4, 0xc3, 0x53, 0xe4, 0x98, 0xdb, 0x81, 0x23, 0x93,
	0x88, 0x9b, 0x18, 0x04, 0xa1, 0xfe, 0x33, 0x28, 0xcf, 0xfc, 0x05, 0x86, 0xfd, 0xa7, 0x2a, 0x89,
	0xb8, 0x89, 0x2b, 0x21, 0x46, 0x4e, 0x0c, 0x5b, 0x8e, 0x17, 0x81, 0x17, 0xca, 0x12, 0xcb, 0x8d,
	0x9c, 0x31, 0x71, 0xfd, 0x02, 0xaa, 0xa6, 0x77, 0xc6, 0xbd, 0xc8, 0x0f, 0x2e, 0x29, 0x41, 0xfb,
	0xa9, 0x2c, 0x4c, 0x65, 0x6e, 0xaa, 0x68, 0xc6, 0x2c, 0x1d, 0xdf, 0xe1, 0xa2, 0x7a, 0x15, 0x57,
	0xc0, 0xd6, 0x6e, 0x57, 0x01, 0xab, 0xff, 0xcb, 0x82, 0x58, 0xe9, 0x94, 0xff, 0xb8, 0x5a, 0x8c,
	0xad, 0x41, 0xd1, 0x0d, 0x0f, 0xec, 0xa9, 0xf4, 0x05, 0x25, 0xa6, 0x9a, 0x49, 0xc1, 0x4f, 0xac,
	0xe0, 0x95, 0x82, 0x5f, 0x2e, 0x06, 0x1e, 0x29, 0xe0, 0x2b, 0x69, 0x8b, 0x39, 0xca, 0x7f, 0xbe,
	0x84, 0x5c, 0x60, 0x8f, 0xf9, 0xed, 0xf2, 0x3b, 0x22, 0xd5, 0xfb, 0xa0, 0xcd, 0x03, 0xff, 0x84,
	0x87, 0x21, 0x9e, 0xcc, 0xe2, 0x2c, 0x78, 0xab, 0x44, 0x6f, 0x33, 0x61, 0x17, 0x07, 0x42, 0x92,
	0xcb, 0x96, 0x56, 0xe4, 0xb2, 0xe5, 0xa5, 0x5c, 0x56, 0xc1, 0xbf, 0x92, 0xf5, 0x2b, 0xd9, 0xc2,
	0x2d, 0xe7, 0x86, 0x56, 0xe8, 0x4f, 0x1d, 0x34, 0x69, 0x51, 0xbb, 0x2a, 0xbb, 0xe1, 0x40, 0x00,
	0xf4, 0x5f, 0xc8, 0x6d, 0xee, 0x7a, 0x27, 0xbe, 0xac, 0x61, 0xad, 0x72, 0xc8, 0x29, 0xc7, 0x21,
	0x5c, 0x01, 0xb9, 0x10, 0xe5, 0x7c, 0xab, 0xa9, 0x43, 0xf1, 0x3d, 0x28, 0x1f, 0x4f, 0x7d, 0xdf,
	0xa1, 0x9a, 0xdf, 0x86, 0xf0, 0x01, 0x04, 0xe8, 0xd8, 0x17, 0xb8, 0xc9, 0x05, 0x72, 0x4c, 0xf5,
	0x0b, 0x51, 0x79, 0x02, 0x02, 0x35, 0xa9, 0x86, 0xd1, 0x02, 0xb0, 0xe3, 0xfd, 0x4d, 0x59, 0x60,
	0xe5, 0xc9, 0xef, 0x5d, 0x3f, 0xa6, 0x65, 0x5f, 0xc0, 0x52, 0x7c, 0xb8, 0x9b, 0x53, 0x2b, 0xe2,
	0x3a, 0xb5, 0x3b, 0x62, 0x37, 0x27, 0x40, 0xd3, 0xc1, 0x23, 0xcd, 0xf3, 0x8f, 0xa7, 0xdc, 0x9a,
	0xfb, 0x21, 0xad, 0x83, 0x88, 0xb2, 0xcb, 0x6c, 0x83, 0xc0, 0x7d, 0x05, 0x45, 0x87, 0x17, 0xb8,
	0x0e, 0x0f, 0x50, 0xd0, 0x5d, 0xe1, 0xf0, 0xa8, 0x6d, 0x3a, 0x7a, 0x03, 0xca, 0xae, 0x32, 0x78,
	0x8a, 0x8a, 0x2b, 0x6f, 0xdc, 0x17, 0x64, 0xe7, 0x09, 0xd7, 0x52, 0x06, 0x7f, 0x6f, 0x75, 0x06,
	0x7f, 0x7f, 0x75, 0x06, 0xff, 0x60, 0x29, 0x83, 0xaf, 0x8f, 0xa0, 0x84, 0xaa, 0xa1, 0xa3, 0xc9,
	0x84, 0xea, 0x38, 0xe0, 0x76, 0xb4, 0x08, 0x96, 0xca, 0xea, 0x37, 0x68, 0x34, 0x7d, 0x2c, 0x29,
	0x56, 0x3a, 0x96, 0xfe, 0x29, 0x9e, 0x1f, 0x98, 0xff, 0x32, 0xfe, 0xfd, 0x82, 0x87, 0x11, 0x85,
	0x18, 0xd8, 0x0e, 0x2d, 0x8f, 0x73, 0x87, 0xab, 0xd2, 0xcd, 0xba, 0x00, 0x76, 0x09, 0x46, 0x19,
	0xb0, 0xeb, 0x59, 0x17, 0x71, 0x35, 0xdb, 0xf5, 0x64, 0xae, 0x7c, 0x91, 0x6c, 0xd1, 0x99, 0x7d,
	0xf1, 0x5c, 0x51, 0xc6, 0x5b, 0x74, 0xe6, 0x7a, 0x47, 0x8a, 0xf2, 0x52, 0x6d, 0xd1, 0x99, 0x7d,
	0x71, 0xa4, 0x28, 0x5f, 0xc9, 0x33, 0x02, 0x29, 0x5f, 0x28, 0xca, 0x57, 0xb2, 0xcc, 0x8c, 0x94,
	0x2f, 0xea, 0xff, 0x33, 0x03, 0x65, 0x1a, 0x33, 0x29, 0xe3, 0xe7, 0x00, 0x98, 0x8d, 0x8b, 0xf1,
	0xdd, 0x7c, 0xc1, 0xa0, 0x72, 0x7d, 0x4c, 0xb2, 0xc5, 0xaf, 0x30, 0x49, 0xfb, 0xd5, 0x54, 0x96,
	0xd2, 0xfe, 0x78, 0x2a, 0xf3, 0x23, 0xfd, 0x17, 0x00, 0xdc, 0x9b, 0x04, 0xf6, 0x19, 0x65, 0x5d,
	0x39, 0xea, 0x68, 0xc5, 0x31, 0x6d, 0x28, 0x3a, 0x96, 0x62, 0xd1, 0xbf, 0x81, 0x8a, 0x3f, 0xe6,
	0xb6, 0x67, 0x9d, 0xdb, 0x67, 0x5c, 0x95, 0x03, 0x56, 0xf8, 0xcd, 0x43, 0xfb, 0x8c, 0x33, 0x20,
	0x72, 0xfc, 0x19, 0xd6, 0x2d, 0x28, 0xf5, 0xa7, 0x36, 0xc5, 0x88, 0x6f, 0x71, 0xfb, 0x11, 0x3b,
	0xc3, 0x6c, 0x0c, 0x7c, 0x91, 0xdc, 0x30, 0xe4, 0x52, 0x37, 0x0c, 0xf5, 0xef, 0xa0, 0x4c, 0x1d,
	0x28, 0xa5, 0xce, 0xb1, 0x71, 0x8b, 0x5b, 0x1b, 0x35, 0x2a, 0x56, 0x9e, 0x2b, 0xf6, 0xfa, 0x7f,
	0x58, 0x83, 0xd2, 0x81, 0xcb, 0x29, 0xbb, 0xd0, 0xdf, 0x07, 0x38, 0x73, 0xf9, 0xb9, 0xa5, 0x86,
	0x4c, 0xbe, 0x03, 0x21, 0x7d, 0x1c, 0x76, 0x1a, 0xab, 0x6e, 0xf0, 0x14, 0xf6, 0x68, 0x09, 0xab,
	0x6e, 0xf4, 0x14, 0xf6, 0x85, 0xfe, 0x21, 0x54, 0x08, 0x4b, 0xee, 0xee, 0x42, 0xd5, 0x9f, 0x11,
	0x84, 0x5e, 0xed, 0xf9, 0x32, 0x5e, 0x59, 0x5b, 0x8c, 0x3f, 0xd2, 0x1f, 0xc1, 0xfa, 0x78, 0x11,
	0x84, 0x7e, 0x20, 0xc7, 0x26, 0xa3, 0x13, 0x01, 0xa3, 0xd1, 0x2d, 0x53, 0x5c, 0x4a, 0x33, 0x4c,
	0x28, 0xae, 0xca, 0x78, 0x25, 0x6b, 0x79, 0x09, 0xc5, 0x0b, 0xfd, 0x31, 0x6c, 0x9c, 0xf8, 0xd3,
	0xa9, 0x7f, 0x6e, 0x2d, 0x3c, 0x37, 0x42, 0x77, 0x83, 0x6e, 0x3e, 0xff, 0x87, 0x6b, 0x9f, 0x7f,
	0xc9, 0xd6, 0x05, 0x06, 0xb7, 0xa8, 0xe9, 0xa4, 0x28, 0xf1, 0xc0, 0x44, 0x4a, 0xb8, 0x4a, 0x49,
	0x65, 0x30, 0xa7, 0xfe, 0xcf, 0xd7, 0x30, 0x57, 0x9b, 0x93, 0x7e, 0x1f, 0x81, 0xd8, 0x9c, 0x4a,
	0x0d, 0x99, 0xd8, 0xfd, 0x8a, 0x6a, 0xe2, 0xf3, 0x2b, 0x14, 0x4a, 0xcb, 0x09, 0xc5, 0xd1, 0x15,
	0x0a, 0xa5, 0xe9, 0x84, 0x82, 0x74, 0x2d, 0x28, 0x84, 0xaa, 0xa4, 0xae, 0x09, 0x44, 0x9a, 0x5a,
	0xc2, 0xc7, 0xba, 0x56, 0xf8, 0xa3, 0x65, 0xbc, 0xda, 0xe4, 0x31, 0xfe, 0x05, 0xd5, 0x4f, 0xfc,
	0x60, 0xea, 0x58, 0x74, 0xf4, 0x14, 0xc5, 0xcd, 0x22, 0x41, 0xba, 0x78, 0xfe, 0xfc, 0x08, 0xf4,
	0x04, 0x6d, 0x71, 0x6f, 0x32, 0x75, 0xc3, 0x53, 0x79, 0x01, 0xa9, 0xc5, 0x64, 0x86, 0x80, 0x53,
	0xa4, 0x6b, 0x9f, 0x71, 0x21, 0xab, 0x4c, 0x44, 0x25, 0x04, 0x20, 0x4d, 0xfd, 0x8f, 0xd7, 0x20,
	0xdf, 0x9c, 0xfa, 0x0b, 0x07, 0x63, 0xee, 0x93, 0xc0, 0xf7, 0x22, 0x19, 0xfb, 0xac, 0xd8, 0xcc,
	0xbb, 0x48, 0x42, 0x39, 0x8b, 0xa0, 0xd6, 0xbf, 0x81, 0xe2, 0x78, 0x31, 0x5b, 0x4c, 0x17, 0xa1,
	0x0c, 0xd6, 0x57, 0xd4, 0x1b, 0x9a, 0x82, 0x88, 0x58, 0x15, 0x07, 0x45, 0x9b, 0x6e, 0x10, 0x2c,
	0x42, 0xd2, 0x71, 0x89, 0xc9, 0x16, 0x0a, 0x0d, 0xa3, 0xc0, 0x8e, 0x16, 0xa1, 0xbc, 0x5b, 0x5e,
	0x55, 0xc4, 0x10, 0x44, 0x42, 0xa8, 0xe4, 0xd0, 0x7f, 0x0c, 0xd9, 0x13, 0x7f, 0x22, 0xef, 0x95,
	0x57, 0x44, 0x37, 0xbb, 0xbe, 0x48, 0xbc, 0x90, 0xb2, 0xfe, 0x3f, 0x0a, 0x50, 0x3a, 0x44, 0xad,
	0x75, 0xec, 0x39, 0x1e, 0xdf, 0x42, 0xb7, 0xe2, 0xa2, 0x54, 0x38, 0x15, 0xb1, 0x1a, 0x87, 0x74,
	0x5b, 0xfa, 0x31, 0xac, 0x0b, 0x02, 0x79, 0x67, 0x2a, 0x3c, 0x8c, 0x60, 0xda, 0x17, 0x17, 0xa7,
	0xd7, 0x25, 0xd2, 0x1f, 0xc3, 0xfa, 0xd2, 0x6a, 0xe5, 0x08, 0x57, 0xf1, 0x52, 0x0b, 0xb5, 0x74,
	0x7f, 0x24, 0x6e, 0x5c, 0x13, 0x80, 0xfe, 0x10, 0x4a, 0x81, 0xed, 0x7a, 0x27, 0xf6, 0x74, 0x4a,
	0x95, 0xcf, 0x3c, 0x8b, 0xdb, 0xfa, 0x87, 0x00, 0x67, 0x7c, 0xc2, 0x23, 0xc1, 0x5a, 0x24, 0x6c,
	0x0a, 0xa2, 0x3f, 0x82, 0x4a, 0xc4, 0x67, 0x73, 0x1e, 0xd0, 0x59, 0x47, 0xb5, 0xca, 0x3c, 0x4b,
	0x83, 0x50, 0x3a, 0x3f, 0x73, 0xa7, 0x1e, 0x0f, 0x43, 0x59, 0x8d, 0x8c, 0xdb, 0x88, 0x73, 0xb0,
	0x2b, 0x7b, 0xc2, 0x65, 0x4d, 0x32, 0x6e, 0xe3, 0x98, 0xcf, 0xfc, 0xe9, 0xd8, 0xf6, 0xdc, 0x70,
	0x46, 0x95, 0x49, 0xf4, 0x29, 0x0a, 0x80, 0x9c, 0xa1, 0x7d, 0x66, 0x4f, 0x78, 0x70, 0x49, 0xf5,
	0xc9, 0x3c, 0x8b, 0xdb, 0xfa, 0x57, 0x50, 0x18, 0xa3, 0xe1, 0x85, 0x54, 0x9c, 0x5c, 0x7d, 0xfd,
	0x81, 0x34, 0x4c, 0x92, 0x0a, 0x81, 0x53, 0x3c, 0xbd, 0x2f, 0xa9, 0x68, 0x49, 0x02, 0x45, 0x3b,
	0x39, 0xbc, 0x36, 0xaf, 0x3b, 0xbc, 0xb4, 0xd4, 0xe1, 0xf5, 0x2e, 0x94, 0xc6, 0xdc, 0x8b, 0x78,
	0x60, 0x5d, 0xc8, 0xb0, 0xa9, 0x28, 0xda, 0xcf, 0x53, 0xa8, 0x4b, 0x2a, 0x9f, 0xc7, 0xa8, 0x34,
	0xd7, 0x2b, 0x15, 0x23, 0x89, 0xf6, 0x0b, 0x42, 0x2d, 0x02, 0xeb, 0x92, 0xdb, 0x41, 0x6d, 0x4b,
	0xa2, 0x16, 0xc1, 0x11, 0xb7, 0x03, 0xbd, 0x0e, 0x55, 0x85, 0xb2, 0x22, 0x77, 0xfc, 0x92, 0x02,
	0xa0, 0x3c, 0xab, 0x48, 0xfc, 0xd0, 0x1d, 0xbf, 0xd4, 0x1b, 0xca, 0xe6, 0xe6, 0xfe, 0x94, 0x87,
	0x14, 0x07, 0x6d, 0x3c, 0x79, 0xb4, 0xe2, 0x2c, 0x44, 0xc2, 0x3e, 0xd2, 0x49, 0xab, 0xa4, 0xdf,
	0xfa, 0x2f, 0xa1, 0x12, 0xb8, 0x67, 0x1c, 0xfb, 0x40, 0x11, 0x0f, 0x6e, 0x3a, 0x90, 0xe3, 0x5b,
	0x48, 0x06, 0x81, 0xfa, 0x19, 0x62, 0xac, 0x28, 0x6a, 0xb6, 0x89, 0x0d, 0xd6, 0x48, 0xc3, 0xa2,
	0xe2, 0x6b, 0xc4, 0x86, 0xd8, 0x84, 0xf5, 0x80, 0x4f, 0x30, 0xea, 0x14, 0x7d, 0x89, 0x32, 0xe3,
	0x8a, 0xe1, 0x32, 0xa2, 0xa4, 0xce, 0x2a, 0x41, 0xfc, 0x3b, 0xac, 0xff, 0xa3, 0x0c, 0xbc, 0x37,
	0x70, 0x23, 0xce, 0xb8, 0x3d, 0x75, 0x5f, 0x91, 0x60, 0x55, 0x94, 0x38, 0x44, 0x8b, 0x7e, 0x80,
	0x1e, 0xc0, 0x0e, 0xa2, 0xd8, 0x85, 0x17, 0xa8, 0xf9, 0x3c, 0x41, 0x28, 0xcf, 0x2d, 0x10, 0x47,
	0x09, 0x42, 0x39, 0x6c, 0x81, 0xa0, 0xb0, 0x89, 0x7b, 0x4e, 0xec, 0xa6, 0x73, 0xdc, 0x73, 0x9e,
	0x2b, 0x60, 0x1c, 0x75, 0x71, 0xcf, 0x39, 0x52, 0xc0, 0x38, 0xea, 0xe2, 0x9e, 0xf3, 0xa2, 0x3e,
	0x86, 0xf7, 0x57, 0x0c, 0x74, 0xe8, 0x9f, 0xf3, 0x40, 0xbf, 0x07, 0x85, 0xc0, 0xf7, 0x4f, 0xac,
	0x57, 0x72, 0xa0, 0x79, 0x6c, 0x51, 0x5c, 0x11, 0xf8, 0x0b, 0x4f, 0xe5, 0x6e, 0xa2, 0x81, 0x0e,
	0x6f, 0xe2, 0x1f, 0x4f, 0xe5, 0xd3, 0x84, 0x12, 0x93, 0xad, 0xfa, 0x9f, 0x64, 0xa0, 0x32, 0x0c,
	0xb8, 0x37, 0x3e, 0x1d, 0xcc, 0xfd, 0x97, 0x1c, 0xbd, 0xd0, 0x0c, 0x19, 0x2c, 0x9a, 0x83, 0x3a,
	0xc5, 0x08, 0x34, 0x40, 0x88, 0x2c, 0x57, 0x7b, 0xe3, 0x53, 0x49, 0x21, 0x74, 0x51, 0x11, 0x30,
	0x41, 0xf2, 0x01, 0x80, 0x24, 0xe1, 0x9e, 0x23, 0x75, 0x52, 0x16, 0x10, 0xc3, 0x73, 0xa8, 0x74,
	0x49, 0x5d, 0x20, 0x56, 0x16, 0x32, 0x08, 0x60, 0x78, 0x4e, 0xfd, 0x8f, 0xe0, 0xa3, 0x55, 0x93,
	0x26, 0x01, 0x3c, 0xd4, 0x9f, 0x42, 0x21, 0xc4, 0xb1, 0xaa, 0x30, 0x73, 0x85, 0x8b, 0x4e, 0xcd,
	0x8a, 0x49, 0x86, 0xfa, 0xff, 0xce, 0xc2, 0x83, 0x15, 0xe2, 0x5f, 0xbb, 0x22, 0x35, 0xe4, 0x1d,
	0xa6, 0x38, 0x5c, 0xbe, 0x5c, 0x71, 0x0e, 0xac, 0x18, 0x2b, 0xba, 0x78, 0x71, 0xaf, 0x19, 0x07,
	0xe9, 0xd9, 0x2b, 0x41, 0xfa, 0xaa, 0x78, 0xfc, 0x22, 0x15, 0x8f, 0x3f, 0x4f, 0x82, 0xf4, 0x42,
	0x2a, 0x48, 0x4f, 0xdf, 0x95, 0x16, 0xdf, 0xee, 0xae, 0xb4, 0x0b, 0xe5, 0x73, 0x7b, 0x3a, 0x15,
	0x69, 0xa9, 0x28, 0x59, 0xbc, 0xdd, 0xd4, 0x70, 0x93, 0xb0, 0x12, 0xca, 0xa0, 0xb0, 0xe7, 0x57,
	0x00, 0x11, 0x5a, 0xa3, 0x10, 0x28, 0x9e, 0x88, 0x3c, 0x79, 0x3b, 0x5d, 0x21, 0x3b, 0x2b, 0x93,
	0x14, 0x12, 0x79, 0x00, 0xd2, 0x9a, 0x84, 0x4c, 0x20, 0x99, 0x7f, 0xf0, 0x76, 0x32, 0xa5, 0xad,
	0x30, 0x69, 0x88, 0x28, 0xb7, 0xfe, 0x97, 0x0a, 0x00, 0x89, 0x57, 0x58, 0x3e, 0xf4, 0x32, 0x57,
	0x1e, 0x4d, 0x2c, 0x1d, 0x7a, 0x32, 0x1c, 0x5e, 0x71, 0xe8, 0xc9, 0x20, 0x6d, 0xf5, 0xa1, 0x97,
	0x93, 0x3b, 0x64, 0xc5, 0xa1, 0x27, 0x56, 0xfb, 0xfa, 0x43, 0x4f, 0x2c, 0xfa, 0x8a, 0x43, 0xaf,
	0x28, 0x03, 0xe9, 0x6b, 0x0f, 0xbd, 0x92, 0x2c, 0x2c, 0xaa, 0x43, 0x2f, 0x7d, 0x7e, 0x95, 0x15,
	0x4e, 0x9e, 0x5f, 0x57, 0x5c, 0x38, 0xbc, 0xf1, 0xd9, 0xc5, 0x6d, 0x5c, 0x78, 0x85, 0x3a, 0xb9,
	0xea, 0xc2, 0xf7, 0x41, 0x0b, 0x17, 0xc1, 0x89, 0x3d, 0x4e, 0x6e, 0x30, 0x65, 0x71, 0xe4, 0x0d,
	0x16, 0xbc, 0x29, 0xd9, 0x54, 0x85, 0x57, 0xdf, 0x85, 0x4d, 0x91, 0x1b, 0x25, 0x37, 0xa1, 0xd5,
	0x5b, 0x5d, 0xcb, 0x12, 0x57, 0x72, 0x15, 0xfa, 0x2c, 0x7d, 0x89, 0x27, 0x1e, 0xfa, 0x7c, 0xfe,
	0x56, 0xb6, 0x96, 0xbe, 0xcb, 0xdb, 0x85, 0xcd, 0x30, 0xf2, 0xbd, 0xf4, 0xf5, 0xec, 0xe6, 0xad,
	0x06, 0x45, 0x5c, 0x4b, 0xb7, 0xbc, 0x74, 0x85, 0x97, 0x88, 0xd1, 0x6e, 0x75, 0xcb, 0x8b, 0x4c,
	0x89, 0x14, 0x1d, 0x72, 0xa1, 0xe7, 0x9f, 0xcb, 0x48, 0x83, 0x7e, 0xd7, 0xff, 0x61, 0x06, 0xca,
	0x62, 0x13, 0x60, 0xcc, 0x99, 0xba, 0x6d, 0xcf, 0x5c, 0x77, 0xdb, 0x9e, 0x44, 0x2e, 0xbf, 0x65,
	0x64, 0xf9, 0x13, 0x75, 0x1f, 0x9f, 0xbf, 0xe5, 0x59, 0x2d, 0xc8, 0xf1, 0x58, 0x82, 0x78, 0x98,
	0x21, 0x26, 0xc2, 0x22, 0x4e, 0x99, 0xd9, 0xf3, 0x37, 0x54, 0x17, 0x54, 0x3c, 0x2d, 0xd3, 0x16,
	0x62, 0x47, 0x03, 0x17, 0x81, 0x03, 0xf1, 0xaf, 0xdd, 0x18, 0xa3, 0xa8, 0x5e, 0x19, 0x04, 0xf1,
	0x00, 0xea, 0x7f, 0x3f, 0x03, 0x77, 0xfa, 0x74, 0x55, 0xe9, 0xb5, 0x78, 0x38, 0x0e, 0xdc, 0x79,
	0xe4, 0x07, 0xa9, 0x23, 0x43, 0xdc, 0x97, 0xfc, 0x3c, 0xae, 0x61, 0xaf, 0xdd, 0xf4, 0x88, 0xe2,
	0x6a, 0x89, 0x52, 0x95, 0xba, 0xbf, 0x81, 0xa2, 0xb8, 0x0e, 0xf5, 0x6e, 0x7e, 0x65, 0x24, 0x07,
	0x22, 0x92, 0x0f, 0xc9, 0x51, 0xff, 0xef, 0x19, 0xd0, 0x48, 0xb0, 0xaa, 0xa8, 0x33, 0xfb, 0x5c,
	0x6f, 0x42, 0x49, 0xe2, 0x95, 0xd6, 0x7e, 0x70, 0xa3, 0xc8, 0x64, 0x6e, 0x2c, 0x66, 0xa4, 0xac,
	0xd4, 0x77, 0x2e, 0xad, 0x39, 0xc6, 0x38, 0x54, 0x13, 0xa6, 0x28, 0x1f, 0x61, 0x7d, 0x3b, 0xc0,
	0x8c, 0xf9, 0x33, 0xd8, 0x8c, 0xdc, 0x30, 0x5c, 0x70, 0x4b, 0xbc, 0x94, 0x70, 0xf1, 0xd4, 0xa7,
	0xbb, 0x02, 0x01, 0x6e, 0x23, 0xd4, 0x74, 0xe4, 0x7b, 0x9b, 0x20, 0xb2, 0x1c, 0x3b, 0x52, 0x7e,
	0xb1, 0x4c, 0x90, 0x96, 0x1d, 0xd1, 0xe5, 0x07, 0x46, 0x41, 0x84, 0x94, 0x0f, 0x21, 0xb9, 0xe7,
	0x10, 0x4a, 0x87, 0x1c, 0x76, 0x4f, 0x0e, 0xb1, 0xcc, 0xe8, 0x77, 0xfd, 0x6f, 0x66, 0x40, 0xdb,
	0x91, 0x83, 0xa0, 0x1e, 0x70, 0xc6, 0x1f, 0x00, 0x88, 0x31, 0x90, 0xb5, 0x8a, 0xa5, 0x29, 0x13,
	0xa4, 0x2b, 0x0b, 0xa8, 0x72, 0xa4, 0xb2, 0xb8, 0x9d, 0x67, 0x25, 0x01, 0x30, 0x1d, 0xba, 0x25,
	0x21, 0x5e, 0x87, 0xcf, 0xe9, 0xa9, 0xaa, 0xb8, 0x25, 0x41, 0x50, 0x0b, 0x21, 0xaf, 0xdd, 0x75,
	0xe4, 0x5e, 0xbb, 0xeb, 0xa8, 0xff, 0x9b, 0x0c, 0x54, 0xd4, 0xa0, 0x70, 0x3c, 0x5b, 0x90, 0x8f,
	0xfc, 0x97, 0xdc, 0x93, 0x43, 0x11, 0x0d, 0xf4, 0xc6, 0x63, 0x3b, 0xe2, 0x13, 0x3f, 0xb8, 0x94,
	0xd7, 0x6d, 0x71, 0x1b, 0x23, 0xb5, 0xb9, 0x1d, 0x70, 0x2f, 0x52, 0xd1, 0xa4, 0x68, 0xa1, 0x24,
	0xf1, 0x8c, 0x32, 0x27, 0xde, 0x5b, 0x50, 0x43, 0xff, 0x16, 0x0a, 0x34, 0x40, 0xb5, 0xc3, 0x3e,
	0x5b, 0x5d, 0x63, 0x4e, 0xeb, 0x89, 0x49, 0x2e, 0xbd, 0x06, 0xc5, 0x80, 0x4f, 0xe9, 0xfd, 0x93,
	0x7c, 0x5f, 0x2a, 0x9b, 0xf5, 0x3f, 0x82, 0xad, 0x9d, 0x79, 0x52, 0x03, 0x8e, 0x2f, 0x6a, 0x74,
	0x19, 0x17, 0x89, 0x09, 0x89, 0x20, 0xe7, 0x01, 0x14, 0x67, 0xbe, 0x93, 0x7a, 0x15, 0x5b, 0x98,
	0xf9, 0x4e, 0xc7, 0xf5, 0x62, 0x84, 0xad, 0xe2, 0x1f, 0x42, 0xd8, 0x17, 0xf5, 0xbf, 0x97, 0x81,
	0xf2, 0x90, 0x14, 0x8f, 0x5a, 0xba, 0xba, 0x91, 0xae, 0x7b, 0x0e, 0x9e, 0x0e, 0x7a, 0xb2, 0x6f,
	0x17, 0xf4, 0x3c, 0x81, 0x7b, 0xe1, 0xe2, 0xd8, 0x0f, 0x1c, 0xd7, 0xb3, 0x23, 0x6e, 0x45, 0xbe,
	0x25, 0xd6, 0x5c, 0x7a, 0xac, 0xbb, 0x29, 0xe4, 0xd0, 0x17, 0xa3, 0xaa, 0xff, 0xb3, 0x3c, 0x94,
	0x9a, 0x76, 0x18, 0x71, 0xb9, 0x8a, 0xea, 0x35, 0x70, 0x26, 0x79, 0x0d, 0x8c, 0xc9, 0x17, 0x52,
	0x58, 0xf1, 0xa5, 0x69, 0x91, 0xda, 0xc2, 0xd2, 0x05, 0x4a, 0x3a, 0xcd, 0x2c, 0x9a, 0x21, 0x41,
	0x94, 0x19, 0x1e, 0xdb, 0xc7, 0x97, 0x02, 0x9b, 0x23, 0x6c, 0x09, 0x01, 0x84, 0x44, 0xde, 0x53,
	0x57, 0xd5, 0x60, 0xf2, 0x92, 0x17, 0x21, 0x84, 0xc6, 0x48, 0x9e, 0x7b, 0x0e, 0x0f, 0xe4, 0x82,
	0xc9, 0x96, 0xfe, 0x4b, 0x80, 0x78, 0x9b, 0xaa, 0xb7, 0x45, 0x1f, 0xdf, 0x6c, 0x0d, 0x68, 0x08,
	0x65, 0xb5, 0x8f, 0xe9, 0x9e, 0x2e, 0xf2, 0x23, 0x7b, 0x6a, 0x29, 0x8b, 0x10, 0x41, 0xc4, 0x3a,
	0x01, 0x99, 0x80, 0xe9, 0xfb, 0x18, 0xbd, 0xab, 0x0d, 0x50, 0xa6, 0x5e, 0xb6, 0x57, 0xf4, 0x72,
	0x8d, 0xf5, 0xb0, 0x84, 0x19, 0x77, 0x93, 0x6a, 0x58, 0xae, 0x73, 0x21, 0x33, 0xfc, 0x8a, 0x82,
	0x99, 0x0e, 0x69, 0x58, 0x7a, 0x9d, 0x0b, 0x99, 0xe3, 0x17, 0xe7, 0xe4, 0x72, 0x2e, 0x50, 0x85,
	0xca, 0xd9, 0x5c, 0xa8, 0x14, 0x7f, 0x2a, 0xfc, 0xcc, 0x85, 0x7e, 0x02, 0xef, 0x92, 0x2e, 0x92,
	0x6b, 0x8b, 0xd4, 0xae, 0xad, 0xbe, 0xf5, 0xa0, 0x1f, 0xa0, 0xb0, 0xd7, 0xe1, 0xa1, 0xde, 0x83,
	0x4d, 0xf2, 0xdd, 0x29, 0xe9, 0x1b, 0x37, 0x6d, 0xc3, 0xab, 0x0e, 0x9a, 0x6d, 0x8c, 0xd3, 0x10,
	0xf4, 0xb5, 0x15, 0x47, 0xfa, 0x60, 0x0c, 0xa2, 0x36, 0xc5, 0x89, 0x9a, 0x02, 0xa1, 0x75, 0xd8,
	0xce, 0x62, 0x1a, 0x89, 0x37, 0x8b, 0xa2, 0xb8, 0x50, 0x26, 0xc8, 0x00, 0x77, 0xed, 0xbf, 0xcf,
	0x42, 0xa5, 0x29, 0xaf, 0x16, 0x56, 0x5b, 0xee, 0x47, 0x50, 0x89, 0xaf, 0x2e, 0x62, 0xe3, 0x05,
	0x05, 0x32, 0xd3, 0x37, 0xff, 0xd9, 0x78, 0x03, 0x6e, 0xc3, 0x9d, 0x09, 0xf7, 0x78, 0x60, 0x4f,
	0xad, 0xab, 0xc6, 0xbb, 0x29, 0x11, 0x3b, 0xca, 0x86, 0x7f, 0x04, 0xba, 0xa2, 0x7d, 0xcd, 0x96,
	0x35, 0x89, 0x69, 0xc6, 0x26, 0xfd, 0x49, 0xea, 0x26, 0x85, 0x9e, 0x46, 0x0a, 0xcb, 0x8e, 0xef,
	0x48, 0x28, 0x5e, 0x7f, 0x02, 0xf7, 0x62, 0x22, 0x79, 0xeb, 0x26, 0x88, 0x45, 0x1c, 0x7c, 0x57,
	0x21, 0xe5, 0x05, 0x1c, 0xf1, 0x7c, 0x03, 0x79, 0x71, 0x65, 0x58, 0x7a, 0x9b, 0x2b, 0x43, 0xc1,
	0x83, 0xc1, 0x36, 0xe9, 0x95, 0x14, 0x5d, 0x4e, 0x29, 0x9a, 0xf6, 0xc1, 0xd7, 0x90, 0xa7, 0xfd,
	0x4c, 0x66, 0xbb, 0x32, 0x1a, 0x51, 0x1e, 0x84, 0x09, 0x62, 0xfd, 0x29, 0x14, 0x85, 0xeb, 0x09,
	0xc9, 0x9e, 0x57, 0x46, 0x21, 0xb1, 0x6b, 0x64, 0x8a, 0xbe, 0x7e, 0x04, 0x9b, 0xa9, 0x85, 0xa5,
	0xfb, 0x81, 0xdd, 0x94, 0xde, 0x02, 0xfb, 0xfc, 0x0d, 0x09, 0x71, 0x8a, 0x3b, 0x51, 0x2d, 0xb3,
	0xcf, 0xc3, 0xfa, 0x7f, 0xcd, 0x40, 0xae, 0x11, 0xcc, 0x2e, 0x5f, 0xcb, 0x81, 0xe3, 0x2b, 0x8e,
	0xb5, 0xeb, 0xee, 0x7b, 0xb3, 0xd7, 0xdd, 0xf7, 0xe6, 0x52, 0xf7, 0xbd, 0x7f, 0x11, 0x0a, 0x53,
	0xea, 0x5b, 0xde, 0xde, 0xdf, 0xee, 0x6a, 0x4c, 0xf2, 0xe8, 0xdf, 0x42, 0x71, 0xc6, 0x67, 0xc7,
	0xb8, 0xa9, 0x0a, 0x6f, 0x71, 0xb3, 0xa6, 0x98, 0x92, 0x03, 0xb3, 0x48, 0xf7, 0xb6, 0xa2, 0x51,
	0xff, 0x16, 0x4a, 0x38, 0x55, 0xd2, 0xdf, 0x13, 0x28, 0xd8, 0xc1, 0xcc, 0x8d, 0x2b, 0x09, 0x0f,
	0x57, 0x3d, 0x58, 0x9d, 0x5d, 0x32, 0x49, 0x59, 0xff, 0xd3, 0x0c, 0x54, 0xf6, 0x02, 0xff, 0x3c,
	0x3a, 0xed, 0x07, 0xae, 0x17, 0xe1, 0x51, 0x3e, 0x0f, 0x5c, 0x3f, 0xc0, 0xc4, 0x4a, 0xde, 0xaa,
	0xa8, 0x36, 0x8e, 0x40, 0x98, 0x9f, 0x50, 0x9f, 0xb4, 0xab, 0x8f, 0x61, 0x3d, 0x72, 0x67, 0xf4,
	0x2e, 0x88, 0x2a, 0x28, 0x59, 0x99, 0x1f, 0x12, 0x2c, 0xa9, 0xa0, 0x08, 0x92, 0xa4, 0x46, 0x52,
	0x16, 0x10, 0xc3, 0xa3, 0xdd, 0x49, 0x96, 0x2f, 0x0b, 0x05, 0xf8, 0xbb, 0xfe, 0x57, 0x73, 0x00,
	0xc3, 0x80, 0x73, 0x31, 0xb6, 0x15, 0xfb, 0xfe, 0x36, 0x0f, 0xaf, 0x7e, 0x0c, 0xd9, 0x99, 0x1d,
	0xdd, 0xee, 0xbd, 0x3a, 0x52, 0xea, 0x4f, 0xa1, 0x30, 0x47, 0x55, 0xa8, 0x10, 0x64, 0x85, 0xf9,
	0xa5, 0x94, 0xc6, 0x24, 0xc3, 0x6b, 0xaa, 0x28, 0xbc, 0x49, 0x15, 0xc5, 0xab, 0xaa, 0xc0, 0xf8,
	0xea, 0xdc, 0x9d, 0x88, 0xe7, 0x17, 0x25, 0x26, 0x1a, 0xfa, 0xa7, 0xb0, 0x41, 0xcf, 0x51, 0xad,
	0x63, 0x74, 0xd8, 0xa7, 0x3c, 0xa4, 0xfd, 0x5b, 0x62, 0x55, 0x82, 0xee, 0x48, 0x20, 0x92, 0x9d,
	0x72, 0xfb, 0xec, 0x32, 0x21, 0x03, 0x41, 0x46, 0xd0, 0x98, 0x0c, 0xfb, 0x08, 0x16, 0xde, 0x4b,
	0x79, 0xc9, 0x2f, 0x1a, 0xa2, 0xce, 0xe6, 0x47, 0xa1, 0x7c, 0xc7, 0x2d, 0x1a, 0xba, 0x06, 0xd9,
	0xb1, 0x3d, 0xa7, 0x4b, 0xfb, 0x12, 0xc3, 0x9f, 0x18, 0x61, 0x85, 0xf6, 0x7c, 0xea, 0x7a, 0x13,
	0xba, 0xb1, 0x2f, 0x31, 0xd5, 0x44, 0x27, 0x49, 0xa2, 0x64, 0x41, 0x5f, 0xea, 0x40, 0x14, 0x91,
	0x35, 0xc2, 0x88, 0xb2, 0xbe, 0x50, 0xc4, 0x63, 0xd0, 0x96, 0xa8, 0x51, 0x1d, 0xc2, 0xfd, 0x6f,
	0xa4, 0x68, 0x0d, 0xcf, 0xa9, 0xff, 0xed, 0x8c, 0xbc, 0xa5, 0x5c, 0x7d, 0x00, 0xdc, 0xc6, 0x10,
	0xfe, 0x10, 0x8a, 0x13, 0x5a, 0x33, 0x75, 0xcd, 0xfa, 0x68, 0x65, 0xa1, 0x4d, 0x5a, 0x1d, 0x53,
	0x0c, 0xd7, 0x5a, 0x68, 0x07, 0xd6, 0xd5, 0xa8, 0x96, 0x6f, 0x37, 0x53, 0xae, 0xeb, 0xa6, 0xdb,
	0x4d, 0x8a, 0x56, 0xe6, 0xf2, 0x57, 0x58, 0xff, 0x0d, 0xc0, 0x60, 0x1c, 0x70, 0x1e, 0x57, 0x73,
	0xc6, 0xa7, 0x76, 0x60, 0x8f, 0x23, 0x2e, 0x5e, 0x5c, 0x55, 0x59, 0x02, 0xd0, 0x3f, 0x04, 0x38,
	0xf1, 0x03, 0x3e, 0x49, 0x0a, 0xa3, 0x55, 0x96, 0x82, 0x20, 0xfe, 0xd8, 0x1e, 0xbf, 0x94, 0x78,
	0xf1, 0x8d, 0x43, 0x0a, 0x52, 0x5f, 0x40, 0x55, 0xf4, 0xd5, 0xb4, 0xe7, 0x54, 0xc0, 0x89, 0xbf,
	0x67, 0x13, 0x5d, 0xbd, 0xf6, 0x3d, 0x9b, 0xe8, 0x42, 0x7d, 0xcf, 0x16, 0x67, 0xc1, 0xd9, 0x9b,
	0xf4, 0x98, 0xcc, 0x46, 0x65, 0xc1, 0xff, 0x38, 0x03, 0xd5, 0x67, 0xfc, 0xf2, 0xd8, 0xb7, 0x03,
	0xc7, 0x38, 0xc3, 0x24, 0x20, 0x1d, 0x7c, 0x57, 0x65, 0xf0, 0x8d, 0x63, 0x39, 0x75, 0xc7, 0xa7,
	0xb2, 0x53, 0xd1, 0x40, 0x68, 0xf2, 0xc1, 0x4a, 0x55, 0x7d, 0x8d, 0xf2, 0x10, 0x4a, 0xe1, 0xd8,
	0xf6, 0xc6, 0xbe, 0xc3, 0xe5, 0x27, 0x1b, 0x71, 0x1b, 0x4d, 0x37, 0xbc, 0x9c, 0xd1, 0x92, 0x55,
	0x19, 0xfe, 0x44, 0xc8, 0xcc, 0x17, 0x2f, 0xa9, 0xaa, 0x0c, 0x7f, 0xa2, 0x31, 0x2f, 0x3c, 0x97,
	0xd8, 0x85, 0x57, 0x55, 0xcd, 0xfa, 0xdf, 0xca, 0x00, 0xb4, 0xdc, 0x49, 0xd3, 0x9f, 0xcd, 0x6c,
	0xcf, 0xd1, 0xbf, 0xa3, 0x40, 0x26, 0x7e, 0x64, 0x2c, 0xae, 0xf6, 0x6e, 0xff, 0xc8, 0x38, 0xcd,
	0xac, 0x3f, 0x85, 0xf2, 0xd4, 0x1f, 0xdb, 0xe2, 0x19, 0xc9, 0xda, 0x8d, 0x77, 0x36, 0xf4, 0xc9,
	0x4a, 0x42, 0x5d, 0xaf, 0x03, 0x0c, 0x5c, 0x6f, 0x32, 0xe5, 0x3b, 0xbe, 0x3f, 0x45, 0x9d, 0x1c,
	0xd8, 0xd3, 0x85, 0x50, 0x5f, 0x89, 0xe5, 0xcf, 0xb0, 0x51, 0xff, 0x27, 0x19, 0xa8, 0x1c, 0xf0,
	0x80, 0x5e, 0xae, 0x78, 0x27, 0xbe, 0xfe, 0x35, 0xdc, 0x77, 0xce, 0xed, 0xe0, 0xc4, 0x3a, 0x91,
	0xc2, 0xad, 0x33, 0x81, 0x95, 0x09, 0xca, 0x16, 0x61, 0x55, 0xcf, 0x92, 0x13, 0x7d, 0x89, 0x73,
	0x72, 0x6a, 0x8f, 0x5f, 0xc6, 0xd4, 0x62, 0x77, 0x55, 0x05, 0x54, 0x91, 0x35, 0xe1, 0xc3, 0x80,
	0x46, 0x9e, 0x48, 0x0f, 0x68, 0xec, 0x31, 0x9b, 0xd8, 0x82, 0xef, 0x05, 0xd7, 0xcc, 0x4f, 0x0a,
	0xa9, 0xef, 0x41, 0x05, 0x77, 0x90, 0x7a, 0x2c, 0x82, 0x39, 0xaf, 0x1b, 0x46, 0x4b, 0x25, 0xfb,
	0x32, 0x42, 0x84, 0xe3, 0x78, 0x17, 0x4a, 0x84, 0xe6, 0x9e, 0x4a, 0x79, 0x8b, 0xd8, 0x46, 0x4f,
	0xf1, 0x7f, 0xd7, 0xa0, 0xc0, 0xf8, 0xdc, 0x0f, 0x96, 0x2d, 0x2b, 0x2f, 0x2d, 0x0b, 0x61, 0xfc,
	0x22, 0x52, 0x69, 0x18, 0xfe, 0x4e, 0x42, 0xaa, 0xec, 0x6f, 0x11, 0x52, 0x3d, 0x84, 0x92, 0xb3,
	0x08, 0xd2, 0xdf, 0xa9, 0xc5, 0x6d, 0xbd, 0x0e, 0xeb, 0x63, 0xdf, 0x8b, 0x5c, 0x6f, 0xa1, 0xee,
	0x21, 0x71, 0x8d, 0x96, 0x60, 0x18, 0x1e, 0x2f, 0xbc, 0xb1, 0xef, 0x85, 0x63, 0xd7, 0x5f, 0x84,
	0x64, 0x98, 0x25, 0x96, 0x06, 0xa1, 0x14, 0xdb, 0xf3, 0xfc, 0x85, 0x37, 0xa6, 0x6f, 0x52, 0xc8,
	0x4a, 0x4b, 0x6c, 0x09, 0x86, 0xa7, 0x4e, 0xc0, 0xe7, 0xdc, 0x8e, 0xe4, 0x4b, 0x29, 0x91, 0xe6,
	0x54, 0x04, 0x4c, 0x3c, 0x95, 0x92, 0xdf, 0x47, 0x95, 0x6f, 0xf9, 0x7d, 0x94, 0x70, 0xa7, 0x10,
	0xc7, 0x4d, 0x3a, 0xe4, 0xe8, 0x4a, 0x4e, 0x14, 0x41, 0xe9, 0xb7, 0x70, 0x89, 0x33, 0xf1, 0xd9,
	0x0f, 0xb9, 0xc4, 0x19, 0xaf, 0xff, 0x12, 0x0a, 0x83, 0x88, 0xee, 0x8e, 0x7f, 0x82, 0x79, 0x38,
	0x2e, 0x84, 0xf2, 0x84, 0xef, 0xaf, 0x2a, 0x4f, 0x21, 0x11, 0x53, 0xc4, 0xf5, 0x9f, 0x80, 0x46,
	0xdf, 0x37, 0xb7, 0xe2, 0x14, 0x21, 0xb8, 0x2e, 0x9b, 0x26, 0x67, 0xbc, 0x96, 0x72, 0xc6, 0xdf,
	0x41, 0xa9, 0x6d, 0x7b, 0x93, 0x85, 0x3d, 0xe1, 0xfa, 0xb7, 0x50, 0xa0, 0x8f, 0xa3, 0x55, 0xd7,
	0x2b, 0x92, 0x97, 0xab, 0xfd, 0x30, 0xc9, 0x55, 0xff, 0xf3, 0x0c, 0x6c, 0x5e, 0xf9, 0x30, 0xe8,
	0x77, 0xf9, 0x04, 0xef, 0xe9, 0xd2, 0xc5, 0xcb, 0xaa, 0x0f, 0x91, 0x92, 0xbe, 0x52, 0x97, 0x2d,
	0x5b, 0xea, 0xc3, 0x70, 0x11, 0x53, 0xc9, 0x6f, 0xbe, 0x3f, 0x81, 0x2a, 0x7d, 0xbd, 0x7d, 0xe2,
	0x8e, 0xc5, 0xfb, 0xe8, 0x9c, 0x7c, 0x7f, 0x2a, 0x81, 0xf4, 0xf6, 0x39, 0xfe, 0x76, 0x29, 0xff,
	0x36, 0xdf, 0x2e, 0xfd, 0xaf, 0x0c, 0x6c, 0x2a, 0x98, 0x31, 0x15, 0x53, 0xa7, 0xa8, 0x6f, 0xe1,
	0xa9, 0x9d, 0x28, 0x1a, 0xfa, 0xcf, 0x97, 0x66, 0xf5, 0xc3, 0x9b, 0xc5, 0x4b, 0x51, 0xa9, 0x99,
	0xed, 0xa4, 0x42, 0x7d, 0x7a, 0xef, 0x79, 0xab, 0x12, 0x48, 0x1c, 0xe6, 0xd3, 0x1b, 0xd3, 0xf4,
	0x9a, 0xe4, 0xdf, 0x6e, 0x4d, 0x84, 0x49, 0x15, 0x94, 0x81, 0xd7, 0xff, 0x55, 0x06, 0x34, 0x35,
	0xd8, 0x7e, 0xe0, 0xcf, 0x79, 0x10, 0x5d, 0x52, 0xa4, 0xb3, 0x38, 0xfe, 0x0d, 0x1f, 0x47, 0xf1,
	0x9b, 0x67, 0xd1, 0xc4, 0x83, 0xd1, 0x17, 0x08, 0x59, 0x1e, 0x12, 0x2d, 0xfd, 0x27, 0x90, 0x3b,
	0xe3, 0xc1, 0xb1, 0x2c, 0x77, 0xd6, 0x6f, 0x56, 0xca, 0x01, 0x0f, 0x8e, 0x19, 0xd1, 0xeb, 0xdf,
	0x4a, 0x65, 0x8a, 0x37, 0x1a, 0xdb, 0x37, 0xf3, 0xa9, 0xf1, 0x25, 0xda, 0xac, 0xff, 0x59, 0x06,
	0xb3, 0x00, 0x81, 0xd6, 0x1b, 0x50, 0xe2, 0x53, 0xf9, 0xf1, 0x5b, 0xe6, 0xa6, 0xba, 0xed, 0x95,
	0xd5, 0x61, 0x31, 0x9b, 0xfe, 0x79, 0x1c, 0x4e, 0xbd, 0x51, 0xa7, 0xb8, 0x21, 0x77, 0xe9, 0x3b,
	0x40, 0x1c, 0x94, 0x1b, 0x07, 0x05, 0x9f, 0xdd, 0x6e, 0x12, 0x2c, 0xc5, 0x59, 0xff, 0x3b, 0x59,
	0x28, 0xc7, 0x8f, 0xdc, 0x94, 0xcf, 0xca, 0xdc, 0xd2, 0x67, 0xd5, 0xa0, 0xf8, 0xfd, 0xc2, 0x9e,
	0x62, 0xde, 0x22, 0x4f, 0x05, 0xd9, 0x8c, 0xfd, 0x45, 0x36, 0xf1, 0x17, 0xc9, 0xf6, 0xc8, 0xbd,
	0xc5, 0xf6, 0x10, 0x29, 0x98, 0xef, 0x07, 0xd2, 0x99, 0x8b, 0x06, 0xca, 0xa7, 0xef, 0x7b, 0x85,
	0xfb, 0xa6, 0xdf, 0x08, 0xa3, 0x0f, 0x85, 0x85, 0xbf, 0x16, 0xdf, 0x01, 0x6f, 0xa9, 0x4f, 0x95,
	0x65, 0x6c, 0x2f, 0xbe, 0x44, 0xde, 0x52, 0x5f, 0x22, 0x8b, 0x90, 0x5e, 0x7e, 0x68, 0x9c, 0x7c,
	0xa5, 0x26, 0x42, 0x78, 0xf5, 0x95, 0xda, 0xfb, 0x50, 0x26, 0x36, 0xea, 0x50, 0x3e, 0xd2, 0x8d,
	0x01, 0x31, 0x96, 0xba, 0x5e, 0x4f, 0x61, 0xa9, 0xff, 0xf7, 0xa1, 0x4c, 0xc2, 0x89, 0x57, 0x44,
	0xf4, 0x09, 0x20, 0xc6, 0x12, 0xef, 0x46, 0x0a, 0x8b, 0x80, 0xfa, 0x5f, 0xcf, 0x42, 0x49, 0x7d,
	0xd9, 0xb3, 0x22, 0x06, 0x7f, 0xb2, 0xe4, 0x11, 0x6e, 0xf8, 0x3a, 0x28, 0xe5, 0x06, 0x6a, 0x50,
	0x74, 0xb8, 0x17, 0xe2, 0xa2, 0xc9, 0xcf, 0x03, 0x64, 0x53, 0xad, 0x7e, 0xee, 0x96, 0xab, 0xff,
	0x63, 0xc8, 0x39, 0x38, 0xad, 0xfc, 0x9b, 0xe9, 0x89, 0x90, 0xae, 0x4b, 0x2f, 0xe6, 0xb6, 0xe7,
	0x60, 0x22, 0x23, 0x56, 0x2e, 0x01, 0x50, 0x32, 0xc4, 0x17, 0x21, 0x97, 0xeb, 0x27, 0x1a, 0x18,
	0x79, 0x4c, 0x16, 0xae, 0x43, 0x35, 0x26, 0x71, 0xc8, 0x16, 0xa9, 0x6d, 0x3a, 0xbf, 0xcb, 0x3f,
	0x16, 0x50, 0x5f, 0x54, 0xc3, 0xed, 0xbf, 0xa8, 0x3e, 0x81, 0xdc, 0xa1, 0x7d, 0xc6, 0xe3, 0x59,
	0x67, 0x6e, 0x3b, 0xeb, 0xb7, 0xfb, 0x4e, 0x7a, 0xfb, 0x5f, 0xac, 0x41, 0x75, 0xe9, 0xdf, 0x8e,
	0xe8, 0xf7, 0xa0, 0xd4, 0xed, 0x59, 0x83, 0xfd, 0x46, 0xdf, 0xd0, 0xfe, 0x9f, 0xfa, 0xcb, 0xe8,
	0x65, 0xc8, 0x1b, 0x9d, 0xfe, 0xf0, 0x48, 0x7b, 0x07, 0x7f, 0xee, 0xb6, 0x7b, 0x3d, 0xa6, 0x65,
	0xf4, 0x0a, 0x14, 0x77, 0x7a, 0xa3, 0x76, 0xcb, 0x60, 0xda, 0x1a, 0x36, 0xfa, 0xc6, 0xce, 0x4e,
	0xdb, 0x18, 0x68, 0x59, 0xbd, 0x04, 0xb9, 0xc3, 0x46, 0xbb, 0xad, 0xe5, 0xf4, 0x3b, 0x50, 0xdd,
	0xed, 0xb1, 0xa1, 0xb9, 0x6b, 0x36, 0x1b, 0x43, 0xb3, 0xd7, 0xd5, 0xf2, 0xfa, 0x3a, 0x94, 0x06,
	0xc3, 0x86, 0xc9, 0xac, 0x51, 0x5f, 0x2b, 0xe8, 0x1b, 0x00, 0xa2, 0xd5, 0xea, 0x1d, 0x76, 0xb5,
	0xa2, 0xae, 0xc1, 0xba, 0xc2, 0x12, 0xa4, 0x84, 0xc2, 0x58, 0xa3, 0xd3, 0xd7, 0xca, 0xc8, 0x89,
	0xbf, 0xac, 0x61, 0xaf, 0xaf, 0x81, 0x5e, 0x85, 0xf2, 0x0e, 0xeb, 0xf5, 0x9e, 0x59, 0x3b, 0x46,
	0x4b, 0xab, 0x24, 0x4d, 0xc4, 0xae, 0xa3, 0xdc, 0x21, 0x33, 0x0c, 0x39, 0x97, 0x2a, 0x8e, 0x6f,
	0xd0, 0xe8, 0xb7, 0xcd, 0xee, 0x9e, 0xb6, 0x81, 0x93, 0x18, 0xec, 0xb3, 0xd1, 0x8e, 0xb6, 0xa9,
	0x6f, 0x42, 0xc5, 0xe8, 0xb6, 0xda, 0xc6, 0x60, 0x60, 0xf5, 0xcd, 0xa1, 0xa6, 0xe9, 0x00, 0x85,
	0x1d, 0xd6, 0xe8, 0x36, 0xf7, 0xb5, 0x3b, 0x38, 0x98, 0x21, 0x1b, 0x75, 0x9f, 0x59, 0x12, 0xa2,
	0xe3, 0x60, 0x86, 0x87, 0xe6, 0x9e, 0x76, 0x77, 0xfb, 0xcf, 0x32, 0xb0, 0x79, 0xe5, 0xdf, 0xae,
	0xe8, 0x0f, 0x00, 0x50, 0x7d, 0x7d, 0xa3, 0x69, 0x36, 0xda, 0x69, 0x05, 0x02, 0x14, 0xba, 0x3d,
	0xd6, 0x69, 0xb4, 0xb5, 0x77, 0x50, 0x28, 0x33, 0x0f, 0x0c, 0x66, 0x0d, 0x7a, 0x23, 0xd6, 0x34,
	0xb4, 0x0c, 0x0e, 0xfd, 0xb0, 0x31, 0x34, 0xd8, 0x2e, 0xea, 0x6c, 0x0d, 0x89, 0x07, 0x9d, 0x5e,
	0x6f, 0xb8, 0xaf, 0x65, 0x71, 0xca, 0xbb, 0x23, 0xc6, 0x7a, 0x87, 0x46, 0x4b, 0xcb, 0xe9, 0x45,
	0xc8, 0x1e, 0x1a, 0x43, 0x2d, 0x8f, 0xc3, 0x68, 0x19, 0x8d, 0x96, 0x56, 0x40, 0xe2, 0xc3, 0x1e,
	0xeb, 0x5a, 0x5f, 0x6a, 0xc5, 0xf8, 0xf7, 0x13, 0xad, 0x14, 0xff, 0xfe, 0x4a, 0x2b, 0xe3, 0x74,
	0x87, 0xac, 0xd1, 0x7c, 0xa6, 0x01, 0x4e, 0x57, 0xc8, 0xb6, 0x88, 0xbf, 0xb2, 0xfd, 0xd7, 0xb2,
	0xa0, 0x5d, 0xfd, 0xdf, 0x2f, 0x7a, 0x0d, 0x2a, 0xdd, 0x9e, 0xd5, 0xc1, 0x31, 0x5d, 0x99, 0x48,
	0x11, 0xb2, 0x0d, 0x93, 0x69, 0xef, 0xe0, 0x08, 0x06, 0x3d, 0xb3, 0xad, 0x91, 0x71, 0x0c, 0x86,
	0xbd, 0xae, 0x21, 0x8c, 0x60, 0xd7, 0x68, 0x0c, 0x47, 0xcc, 0xd0, 0xb2, 0xb8, 0x02, 0xed, 0xc6,
	0x41, 0xc3, 0x12, 0xc8, 0x1c, 0x22, 0x3b, 0x66, 0xd7, 0x60, 0x8d, 0xb6, 0x96, 0x27, 0xbb, 0x60,
	0xbd, 0x17, 0x46, 0xd7, 0x6a, 0x9b, 0xbf, 0x1a, 0x99, 0x38, 0x13, 0x0d, 0xd6, 0x9b, 0xbd, 0xee,
	0x60, 0xc8, 0x46, 0x4d, 0xb2, 0x94, 0x22, 0x0e, 0x76, 0x8f, 0x35, 0x06, 0x03, 0xab, 0x6d, 0xee,
	0xed, 0x0f, 0xb5, 0x12, 0x8a, 0x14, 0x80, 0x56, 0x83, 0x3d, 0xd3, 0xca, 0xa8, 0x38, 0xd9, 0x66,
	0x47, 0x1a, 0xa4, 0xd0, 0x34, 0x37, 0x1c, 0x59, 0xbf, 0xdd, 0xe8, 0x0e, 0xb5, 0x75, 0x1c, 0xf7,
	0xfe, 0xee, 0x40, 0xab, 0xa2, 0x42, 0x9b, 0x8d, 0x4e, 0x7f, 0xd7, 0x64, 0x86, 0xb6, 0x81, 0xb3,
	0xa0, 0x5f, 0x9b, 0x48, 0xdb, 0x18, 0xec, 0x1b, 0x03, 0x4d, 0xc3, 0x9f, 0x9d, 0xc6, 0x5e, 0xa7,
	0xa1, 0xdd, 0xc1, 0x0e, 0x5a, 0xcc, 0xdc, 0x1d, 0x1e, 0xf6, 0x7a, 0x2d, 0xb1, 0xfa, 0xfd, 0x5e,
	0xaf, 0xad, 0xdd, 0x45, 0x1a, 0xb2, 0x36, 0x6d, 0x0b, 0x7f, 0xd2, 0x7a, 0x6a, 0xf7, 0xc8, 0x54,
	0x7b, 0xbd, 0xa1, 0x76, 0x1f, 0xe7, 0x47, 0xe6, 0x17, 0xeb, 0xf0, 0x01, 0xf6, 0xdc, 0x19, 0x0d,
	0xf6, 0x59, 0xaf, 0xd7, 0xd1, 0x6a, 0xfa, 0x5d, 0xd8, 0x1c, 0x75, 0x5b, 0x06, 0x3b, 0xec, 0xb1,
	0x76, 0xcb, 0xda, 0x6b, 0x0c, 0x0d, 0xed, 0xdd, 0xed, 0x83, 0xc4, 0xa4, 0xe4, 0x3f, 0xd1, 0x91,
	0x26, 0x75, 0xd0, 0x60, 0x26, 0x4e, 0x64, 0x79, 0x4f, 0x1e, 0x34, 0x98, 0xf5, 0xa5, 0xd8, 0x93,
	0xf8, 0xf3, 0x89, 0x16, 0x43, 0xbf, 0xd2, 0xd6, 0xd4, 0xcf, 0xaf, 0xb5, 0xec, 0xf6, 0x77, 0x00,
	0xc9, 0x7b, 0x38, 0x1c, 0x48, 0xb7, 0x67, 0xf5, 0x7b, 0xb8, 0x57, 0xdf, 0x41, 0xa5, 0x75, 0x7b,
	0x6c, 0xb8, 0x4f, 0x00, 0x2d, 0x43, 0x1b, 0xb2, 0x37, 0x52, 0xed, 0x35, 0x6c, 0xef, 0xf4, 0x64,
	0x73, 0xa0, 0x65, 0xb7, 0xf7, 0xe0, 0xce, 0x6b, 0xff, 0x86, 0x04, 0xfb, 0x22, 0x21, 0xc2, 0x30,
	0x8c, 0xc6, 0x60, 0x28, 0x0d, 0x03, 0x25, 0x69, 0x6b, 0xe4, 0x10, 0x8c, 0xc1, 0x50, 0xb8, 0x86,
	0x2e, 0xd9, 0xc3, 0xf6, 0x9f, 0x64, 0x40, 0x7f, 0x3d, 0x97, 0x16, 0x5b, 0xc5, 0x6a, 0x99, 0x7b,
	0xda, 0x3b, 0x68, 0x00, 0x2d, 0x63, 0xb7, 0x31, 0x6a, 0x0f, 0x09, 0x90, 0xd1, 0xef, 0xc1, 0x9d,
	0x51, 0x9f, 0x5c, 0x85, 0x25, 0xbd, 0x86, 0xb9, 0xa7, 0xad, 0x21, 0x5d, 0x73, 0xbf, 0xd1, 0xed,
	0x1a, 0x6d, 0x02, 0x64, 0x63, 0x4f, 0x81, 0xad, 0x9c, 0xae, 0xc3, 0xc6, 0x15, 0x96, 0x3c, 0x5a,
	0xdb, 0xa8, 0x9f, 0x82, 0x14, 0xb6, 0x17, 0x50, 0x8e, 0xbf, 0x94, 0xd3, 0xb7, 0xa0, 0x38, 0xea,
	0x3e, 0x43, 0xa7, 0x97, 0xd6, 0xf9, 0x1d, 0xa8, 0x76, 0x8d, 0xc6, 0xb0, 0x7d, 0x64, 0x35, 0x7b,
	0x1d, 0x74, 0x3b, 0xef, 0x90, 0x13, 0x64, 0x0d, 0xb3, 0x65, 0xb4, 0xb4, 0x0c, 0x0a, 0x6d, 0xf5,
	0x46, 0x3b, 0x6d, 0xc3, 0x22, 0x98, 0xd0, 0x5e, 0xbf, 0xd7, 0x3d, 0xb2, 0x86, 0x0d, 0xb3, 0x8d,
	0x9e, 0x11, 0x8d, 0xbc, 0x6d, 0x34, 0xba, 0xe8, 0x97, 0x0e, 0x8c, 0xae, 0x96, 0xdb, 0xfe, 0xbb,
	0x99, 0xd4, 0xc7, 0x55, 0x1d, 0xdf, 0xe1, 0xa8, 0x81, 0x7d, 0x7b, 0x31, 0xe5, 0x8e, 0xf6, 0x0e,
	0x6d, 0x63, 0x6e, 0xcf, 0x7d, 0x4f, 0xcb, 0x90, 0x12, 0xfd, 0xc0, 0xd3, 0xd6, 0x70, 0x7a, 0x7d,
	0x97, 0x07, 0x63, 0xd7, 0x9b, 0x68, 0x59, 0x72, 0xc9, 0x53, 0x3b, 0x7c, 0x29, 0xdc, 0xed, 0x61,
	0x60, 0xcf, 0xe7, 0xdc, 0x69, 0x50, 0x29, 0x48, 0xcb, 0x93, 0xe3, 0x8b, 0x16, 0xe3, 0x97, 0xa6,
	0xa7, 0x15, 0xb0, 0x61, 0x7a, 0x1d, 0x3c, 0xf6, 0xb5, 0x22, 0xee, 0x89, 0x3e, 0x8f, 0xb4, 0x12,
	0x79, 0x64, 0x7e, 0xee, 0x99, 0x5e, 0xe4, 0x0b, 0x2f, 0x3b, 0x88, 0x84, 0x10, 0x0d, 0xb6, 0x7f,
	0x05, 0x95, 0xd4, 0xbf, 0x09, 0xa1, 0x35, 0xf5, 0xa7, 0xae, 0x1c, 0x5a, 0xdb, 0xfd, 0x7e, 0xe1,
	0x3a, 0x1a, 0xb9, 0x85, 0x3d, 0x3b, 0x14, 0xbe, 0xab, 0xef, 0x9f, 0x3b, 0x3c, 0x10, 0xe3, 0xea,
	0xdb, 0x61, 0xc4, 0xc5, 0xde, 0xef, 0xe3, 0x19, 0xc4, 0x1d, 0x2d, 0xbf, 0xdd, 0x83, 0x72, 0xfc,
	0x3c, 0x1a, 0x15, 0xb4, 0xcb, 0x7a, 0xdd, 0xa1, 0x45, 0x56, 0xf1, 0x4e, 0xd2, 0x3e, 0x6c, 0xb0,
	0x8e, 0x30, 0x47, 0xd1, 0x6e, 0xf6, 0xda, 0xa8, 0x50, 0x1d, 0x36, 0x44, 0xbb, 0xd7, 0x6c, 0xb6,
	0x47, 0xa8, 0xf6, 0xec, 0xf6, 0x0b, 0xa8, 0xa4, 0x9e, 0x4d, 0x93, 0x8e, 0x47, 0x9d, 0x51, 0x7b,
	0x34, 0x50, 0x42, 0x75, 0xd8, 0x50, 0x90, 0x8e, 0xd1, 0x32, 0x47, 0x28, 0xf8, 0x0e, 0x54, 0x63,
	0xd8, 0xa8, 0x3d, 0x34, 0x85, 0xec, 0x98, 0xd1, 0xec, 0xec, 0x8c, 0xd0, 0xdc, 0x8f, 0xa0, 0x92,
	0x7a, 0x3d, 0x2d, 0x8e, 0x27, 0xd6, 0x18, 0x26, 0xb2, 0x53, 0x90, 0x46, 0x7b, 0xd8, 0xd3, 0x32,
	0x28, 0x46, 0x41, 0xfa, 0xac, 0xd7, 0xa7, 0xe3, 0x31, 0x05, 0x8b, 0x45, 0xb7, 0xa0, 0x28, 0xdf,
	0x57, 0x93, 0x9b, 0xef, 0xed, 0x29, 0x91, 0xb2, 0xd5, 0x31, 0x69, 0x1b, 0xa1, 0x06, 0x08, 0x47,
	0xe7, 0xc7, 0x1a, 0xfa, 0xa4, 0xdd, 0xdf, 0xdf, 0xb3, 0x86, 0xfb, 0x66, 0xf3, 0x99, 0x96, 0xdd,
	0xfe, 0xf3, 0xb5, 0x95, 0x2f, 0x44, 0xd5, 0x88, 0xc7, 0x7e, 0x14, 0xd9, 0x13, 0x6e, 0xcd, 0xa7,
	0x7e, 0x24, 0x76, 0xd5, 0xd8, 0x0e, 0xa3, 0x29, 0xb7, 0xce, 0xed, 0xe9, 0x54, 0x98, 0xad, 0x04,
	0xd0, 0xb3, 0x36, 0x6d, 0x4d, 0xdf, 0x02, 0x4d, 0x42, 0xc6, 0xfe, 0x22, 0x88, 0x2e, 0xed, 0xc0,
	0x11, 0x0b, 0x7a, 0xea, 0x2f, 0x42, 0x5c, 0x50, 0x80, 0x42, 0xc4, 0x67, 0xf3, 0x29, 0x17, 0x87,
	0x51, 0xe4, 0xcf, 0x8e, 0xc5, 0x61, 0x1e, 0x9e, 0xfa, 0x73, 0x4b, 0x50, 0x15, 0x71, 0xa8, 0xe7,
	0x76, 0xc0, 0x45, 0xb3, 0x84, 0x2a, 0xa7, 0x6f, 0xdd, 0x23, 0x2b, 0xfc, 0x7e, 0x61, 0x07, 0x5c,
	0x2b, 0xa3, 0x61, 0xcc, 0xed, 0x10, 0x73, 0x3e, 0x0d, 0x50, 0xfe, 0x39, 0x19, 0x0c, 0x9d, 0xe6,
	0x49, 0xcf, 0xeb, 0xd8, 0xc5, 0x39, 0x9f, 0x4e, 0xb5, 0x2a, 0xd2, 0x9c, 0xd9, 0x8b, 0x69, 0xa4,
	0x6d, 0xe0, 0x3c, 0x26, 0x98, 0x30, 0xca, 0x51, 0x6f, 0xa2, 0xde, 0x22, 0xf9, 0x94, 0x4e, 0xd3,
	0x70, 0x30, 0xf4, 0x2a, 0x49, 0xf4, 0x7e, 0x07, 0x7b, 0x3f, 0x75, 0xa7, 0xf4, 0x39, 0x81, 0x00,
	0xe9, 0xd8, 0xcb, 0x8c, 0xdb, 0x8e, 0x75, 0x8a, 0x7a, 0xb8, 0x8b, 0xde, 0x25, 0x2e, 0x73, 0x71,
	0x2f, 0xa2, 0xdb, 0x53, 0x6d, 0x0b, 0xc7, 0x38, 0x75, 0x8f, 0x03, 0x3b, 0xb8, 0xd4, 0xee, 0xd1,
	0xc4, 0xed, 0x33, 0x1e, 0x78, 0xda, 0xfd, 0xed, 0x5f, 0x43, 0x25, 0xf5, 0xb8, 0x85, 0x1c, 0x7c,
	0xaf, 0xdb, 0x1b, 0x8a, 0x45, 0xc4, 0x7d, 0x37, 0x64, 0x66, 0xdf, 0x18, 0x68, 0x19, 0x44, 0x99,
	0xcc, 0x1c, 0x58, 0xc6, 0x91, 0x21, 0x3c, 0xf3, 0xa0, 0xdf, 0x1b, 0xa2, 0x3f, 0xa8, 0x42, 0xb9,
	0x3f, 0xea, 0x9b, 0x6d, 0xc2, 0x88, 0x33, 0xb2, 0x37, 0x1c, 0xb6, 0x8d, 0x96, 0x96, 0xdf, 0xfe,
	0x77, 0x19, 0xd8, 0xbc, 0x52, 0x38, 0x40, 0xfa, 0x06, 0x1b, 0x5a, 0x66, 0xa7, 0xb1, 0x27, 0x3b,
	0x69, 0xf6, 0x0e, 0x0c, 0x46, 0xde, 0xe7, 0x0e, 0x54, 0x99, 0xd9, 0xdd, 0x1b, 0x58, 0xfb, 0x8d,
	0xee, 0x1e, 0x06, 0x3a, 0xd4, 0xd3, 0x4e, 0xa3, 0xdb, 0xc2, 0x9e, 0x30, 0xaa, 0xe8, 0x9b, 0xcf,
	0x8c, 0x81, 0x96, 0xc3, 0x05, 0x37, 0x87, 0x46, 0x87, 0x02, 0x95, 0x5d, 0xb3, 0xa9, 0xe5, 0x11,
	0x3b, 0xdc, 0x67, 0x22, 0xa4, 0x28, 0x43, 0xbe, 0xd9, 0xc6, 0xf0, 0xa3, 0x48, 0x87, 0x81, 0x71,
	0xd8, 0x95, 0xfd, 0x95, 0x68, 0x4b, 0x37, 0xf6, 0x8c, 0x81, 0x56, 0x26, 0x19, 0xed, 0xf6, 0x88,
	0xac, 0x1a, 0x8f, 0x6b, 0x40, 0xa3, 0x31, 0xe9, 0xfc, 0xee, 0x18, 0xdd, 0xa1, 0xd5, 0x37, 0x8d,
	0xa6, 0xa1, 0x55, 0x70, 0x88, 0x87, 0xcc, 0x1c, 0xe2, 0x78, 0xd6, 0xb7, 0x5f, 0xc2, 0xdd, 0x6b,
	0x8a, 0x06, 0xb8, 0x3b, 0xa8, 0x07, 0xab, 0xc9, 0x64, 0xf8, 0x40, 0x56, 0x2a, 0x60, 0xe2, 0x08,
	0xa7, 0x7d, 0x20, 0x00, 0x78, 0xb0, 0x0a, 0xa7, 0x2f, 0xda, 0x22, 0xc4, 0xcb, 0x26, 0x04, 0x38,
	0x37, 0x2d, 0xb7, 0xbd, 0x03, 0x5b, 0xd7, 0x25, 0xd5, 0x78, 0xf4, 0x0e, 0x59, 0xa3, 0x3b, 0x30,
	0x87, 0xe6, 0x81, 0x61, 0x1d, 0x18, 0x6c, 0x47, 0x7b, 0x07, 0xd7, 0xde, 0xec, 0x5e, 0x05, 0x67,
	0xb6, 0xff, 0xb4, 0x04, 0xeb, 0xe9, 0x8c, 0x1e, 0x87, 0x8a, 0x28, 0xeb, 0xd0, 0x1c, 0xee, 0x1b,
	0xa8, 0x6e, 0xc1, 0x4b, 0xb0, 0x01, 0x46, 0x6a, 0x78, 0xaa, 0xb7, 0x76, 0x8e, 0xb4, 0x0c, 0xf6,
	0x43, 0xe0, 0x4e, 0x63, 0x30, 0x68, 0x34, 0x99, 0x58, 0x91, 0x3b, 0x50, 0x25, 0xe0, 0x2e, 0x86,
	0x34, 0x08, 0xca, 0xc6, 0xa0, 0x76, 0x63, 0xa7, 0x47, 0x54, 0xb9, 0x18, 0xb4, 0xc7, 0x0c, 0x83,
	0xa8, 0xf2, 0x31, 0x88, 0x19, 0xbb, 0xa3, 0x01, 0x82, 0x0a, 0x31, 0x68, 0xd0, 0x37, 0x1a, 0xcf,
	0x10, 0x54, 0x8c, 0x87, 0x67, 0x74, 0x76, 0x58, 0xa3, 0x89, 0xb0, 0x52, 0x32, 0xbc, 0x21, 0x33,
	0x91, 0x8c, 0xe2, 0xea, 0x72, 0x0c, 0xee, 0x18, 0x5d, 0xa2, 0xec, 0xf7, 0x06, 0x86, 0x06, 0xb1,
	0x84, 0x21, 0x6b, 0x1c, 0x18, 0x14, 0x2f, 0x57, 0x70, 0xad, 0x45, 0xdf, 0x0d, 0x93, 0xba, 0x5e,
	0x47, 0xe5, 0x13, 0x64, 0xdf, 0x6c, 0x21, 0xa0, 0xaa, 0xd7, 0x60, 0x4b, 0x4c, 0xa2, 0xd7, 0xc3,
	0x3e, 0x9a, 0xbd, 0xee, 0xee, 0x68, 0x60, 0xb4, 0xb4, 0x0d, 0xfd, 0x5d, 0xb8, 0x97, 0xc6, 0x0c,
	0x0d, 0xc6, 0xcc, 0x5d, 0xd3, 0x68, 0x69, 0x9b, 0x71, 0x5f, 0x2d, 0xe3, 0xa0, 0x37, 0xa2, 0xa9,
	0x6b, 0xf1, 0xa4, 0x1a, 0xad, 0x8e, 0x49, 0xa0, 0x3b, 0x71, 0xf7, 0x3b, 0x23, 0xd6, 0x45, 0x88,
	0x1e, 0x43, 0x0e, 0x0d, 0xa3, 0x8f, 0x90, 0xbb, 0x57, 0xfb, 0x6f, 0x19, 0xdf, 0x19, 0xcd, 0xa1,
	0xd1, 0xd2, 0xb6, 0x62, 0x81, 0xb4, 0x02, 0x48, 0x7c, 0x2f, 0xee, 0x77, 0x80, 0xf6, 0xd6, 0x41,
	0xd8, 0x7d, 0xfd, 0x21, 0xdc, 0x97, 0x8b, 0xb8, 0xd3, 0x31, 0x07, 0x03, 0xf3, 0xc0, 0xd8, 0x33,
	0x06, 0x64, 0x8b, 0x0f, 0xf4, 0xfb, 0xa0, 0x8b, 0x45, 0x33, 0x86, 0x8d, 0x76, 0xbf, 0x87, 0x26,
	0xd2, 0xeb, 0x6a, 0xb5, 0x84, 0xa7, 0x63, 0x34, 0x98, 0xd1, 0x32, 0xbb, 0xc3, 0xde, 0xa0, 0x6f,
	0x62, 0x84, 0xfb, 0x6e, 0x3c, 0x44, 0x0c, 0xea, 0xb1, 0x87, 0x87, 0xb8, 0x77, 0xe5, 0x6c, 0x1b,
	0x2d, 0xed, 0xbd, 0xd4, 0xb2, 0x8f, 0xf6, 0xf6, 0x91, 0xe2, 0xfd, 0xab, 0x93, 0xe8, 0xed, 0xee,
	0x1a, 0x68, 0x4d, 0xda, 0x07, 0xf1, 0x88, 0x77, 0x0c, 0xdc, 0xe1, 0xfb, 0xbd, 0xa1, 0xf6, 0x61,
	0xac, 0xd8, 0x7e, 0xbb, 0x61, 0x76, 0x87, 0xa9, 0x01, 0x7f, 0x14, 0x77, 0xde, 0x31, 0xda, 0x64,
	0x3e, 0x8f, 0x12, 0x5b, 0xd9, 0xef, 0xf5, 0x08, 0xf4, 0x71, 0xb2, 0xd2, 0x3d, 0x36, 0x14, 0xda,
	0xaf, 0xeb, 0x1f, 0xc2, 0x43, 0xa1, 0xac, 0x5e, 0xa7, 0x63, 0x0e, 0x87, 0xa4, 0xc9, 0x3e, 0x5a,
	0x42, 0xab, 0xd1, 0x1c, 0x6a, 0x9f, 0xc4, 0x82, 0xfb, 0xac, 0x71, 0x84, 0x1c, 0xbf, 0x17, 0xeb,
	0xa6, 0xd9, 0xeb, 0x0e, 0x8d, 0x4e, 0xbf, 0xdd, 0x20, 0xe9, 0x9f, 0xc6, 0x94, 0x4d, 0x31, 0x17,
	0xed, 0xb3, 0xc4, 0x36, 0xbb, 0x7b, 0xac, 0x71, 0x80, 0xb0, 0x1f, 0xa0, 0xcf, 0x90, 0xf2, 0x7a,
	0xc2, 0x93, 0x74, 0xf7, 0xb4, 0xc7, 0xc9, 0xfa, 0x8c, 0x76, 0x77, 0xc5, 0x26, 0xfb, 0x61, 0x6c,
	0xae, 0xa4, 0x01, 0xb3, 0xd3, 0x6f, 0xa0, 0x93, 0xdc, 0xd6, 0x1f, 0xc0, 0xdd, 0x04, 0x8c, 0x63,
	0xe8, 0x31, 0x5c, 0xf6, 0xbf, 0x10, 0x4b, 0x26, 0xc4, 0x6e, 0xbb, 0x71, 0x64, 0xb4, 0xb4, 0x1f,
	0xc5, 0x50, 0xe9, 0x22, 0x77, 0x59, 0xaf, 0xa3, 0x7d, 0xbe, 0x2c, 0xa4, 0x33, 0x1a, 0x9a, 0xed,
	0x06, 0x0a, 0xf9, 0x22, 0x46, 0x0c, 0x99, 0x39, 0xea, 0xf4, 0xf7, 0x1b, 0xdd, 0x21, 0xed, 0x92,
	0x1f, 0x6f, 0xff, 0xc7, 0x8c, 0x28, 0x98, 0x90, 0x43, 0x01, 0x28, 0x74, 0x5c, 0x3b, 0x9c, 0xd9,
	0x22, 0x16, 0x1f, 0x44, 0xdc, 0x9e, 0x89, 0x78, 0xad, 0xe3, 0x86, 0x91, 0xb6, 0x86, 0xba, 0x88,
	0xff, 0xd7, 0xc3, 0x22, 0x8c, 0x84, 0xdf, 0xef, 0xd8, 0x93, 0x99, 0x4d, 0x04, 0x39, 0xe2, 0x9a,
	0xf9, 0x2f, 0xf1, 0x34, 0xdd, 0x00, 0x68, 0x05, 0xf6, 0xc4, 0xf7, 0x4e, 0xdc, 0x80, 0x6b, 0x05,
	0x4a, 0x51, 0xf0, 0x17, 0xc5, 0x6b, 0x87, 0xfc, 0x58, 0x2b, 0xe1, 0xe6, 0x53, 0xe2, 0x30, 0xea,
	0x2a, 0xe3, 0xe2, 0x2a, 0xc0, 0x81, 0x3d, 0xf7, 0x03, 0x91, 0x1d, 0xf7, 0xd4, 0x87, 0xa0, 0xc2,
	0x0b, 0x0f, 0xb8, 0xbd, 0xeb, 0xdb, 0x33, 0x6d, 0x1d, 0x71, 0x66, 0xc4, 0x67, 0xf4, 0xc9, 0x90,
	0x56, 0xc5, 0xa4, 0xbf, 0x69, 0xcf, 0xe6, 0xd4, 0x4b, 0x12, 0xec, 0xee, 0xac, 0xed, 0x67, 0xff,
	0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x63, 0xb2, 0xa0, 0xca, 0x84, 0x55, 0x00, 0x00,
}
